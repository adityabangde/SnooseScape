
run_away_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000134c  0800de10  0800de10  0000ee10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f15c  0800f15c  00011080  2**0
                  CONTENTS
  4 .ARM          00000008  0800f15c  0800f15c  0001015c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f164  0800f164  00011080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f164  0800f164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f168  0800f168  00010168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800f16c  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002448  20000080  0800f1ec  00011080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024c8  0800f1ec  000114c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a72  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b10  00000000  00000000  00033b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  00038638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a4  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9b2  00000000  00000000  0003b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024597  00000000  00000000  000663ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101e67  00000000  00000000  0008a945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c7ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008414  00000000  00000000  0018c7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00194c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddf4 	.word	0x0800ddf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ddf4 	.word	0x0800ddf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MPU6050_init>:
float Az_filter[FILTER_SIZE] = {0};

//float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly
void MPU6050_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2275      	movs	r2, #117	@ 0x75
 8000f50:	21d2      	movs	r1, #210	@ 0xd2
 8000f52:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <MPU6050_init+0xa8>)
 8000f54:	f004 fc00 	bl	8005758 <HAL_I2C_Mem_Read>
	if (check == 104)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b68      	cmp	r3, #104	@ 0x68
 8000f5c:	d13b      	bne.n	8000fd6 <MPU6050_init+0x9e>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	226b      	movs	r2, #107	@ 0x6b
 8000f74:	21d2      	movs	r1, #210	@ 0xd2
 8000f76:	481a      	ldr	r0, [pc, #104]	@ (8000fe0 <MPU6050_init+0xa8>)
 8000f78:	f004 fada 	bl	8005530 <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8000f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2219      	movs	r2, #25
 8000f92:	21d2      	movs	r1, #210	@ 0xd2
 8000f94:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <MPU6050_init+0xa8>)
 8000f96:	f004 facb 	bl	8005530 <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	221c      	movs	r2, #28
 8000fb0:	21d2      	movs	r1, #210	@ 0xd2
 8000fb2:	480b      	ldr	r0, [pc, #44]	@ (8000fe0 <MPU6050_init+0xa8>)
 8000fb4:	f004 fabc 	bl	8005530 <HAL_I2C_Mem_Write>
		
		data = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8000fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1dbb      	adds	r3, r7, #6
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	221b      	movs	r2, #27
 8000fce:	21d2      	movs	r1, #210	@ 0xd2
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <MPU6050_init+0xa8>)
 8000fd2:	f004 faad 	bl	8005530 <HAL_I2C_Mem_Write>
	}

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003f4 	.word	0x200003f4

08000fe4 <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	223b      	movs	r2, #59	@ 0x3b
 8001004:	21d2      	movs	r1, #210	@ 0xd2
 8001006:	4835      	ldr	r0, [pc, #212]	@ (80010dc <MPU6050_Read_Accel+0xf8>)
 8001008:	f004 fba6 	bl	8005758 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer 
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800100c:	7c3b      	ldrb	r3, [r7, #16]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7c7b      	ldrb	r3, [r7, #17]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <MPU6050_Read_Accel+0xfc>)
 800101c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800101e:	7cbb      	ldrb	r3, [r7, #18]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7cfb      	ldrb	r3, [r7, #19]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MPU6050_Read_Accel+0x100>)
 800102e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7d7b      	ldrb	r3, [r7, #21]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <MPU6050_Read_Accel+0x104>)
 8001040:	801a      	strh	r2, [r3, #0]
	
	*Ax = Accel_X_RAW*100/16384.0;
 8001042:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <MPU6050_Read_Accel+0xfc>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	461a      	mov	r2, r3
 800104a:	2364      	movs	r3, #100	@ 0x64
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa67 	bl	8000524 <__aeabi_i2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <MPU6050_Read_Accel+0x108>)
 800105c:	f7ff fbf6 	bl	800084c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fd9e 	bl	8000ba8 <__aeabi_d2f>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MPU6050_Read_Accel+0x100>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	461a      	mov	r2, r3
 800107a:	2364      	movs	r3, #100	@ 0x64
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MPU6050_Read_Accel+0x108>)
 800108c:	f7ff fbde 	bl	800084c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd86 	bl	8000ba8 <__aeabi_d2f>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MPU6050_Read_Accel+0x104>)
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	461a      	mov	r2, r3
 80010aa:	2364      	movs	r3, #100	@ 0x64
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MPU6050_Read_Accel+0x108>)
 80010bc:	f7ff fbc6 	bl	800084c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd6e 	bl	8000ba8 <__aeabi_d2f>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200003f4 	.word	0x200003f4
 80010e0:	2000009c 	.word	0x2000009c
 80010e4:	2000009e 	.word	0x2000009e
 80010e8:	200000a0 	.word	0x200000a0
 80010ec:	40d00000 	.word	0x40d00000

080010f0 <moving_average>:
    *Gx = Gyro_X_RAW / 131.0;
    *Gy = Gyro_Y_RAW / 131.0;
    *Gz = Gyro_Z_RAW / 131.0;
}

float moving_average(float *filter, float new_value) {
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	ed87 0a00 	vstr	s0, [r7]
    float sum = 0.0;
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < FILTER_SIZE; i++) {
 8001102:	2301      	movs	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	e01e      	b.n	8001146 <moving_average+0x56>
        filter[i - 1] = filter[i]; // Shift values
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	441a      	add	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001116:	3b01      	subs	r3, #1
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	440b      	add	r3, r1
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	601a      	str	r2, [r3, #0]
        sum += filter[i - 1];
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001128:	3b01      	subs	r3, #1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ed97 7a03 	vldr	s14, [r7, #12]
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 1; i < FILTER_SIZE; i++) {
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3301      	adds	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b04      	cmp	r3, #4
 800114a:	dddd      	ble.n	8001108 <moving_average+0x18>
    }
    filter[FILTER_SIZE - 1] = new_value; // Add new value
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3310      	adds	r3, #16
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
    sum += new_value;
 8001154:	ed97 7a03 	vldr	s14, [r7, #12]
 8001158:	edd7 7a00 	vldr	s15, [r7]
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	edc7 7a03 	vstr	s15, [r7, #12]
    return sum / FILTER_SIZE;
 8001164:	edd7 7a03 	vldr	s15, [r7, #12]
 8001168:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800116c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001170:	eef0 7a66 	vmov.f32	s15, s13
}
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	0000      	movs	r0, r0
 8001184:	0000      	movs	r0, r0
	...

08001188 <get_roll_pitch>:

void get_roll_pitch(int* roll, int* pitch){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	MPU6050_Read_Accel(&Ax, &Ay, &Az);
 8001192:	4a57      	ldr	r2, [pc, #348]	@ (80012f0 <get_roll_pitch+0x168>)
 8001194:	4957      	ldr	r1, [pc, #348]	@ (80012f4 <get_roll_pitch+0x16c>)
 8001196:	4858      	ldr	r0, [pc, #352]	@ (80012f8 <get_roll_pitch+0x170>)
 8001198:	f7ff ff24 	bl	8000fe4 <MPU6050_Read_Accel>

	// Apply moving average for stability
	Ax = moving_average(Ax_filter, Ax);
 800119c:	4b56      	ldr	r3, [pc, #344]	@ (80012f8 <get_roll_pitch+0x170>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	4855      	ldr	r0, [pc, #340]	@ (80012fc <get_roll_pitch+0x174>)
 80011a8:	f7ff ffa2 	bl	80010f0 <moving_average>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	4b51      	ldr	r3, [pc, #324]	@ (80012f8 <get_roll_pitch+0x170>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
	Ay = moving_average(Ay_filter, Ay);
 80011b6:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <get_roll_pitch+0x16c>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	484f      	ldr	r0, [pc, #316]	@ (8001300 <get_roll_pitch+0x178>)
 80011c2:	f7ff ff95 	bl	80010f0 <moving_average>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <get_roll_pitch+0x16c>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
	Az = moving_average(Az_filter, Az);
 80011d0:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <get_roll_pitch+0x168>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	484a      	ldr	r0, [pc, #296]	@ (8001304 <get_roll_pitch+0x17c>)
 80011dc:	f7ff ff88 	bl	80010f0 <moving_average>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	4b42      	ldr	r3, [pc, #264]	@ (80012f0 <get_roll_pitch+0x168>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]

	// Calculate roll and pitch using accelerometer data
	*roll = (int)(atan2(Ay, Az) * 180.0 / M_PI);  // Roll in degrees
 80011ea:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <get_roll_pitch+0x16c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9aa 	bl	8000548 <__aeabi_f2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <get_roll_pitch+0x168>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	ec43 2b11 	vmov	d1, r2, r3
 800120a:	ec45 4b10 	vmov	d0, r4, r5
 800120e:	f00b fd43 	bl	800cc98 <atan2>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <get_roll_pitch+0x180>)
 800121c:	f7ff f9ec 	bl	80005f8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	a32f      	add	r3, pc, #188	@ (adr r3, 80012e8 <get_roll_pitch+0x160>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fb0d 	bl	800084c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc8d 	bl	8000b58 <__aeabi_d2iz>
 800123e:	4602      	mov	r2, r0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
	*pitch = (int)(atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * 180.0 / M_PI);  // Pitch in degrees
 8001244:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <get_roll_pitch+0x170>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	eef1 7a67 	vneg.f32	s15, s15
 800124e:	ee17 3a90 	vmov	r3, s15
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f978 	bl	8000548 <__aeabi_f2d>
 8001258:	4604      	mov	r4, r0
 800125a:	460d      	mov	r5, r1
 800125c:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <get_roll_pitch+0x16c>)
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <get_roll_pitch+0x16c>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <get_roll_pitch+0x168>)
 800126e:	edd3 6a00 	vldr	s13, [r3]
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <get_roll_pitch+0x168>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	ee17 0a90 	vmov	r0, s15
 8001284:	f7ff f960 	bl	8000548 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f00b fd04 	bl	800cc9c <sqrt>
 8001294:	eeb0 7a40 	vmov.f32	s14, s0
 8001298:	eef0 7a60 	vmov.f32	s15, s1
 800129c:	eeb0 1a47 	vmov.f32	s2, s14
 80012a0:	eef0 1a67 	vmov.f32	s3, s15
 80012a4:	ec45 4b10 	vmov	d0, r4, r5
 80012a8:	f00b fcf6 	bl	800cc98 <atan2>
 80012ac:	ec51 0b10 	vmov	r0, r1, d0
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <get_roll_pitch+0x180>)
 80012b6:	f7ff f99f 	bl	80005f8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	a309      	add	r3, pc, #36	@ (adr r3, 80012e8 <get_roll_pitch+0x160>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fac0 	bl	800084c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc40 	bl	8000b58 <__aeabi_d2iz>
 80012d8:	4602      	mov	r2, r0
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	601a      	str	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bdb0      	pop	{r4, r5, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	54442d18 	.word	0x54442d18
 80012ec:	400921fb 	.word	0x400921fb
 80012f0:	200000ac 	.word	0x200000ac
 80012f4:	200000a8 	.word	0x200000a8
 80012f8:	200000a4 	.word	0x200000a4
 80012fc:	200000b0 	.word	0x200000b0
 8001300:	200000c4 	.word	0x200000c4
 8001304:	200000d8 	.word	0x200000d8
 8001308:	40668000 	.word	0x40668000

0800130c <buzzer_init>:
static uint32_t space_duration = 0;
static uint8_t note_state = 0;  // 0: Note off, 1: Note playing, 2: Space between notes
static uint8_t current_melody = 0;  // 0: Main theme, 1: Death sound

void buzzer_init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001310:	2100      	movs	r1, #0
 8001312:	4802      	ldr	r0, [pc, #8]	@ (800131c <buzzer_init+0x10>)
 8001314:	f006 faf8 	bl	8007908 <HAL_TIM_PWM_Start>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000578 	.word	0x20000578

08001320 <start_mario_melody>:

void start_mario_melody(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    note_index = 0;
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <start_mario_melody+0x34>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    melody_playing = 1;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <start_mario_melody+0x38>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
    note_timer = HAL_GetTick();
 8001330:	f003 faa2 	bl	8004878 <HAL_GetTick>
 8001334:	4603      	mov	r3, r0
 8001336:	4a09      	ldr	r2, [pc, #36]	@ (800135c <start_mario_melody+0x3c>)
 8001338:	6013      	str	r3, [r2, #0]
    note_state = 1;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <start_mario_melody+0x40>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
    current_melody = 0;
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <start_mario_melody+0x44>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
    note_duration = mario_durations[0];
 8001346:	2326      	movs	r3, #38	@ 0x26
 8001348:	461a      	mov	r2, r3
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <start_mario_melody+0x48>)
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000f0 	.word	0x200000f0
 8001358:	200000f4 	.word	0x200000f4
 800135c:	200000ec 	.word	0x200000ec
 8001360:	200000fc 	.word	0x200000fc
 8001364:	200000fd 	.word	0x200000fd
 8001368:	200000f8 	.word	0x200000f8

0800136c <Debug_Print>:


TIME time;

void Debug_Print(char *message)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7fe ff2b 	bl	80001d0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4803      	ldr	r0, [pc, #12]	@ (8001394 <Debug_Print+0x28>)
 8001386:	f007 fb33 	bl	80089f0 <HAL_UART_Transmit>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200005c4 	.word	0x200005c4

08001398 <decToBcd>:

// Convert decimal to binary coded numbers
uint8_t decToBcd(int val)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val/10*16) + (val%10));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <decToBcd+0x48>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	1092      	asrs	r2, r2, #2
 80013aa:	17db      	asrs	r3, r3, #31
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	b2d8      	uxtb	r0, r3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <decToBcd+0x48>)
 80013b8:	fb83 1302 	smull	r1, r3, r3, r2
 80013bc:	1099      	asrs	r1, r3, #2
 80013be:	17d3      	asrs	r3, r2, #31
 80013c0:	1ac9      	subs	r1, r1, r3
 80013c2:	460b      	mov	r3, r1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	1ad1      	subs	r1, r2, r3
 80013cc:	b2cb      	uxtb	r3, r1
 80013ce:	4403      	add	r3, r0
 80013d0:	b2db      	uxtb	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	66666667 	.word	0x66666667

080013e4 <bcdToDec>:

// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
    return (int)((val/16*10) + (val%16));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	461a      	mov	r2, r3
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	4413      	add	r3, r2
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <Set_Time>:

void Set_Time(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af04      	add	r7, sp, #16
 800141a:	4604      	mov	r4, r0
 800141c:	4608      	mov	r0, r1
 800141e:	4611      	mov	r1, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	4603      	mov	r3, r0
 8001428:	71bb      	strb	r3, [r7, #6]
 800142a:	460b      	mov	r3, r1
 800142c:	717b      	strb	r3, [r7, #5]
 800142e:	4613      	mov	r3, r2
 8001430:	713b      	strb	r3, [r7, #4]
    uint8_t set_time[7];
    set_time[0] = decToBcd(sec);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffaf 	bl	8001398 <decToBcd>
 800143a:	4603      	mov	r3, r0
 800143c:	723b      	strb	r3, [r7, #8]
    set_time[1] = decToBcd(min);
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffa9 	bl	8001398 <decToBcd>
 8001446:	4603      	mov	r3, r0
 8001448:	727b      	strb	r3, [r7, #9]
    set_time[2] = decToBcd(hour);
 800144a:	797b      	ldrb	r3, [r7, #5]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ffa3 	bl	8001398 <decToBcd>
 8001452:	4603      	mov	r3, r0
 8001454:	72bb      	strb	r3, [r7, #10]
    set_time[3] = decToBcd(dow);
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff9d 	bl	8001398 <decToBcd>
 800145e:	4603      	mov	r3, r0
 8001460:	72fb      	strb	r3, [r7, #11]
    set_time[4] = decToBcd(dom);
 8001462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff96 	bl	8001398 <decToBcd>
 800146c:	4603      	mov	r3, r0
 800146e:	733b      	strb	r3, [r7, #12]
    set_time[5] = decToBcd(month);
 8001470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff8f 	bl	8001398 <decToBcd>
 800147a:	4603      	mov	r3, r0
 800147c:	737b      	strb	r3, [r7, #13]
    set_time[6] = decToBcd(year);
 800147e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff88 	bl	8001398 <decToBcd>
 8001488:	4603      	mov	r3, r0
 800148a:	73bb      	strb	r3, [r7, #14]

    if(HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000) == HAL_OK)
 800148c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	2307      	movs	r3, #7
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2200      	movs	r2, #0
 80014a0:	21d0      	movs	r1, #208	@ 0xd0
 80014a2:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <Set_Time+0xb0>)
 80014a4:	f004 f844 	bl	8005530 <HAL_I2C_Mem_Write>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <Set_Time+0xa2>
    {
        Debug_Print("[DEBUG] Time set successfully\r\n");
 80014ae:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <Set_Time+0xb4>)
 80014b0:	f7ff ff5c 	bl	800136c <Debug_Print>
    }
    else
    {
    	Debug_Print("[DEBUG] Error setting time\r\n");
    }
}
 80014b4:	e002      	b.n	80014bc <Set_Time+0xa8>
    	Debug_Print("[DEBUG] Error setting time\r\n");
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <Set_Time+0xb8>)
 80014b8:	f7ff ff58 	bl	800136c <Debug_Print>
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	200003f4 	.word	0x200003f4
 80014c8:	0800de10 	.word	0x0800de10
 80014cc:	0800de30 	.word	0x0800de30

080014d0 <Set_init_time>:

void Set_init_time(char *date, char *time) {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b098      	sub	sp, #96	@ 0x60
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
//    char month_str[4];    // Buffer for month string
//	int tempYear, tempDay, tempHour, tempMinute, tempSecond;

    char month_str[4] = {date[0], date[1], date[2], 0};
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	789b      	ldrb	r3, [r3, #2]
 80014ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	uint8_t day = ((date[4] == ' ' ? '0' : date[4]) - '0') * 10 + (date[5] - '0');
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3304      	adds	r3, #4
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d00a      	beq.n	8001518 <Set_init_time+0x48>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3304      	adds	r3, #4
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3b30      	subs	r3, #48	@ 0x30
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e000      	b.n	800151a <Set_init_time+0x4a>
 8001518:	2300      	movs	r3, #0
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	3205      	adds	r2, #5
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	4413      	add	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	3b30      	subs	r3, #48	@ 0x30
 8001526:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	// Get year
	uint8_t year = (date[9] - '0') * 10 + (date[10] - '0');
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3309      	adds	r3, #9
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b30      	subs	r3, #48	@ 0x30
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	330a      	adds	r3, #10
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4413      	add	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3b30      	subs	r3, #48	@ 0x30
 800154a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	// Get time
	uint8_t hour = (time[0] - '0') * 10 + (time[1] - '0');
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3b30      	subs	r3, #48	@ 0x30
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	3b30      	subs	r3, #48	@ 0x30
 800156c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t min = (time[3] - '0') * 10 + (time[4] - '0');
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3303      	adds	r3, #3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	3b30      	subs	r3, #48	@ 0x30
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3304      	adds	r3, #4
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3b30      	subs	r3, #48	@ 0x30
 8001590:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t sec = (time[6] - '0') * 10 + (time[7] - '0');
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3306      	adds	r3, #6
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	3b30      	subs	r3, #48	@ 0x30
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	0092      	lsls	r2, r2, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3307      	adds	r3, #7
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	3b30      	subs	r3, #48	@ 0x30
 80015b4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	uint8_t month_num = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	    const char *months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <Set_init_time+0x170>)
 80015c0:	f107 040c 	add.w	r4, r7, #12
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                           "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
	    for(int i = 0; i < 12; i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015da:	e017      	b.n	800160c <Set_init_time+0x13c>
	        if(strncmp(month_str, months[i], 3) == 0) {
 80015dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	3350      	adds	r3, #80	@ 0x50
 80015e2:	443b      	add	r3, r7
 80015e4:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80015e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015ec:	2203      	movs	r2, #3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00b ff76 	bl	800d4e0 <strncmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <Set_init_time+0x136>
	            month_num = i + 1;
 80015fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	            break;
 8001604:	e005      	b.n	8001612 <Set_init_time+0x142>
	    for(int i = 0; i < 12; i++) {
 8001606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001608:	3301      	adds	r3, #1
 800160a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800160c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800160e:	2b0b      	cmp	r3, #11
 8001610:	dde4      	ble.n	80015dc <Set_init_time+0x10c>
	        }
	    }

    // Set the time using parsed values
    Set_Time(sec, min, hour, 1, day, month_num, year);
 8001612:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001616:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800161a:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800161e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	f7ff feef 	bl	8001414 <Set_Time>
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	@ 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	0800de80 	.word	0x0800de80

08001644 <Get_Time>:

void Get_Time(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af04      	add	r7, sp, #16
    uint8_t get_time[7];
    if(HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000) == HAL_OK)
 800164a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2307      	movs	r3, #7
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	463b      	mov	r3, r7
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	2200      	movs	r2, #0
 800165c:	21d0      	movs	r1, #208	@ 0xd0
 800165e:	4823      	ldr	r0, [pc, #140]	@ (80016ec <Get_Time+0xa8>)
 8001660:	f004 f87a 	bl	8005758 <HAL_I2C_Mem_Read>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d138      	bne.n	80016dc <Get_Time+0x98>
    {
        time.seconds = bcdToDec(get_time[0]);
 800166a:	783b      	ldrb	r3, [r7, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff feb9 	bl	80013e4 <bcdToDec>
 8001672:	4603      	mov	r3, r0
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <Get_Time+0xac>)
 8001678:	701a      	strb	r2, [r3, #0]
        time.minutes = bcdToDec(get_time[1]);
 800167a:	787b      	ldrb	r3, [r7, #1]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff feb1 	bl	80013e4 <bcdToDec>
 8001682:	4603      	mov	r3, r0
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <Get_Time+0xac>)
 8001688:	705a      	strb	r2, [r3, #1]
        time.hour = bcdToDec(get_time[2]);
 800168a:	78bb      	ldrb	r3, [r7, #2]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fea9 	bl	80013e4 <bcdToDec>
 8001692:	4603      	mov	r3, r0
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <Get_Time+0xac>)
 8001698:	709a      	strb	r2, [r3, #2]
        time.dayofweek = bcdToDec(get_time[3]);
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fea1 	bl	80013e4 <bcdToDec>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <Get_Time+0xac>)
 80016a8:	70da      	strb	r2, [r3, #3]
        time.dayofmonth = bcdToDec(get_time[4]);
 80016aa:	793b      	ldrb	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe99 	bl	80013e4 <bcdToDec>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <Get_Time+0xac>)
 80016b8:	711a      	strb	r2, [r3, #4]
        time.month = bcdToDec(get_time[5]);
 80016ba:	797b      	ldrb	r3, [r7, #5]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fe91 	bl	80013e4 <bcdToDec>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <Get_Time+0xac>)
 80016c8:	715a      	strb	r2, [r3, #5]
        time.year = bcdToDec(get_time[6]);
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fe89 	bl	80013e4 <bcdToDec>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <Get_Time+0xac>)
 80016d8:	719a      	strb	r2, [r3, #6]
    }
    else
    {
        Debug_Print("[DEBUG] Error reading time\r\n");
    }
}
 80016da:	e002      	b.n	80016e2 <Get_Time+0x9e>
        Debug_Print("[DEBUG] Error reading time\r\n");
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <Get_Time+0xb0>)
 80016de:	f7ff fe45 	bl	800136c <Debug_Print>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200003f4 	.word	0x200003f4
 80016f0:	20000100 	.word	0x20000100
 80016f4:	0800deb0 	.word	0x0800deb0

080016f8 <processTimeData>:

    return 1;
}

void processTimeData(uint8_t* data, uint8_t* HH, uint8_t* mm, uint8_t* DD, uint8_t* MM, uint8_t* YY, int* timer_type)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b09a      	sub	sp, #104	@ 0x68
 80016fc:	af04      	add	r7, sp, #16
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
	char debug_msg[50];
	    int hour = 0, minute = 0, month = 0, day = 0, year = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	657b      	str	r3, [r7, #84]	@ 0x54
 800170a:	2300      	movs	r3, #0
 800170c:	653b      	str	r3, [r7, #80]	@ 0x50
 800170e:	2300      	movs	r3, #0
 8001710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001712:	2300      	movs	r3, #0
 8001714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001716:	2300      	movs	r3, #0
 8001718:	647b      	str	r3, [r7, #68]	@ 0x44

	    // Check first character for command type
	    if(data[0] == 't') {
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b74      	cmp	r3, #116	@ 0x74
 8001720:	f040 80d9 	bne.w	80018d6 <processTimeData+0x1de>
	        // Get hours (skip 't' and space)
	        hour = (data[2] - '0') * 10 + (data[3] - '0');
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3302      	adds	r3, #2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3303      	adds	r3, #3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3b30      	subs	r3, #48	@ 0x30
 8001740:	4413      	add	r3, r2
 8001742:	657b      	str	r3, [r7, #84]	@ 0x54

	        // Check colon
	        if(data[4] != ':') {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3304      	adds	r3, #4
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b3a      	cmp	r3, #58	@ 0x3a
 800174c:	d007      	beq.n	800175e <processTimeData+0x66>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong format\r\n", 13, HAL_MAX_DELAY);
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	220d      	movs	r2, #13
 8001754:	4999      	ldr	r1, [pc, #612]	@ (80019bc <processTimeData+0x2c4>)
 8001756:	489a      	ldr	r0, [pc, #616]	@ (80019c0 <processTimeData+0x2c8>)
 8001758:	f007 f94a 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 800175c:	e12b      	b.n	80019b6 <processTimeData+0x2be>
	        }

	        // Get minutes
	        minute = (data[5] - '0') * 10 + (data[6] - '0');
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3305      	adds	r3, #5
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	461a      	mov	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3306      	adds	r3, #6
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3b30      	subs	r3, #48	@ 0x30
 800177a:	4413      	add	r3, r2
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50

	        // Check space
	        if(data[7] != ' ') {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3307      	adds	r3, #7
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b20      	cmp	r3, #32
 8001786:	d007      	beq.n	8001798 <processTimeData+0xa0>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong format\r\n", 13, HAL_MAX_DELAY);
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	220d      	movs	r2, #13
 800178e:	498b      	ldr	r1, [pc, #556]	@ (80019bc <processTimeData+0x2c4>)
 8001790:	488b      	ldr	r0, [pc, #556]	@ (80019c0 <processTimeData+0x2c8>)
 8001792:	f007 f92d 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 8001796:	e10e      	b.n	80019b6 <processTimeData+0x2be>
	        }

	        // Get month
	        month = (data[8] - '0') * 10 + (data[9] - '0');
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3308      	adds	r3, #8
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3309      	adds	r3, #9
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3b30      	subs	r3, #48	@ 0x30
 80017b4:	4413      	add	r3, r2
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	        // Check colon
	        if(data[10] != ':') {
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	330a      	adds	r3, #10
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b3a      	cmp	r3, #58	@ 0x3a
 80017c0:	d007      	beq.n	80017d2 <processTimeData+0xda>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong format\r\n", 13, HAL_MAX_DELAY);
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	220d      	movs	r2, #13
 80017c8:	497c      	ldr	r1, [pc, #496]	@ (80019bc <processTimeData+0x2c4>)
 80017ca:	487d      	ldr	r0, [pc, #500]	@ (80019c0 <processTimeData+0x2c8>)
 80017cc:	f007 f910 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 80017d0:	e0f1      	b.n	80019b6 <processTimeData+0x2be>
	        }

	        // Get day
	        day = (data[11] - '0') * 10 + (data[12] - '0');
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	330b      	adds	r3, #11
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	461a      	mov	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	330c      	adds	r3, #12
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3b30      	subs	r3, #48	@ 0x30
 80017ee:	4413      	add	r3, r2
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48

	        // Check colon
	        if(data[13] != ':') {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	330d      	adds	r3, #13
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80017fa:	d007      	beq.n	800180c <processTimeData+0x114>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong format\r\n", 13, HAL_MAX_DELAY);
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	220d      	movs	r2, #13
 8001802:	496e      	ldr	r1, [pc, #440]	@ (80019bc <processTimeData+0x2c4>)
 8001804:	486e      	ldr	r0, [pc, #440]	@ (80019c0 <processTimeData+0x2c8>)
 8001806:	f007 f8f3 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 800180a:	e0d4      	b.n	80019b6 <processTimeData+0x2be>
	        }

	        // Get year
	        year = (data[14] - '0') * 10 + (data[15] - '0');
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	330e      	adds	r3, #14
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	330f      	adds	r3, #15
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	3b30      	subs	r3, #48	@ 0x30
 8001828:	4413      	add	r3, r2
 800182a:	647b      	str	r3, [r7, #68]	@ 0x44

	        // Validate time
	        if(hour > 23 || minute > 59) {
 800182c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182e:	2b17      	cmp	r3, #23
 8001830:	dc02      	bgt.n	8001838 <processTimeData+0x140>
 8001832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001834:	2b3b      	cmp	r3, #59	@ 0x3b
 8001836:	dd07      	ble.n	8001848 <processTimeData+0x150>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid time\r\n", 13, HAL_MAX_DELAY);
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	220d      	movs	r2, #13
 800183e:	4961      	ldr	r1, [pc, #388]	@ (80019c4 <processTimeData+0x2cc>)
 8001840:	485f      	ldr	r0, [pc, #380]	@ (80019c0 <processTimeData+0x2c8>)
 8001842:	f007 f8d5 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 8001846:	e0b6      	b.n	80019b6 <processTimeData+0x2be>
	        }

	        // Validate date
	        if(month < 1 || month > 12 || day < 1 || day > 31) {
 8001848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd08      	ble.n	8001860 <processTimeData+0x168>
 800184e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001850:	2b0c      	cmp	r3, #12
 8001852:	dc05      	bgt.n	8001860 <processTimeData+0x168>
 8001854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001856:	2b00      	cmp	r3, #0
 8001858:	dd02      	ble.n	8001860 <processTimeData+0x168>
 800185a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd07      	ble.n	8001870 <processTimeData+0x178>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid date\r\n", 13, HAL_MAX_DELAY);
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	220d      	movs	r2, #13
 8001866:	4958      	ldr	r1, [pc, #352]	@ (80019c8 <processTimeData+0x2d0>)
 8001868:	4855      	ldr	r0, [pc, #340]	@ (80019c0 <processTimeData+0x2c8>)
 800186a:	f007 f8c1 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 800186e:	e0a2      	b.n	80019b6 <processTimeData+0x2be>
	        }

        // Set RTC

		sprintf(debug_msg, "Time set: %02d:%02d Date: %02d/%02d/%02d\r\n",
 8001870:	f107 0010 	add.w	r0, r7, #16
 8001874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001882:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001884:	4951      	ldr	r1, [pc, #324]	@ (80019cc <processTimeData+0x2d4>)
 8001886:	f00b fe03 	bl	800d490 <siprintf>
		                hour, minute, month, day, year);
		HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fc9e 	bl	80001d0 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	b29a      	uxth	r2, r3
 8001898:	f107 0110 	add.w	r1, r7, #16
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	4847      	ldr	r0, [pc, #284]	@ (80019c0 <processTimeData+0x2c8>)
 80018a2:	f007 f8a5 	bl	80089f0 <HAL_UART_Transmit>

        *HH = hour;
 80018a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	701a      	strb	r2, [r3, #0]
		*mm =  minute;
 80018ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	701a      	strb	r2, [r3, #0]
		*DD = day;
 80018b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
		*MM = month;
 80018be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018c4:	701a      	strb	r2, [r3, #0]
		*YY = year;
 80018c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018cc:	701a      	strb	r2, [r3, #0]
		*timer_type = 0;
 80018ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e06f      	b.n	80019b6 <processTimeData+0x2be>
    }
	    else if(data[0] == '#') {
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b23      	cmp	r3, #35	@ 0x23
 80018dc:	d164      	bne.n	80019a8 <processTimeData+0x2b0>
	        // Get hours (skip '#')
	        hour = (data[1] - '0') * 10 + (data[2] - '0');
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3302      	adds	r3, #2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3b30      	subs	r3, #48	@ 0x30
 80018fa:	4413      	add	r3, r2
 80018fc:	657b      	str	r3, [r7, #84]	@ 0x54

	        // Check colon
	        if(data[3] != ':') {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3303      	adds	r3, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b3a      	cmp	r3, #58	@ 0x3a
 8001906:	d007      	beq.n	8001918 <processTimeData+0x220>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong alarm format\r\n", 18, HAL_MAX_DELAY);
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	2212      	movs	r2, #18
 800190e:	4930      	ldr	r1, [pc, #192]	@ (80019d0 <processTimeData+0x2d8>)
 8001910:	482b      	ldr	r0, [pc, #172]	@ (80019c0 <processTimeData+0x2c8>)
 8001912:	f007 f86d 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 8001916:	e04e      	b.n	80019b6 <processTimeData+0x2be>
	        }

	        // Get minutes
	        minute = (data[4] - '0') * 10 + (data[5] - '0');
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3304      	adds	r3, #4
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3305      	adds	r3, #5
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3b30      	subs	r3, #48	@ 0x30
 8001934:	4413      	add	r3, r2
 8001936:	653b      	str	r3, [r7, #80]	@ 0x50

	        // Validate time
	        if(hour > 23 || minute > 59) {
 8001938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193a:	2b17      	cmp	r3, #23
 800193c:	dc02      	bgt.n	8001944 <processTimeData+0x24c>
 800193e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001940:	2b3b      	cmp	r3, #59	@ 0x3b
 8001942:	dd07      	ble.n	8001954 <processTimeData+0x25c>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid alarm time\r\n", 18, HAL_MAX_DELAY);
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	2212      	movs	r2, #18
 800194a:	4922      	ldr	r1, [pc, #136]	@ (80019d4 <processTimeData+0x2dc>)
 800194c:	481c      	ldr	r0, [pc, #112]	@ (80019c0 <processTimeData+0x2c8>)
 800194e:	f007 f84f 	bl	80089f0 <HAL_UART_Transmit>
	            return;
 8001952:	e030      	b.n	80019b6 <processTimeData+0x2be>
	        }
	        sprintf(debug_msg, "Alarm set for: %02d:%02d\r\n", hour, minute);
 8001954:	f107 0010 	add.w	r0, r7, #16
 8001958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800195a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800195c:	491e      	ldr	r1, [pc, #120]	@ (80019d8 <processTimeData+0x2e0>)
 800195e:	f00b fd97 	bl	800d490 <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fc32 	bl	80001d0 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	f107 0110 	add.w	r1, r7, #16
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <processTimeData+0x2c8>)
 800197a:	f007 f839 	bl	80089f0 <HAL_UART_Transmit>

	        *HH = hour;
 800197e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001980:	b2da      	uxtb	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	701a      	strb	r2, [r3, #0]
			*mm =  minute;
 8001986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001988:	b2da      	uxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	701a      	strb	r2, [r3, #0]
			*DD = 0;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
			*MM = 0;
 8001994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
			*YY = 0;
 800199a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
			*timer_type = 1;
 80019a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e006      	b.n	80019b6 <processTimeData+0x2be>

	    }
	    else {
	        HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid command\r\n", 16, HAL_MAX_DELAY);
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	2210      	movs	r2, #16
 80019ae:	490b      	ldr	r1, [pc, #44]	@ (80019dc <processTimeData+0x2e4>)
 80019b0:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <processTimeData+0x2c8>)
 80019b2:	f007 f81d 	bl	80089f0 <HAL_UART_Transmit>
	    }
}
 80019b6:	3758      	adds	r7, #88	@ 0x58
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0800df00 	.word	0x0800df00
 80019c0:	200005c4 	.word	0x200005c4
 80019c4:	0800df10 	.word	0x0800df10
 80019c8:	0800df20 	.word	0x0800df20
 80019cc:	0800df30 	.word	0x0800df30
 80019d0:	0800df5c 	.word	0x0800df5c
 80019d4:	0800df74 	.word	0x0800df74
 80019d8:	0800df8c 	.word	0x0800df8c
 80019dc:	0800dfa8 	.word	0x0800dfa8

080019e0 <VL53L0X_WriteReg8>:
#define DEFAULT_FINAL_RANGE_VCSEL_PERIOD 10

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

uint8_t VL53L0X_WriteReg8(uint8_t i2cDeviceAddress, uint8_t reg, uint8_t val) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	460b      	mov	r3, r1
 80019ec:	71bb      	strb	r3, [r7, #6]
 80019ee:	4613      	mov	r3, r2
 80019f0:	717b      	strb	r3, [r7, #5]
    uint8_t data[2];
    data[0] = reg;
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	733b      	strb	r3, [r7, #12]
    data[1] = val;
 80019f6:	797b      	ldrb	r3, [r7, #5]
 80019f8:	737b      	strb	r3, [r7, #13]

    if(HAL_I2C_Master_Transmit(&hi2c1, i2cDeviceAddress<<1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	b299      	uxth	r1, r3
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <VL53L0X_WriteReg8+0x48>)
 8001a10:	f003 fb80 	bl	8005114 <HAL_I2C_Master_Transmit>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <VL53L0X_WriteReg8+0x3e>
        return 1; // Error
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <VL53L0X_WriteReg8+0x40>
    }
    return 0; // Success
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200003a0 	.word	0x200003a0

08001a2c <VL53L0X_WriteReg16>:

/* I2C Write function for 16-bit register */
uint8_t VL53L0X_WriteReg16(uint8_t i2cDeviceAddress, uint8_t reg, uint16_t val) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = reg;
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	733b      	strb	r3, [r7, #12]
    data[1] = (val >> 8) & 0xFF;
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	737b      	strb	r3, [r7, #13]
    data[2] = val & 0xFF;
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	73bb      	strb	r3, [r7, #14]

    if(HAL_I2C_Master_Transmit(&hi2c1, i2cDeviceAddress<<1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	f107 020c 	add.w	r2, r7, #12
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2303      	movs	r3, #3
 8001a66:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <VL53L0X_WriteReg16+0x54>)
 8001a68:	f003 fb54 	bl	8005114 <HAL_I2C_Master_Transmit>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <VL53L0X_WriteReg16+0x4a>
        return 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <VL53L0X_WriteReg16+0x4c>
    }
    return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200003a0 	.word	0x200003a0

08001a84 <VL53L0X_WriteReg32>:

uint8_t VL53L0X_WriteReg32(uint8_t i2cDeviceAddress, uint8_t reg, uint32_t val) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	603a      	str	r2, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	460b      	mov	r3, r1
 8001a92:	71bb      	strb	r3, [r7, #6]
    uint8_t data[5];
    data[0] = reg;
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	723b      	strb	r3, [r7, #8]
    data[1] = (val >> 24) & 0xFF;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	0e1b      	lsrs	r3, r3, #24
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	727b      	strb	r3, [r7, #9]
    data[2] = (val >> 16) & 0xFF;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	72bb      	strb	r3, [r7, #10]
    data[3] = (val >> 8) & 0xFF;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	72fb      	strb	r3, [r7, #11]
    data[4] = val & 0xFF;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	733b      	strb	r3, [r7, #12]

    if(HAL_I2C_Master_Transmit(&hi2c1, i2cDeviceAddress<<1, data, 5, HAL_MAX_DELAY) != HAL_OK) {
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	b299      	uxth	r1, r3
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2305      	movs	r3, #5
 8001aca:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <VL53L0X_WriteReg32+0x60>)
 8001acc:	f003 fb22 	bl	8005114 <HAL_I2C_Master_Transmit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <VL53L0X_WriteReg32+0x56>
        return 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <VL53L0X_WriteReg32+0x58>
    }
    return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200003a0 	.word	0x200003a0

08001ae8 <VL53L0X_ReadReg8>:

/* I2C Read function for 8-bit register */
uint8_t VL53L0X_ReadReg8(uint8_t i2cDeviceAddress, uint8_t reg, uint8_t *valP) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	4603      	mov	r3, r0
 8001af0:	603a      	str	r2, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Master_Transmit(&hi2c1, i2cDeviceAddress<<1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b299      	uxth	r1, r3
 8001b00:	1dba      	adds	r2, r7, #6
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	480f      	ldr	r0, [pc, #60]	@ (8001b48 <VL53L0X_ReadReg8+0x60>)
 8001b0c:	f003 fb02 	bl	8005114 <HAL_I2C_Master_Transmit>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <VL53L0X_ReadReg8+0x32>
        return 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e011      	b.n	8001b3e <VL53L0X_ReadReg8+0x56>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, i2cDeviceAddress<<1, valP, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	b299      	uxth	r1, r3
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <VL53L0X_ReadReg8+0x60>)
 8001b2e:	f003 fc09 	bl	8005344 <HAL_I2C_Master_Receive>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <VL53L0X_ReadReg8+0x54>
        return 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <VL53L0X_ReadReg8+0x56>
    }
    return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200003a0 	.word	0x200003a0

08001b4c <VL53L0X_ReadReg16>:

/* I2C Read function for 16-bit register */
uint8_t VL53L0X_ReadReg16(uint8_t i2cDeviceAddress, uint8_t reg, uint16_t *valP) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	4603      	mov	r3, r0
 8001b54:	603a      	str	r2, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];

    if(HAL_I2C_Master_Transmit(&hi2c1, i2cDeviceAddress<<1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b299      	uxth	r1, r3
 8001b64:	1dba      	adds	r2, r7, #6
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4814      	ldr	r0, [pc, #80]	@ (8001bc0 <VL53L0X_ReadReg16+0x74>)
 8001b70:	f003 fad0 	bl	8005114 <HAL_I2C_Master_Transmit>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <VL53L0X_ReadReg16+0x32>
        return 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e01c      	b.n	8001bb8 <VL53L0X_ReadReg16+0x6c>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, i2cDeviceAddress<<1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	b299      	uxth	r1, r3
 8001b86:	f107 020c 	add.w	r2, r7, #12
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2302      	movs	r3, #2
 8001b92:	480b      	ldr	r0, [pc, #44]	@ (8001bc0 <VL53L0X_ReadReg16+0x74>)
 8001b94:	f003 fbd6 	bl	8005344 <HAL_I2C_Master_Receive>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <VL53L0X_ReadReg16+0x56>
        return 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00a      	b.n	8001bb8 <VL53L0X_ReadReg16+0x6c>
    }

    *valP = ((uint16_t)data[0] << 8) | data[1];
 8001ba2:	7b3b      	ldrb	r3, [r7, #12]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	801a      	strh	r2, [r3, #0]
    return 0;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200003a0 	.word	0x200003a0

08001bc4 <VL53L0X_InitDevice>:

/* Initialize VL53L0X device */
uint8_t VL53L0X_InitDevice(uint8_t i2cDeviceAddress) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    uint8_t res;

    // Device initialization and configuration
    res = VL53L0X_WriteReg8(i2cDeviceAddress, SYSRANGE_START, 0x01);    // Start single range measurement
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff03 	bl	80019e0 <VL53L0X_WriteReg8>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f002 fe56 	bl	8004890 <HAL_Delay>

    // Configure interrupt
    res = VL53L0X_WriteReg8(i2cDeviceAddress, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);    // Enable interrupt on new data
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2204      	movs	r2, #4
 8001be8:	210a      	movs	r1, #10
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fef8 	bl	80019e0 <VL53L0X_WriteReg8>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
    res = VL53L0X_WriteReg8(i2cDeviceAddress, GPIO_HV_MUX_ACTIVE_HIGH, 0x10);         // Set GPIO high when sample complete
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	2184      	movs	r1, #132	@ 0x84
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fef0 	bl	80019e0 <VL53L0X_WriteReg8>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]

    // Set default timing budget (can be adjusted based on requirements)
    res = VL53L0X_WriteReg16(i2cDeviceAddress, SYSTEM_INTERMEASUREMENT_PERIOD, 0x0100); // 256ms default
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff0d 	bl	8001a2c <VL53L0X_WriteReg16>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]

    return res;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <VL53L0X_StartContinuous>:

/* Start continuous ranging */
uint8_t VL53L0X_StartContinuous(uint8_t i2cDeviceAddress, uint32_t period_ms) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
    uint8_t res;

    // Configure continuous mode
    res = VL53L0X_WriteReg8(i2cDeviceAddress, SYSRANGE_START, 0x02); // Start continuous mode
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fed4 	bl	80019e0 <VL53L0X_WriteReg8>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]

    // Set inter-measurement period
    uint16_t osc_calibrate_val;
    res = VL53L0X_ReadReg16(i2cDeviceAddress, 0xF8, &osc_calibrate_val);
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	21f8      	movs	r1, #248	@ 0xf8
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff81 	bl	8001b4c <VL53L0X_ReadReg16>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]

    if (osc_calibrate_val != 0) {
 8001c4e:	89bb      	ldrh	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <VL53L0X_StartContinuous+0x48>
        period_ms = (period_ms * osc_calibrate_val) / 1000;
 8001c54:	89bb      	ldrh	r3, [r7, #12]
 8001c56:	461a      	mov	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <VL53L0X_StartContinuous+0x64>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	603b      	str	r3, [r7, #0]
    }

    res = VL53L0X_WriteReg32(i2cDeviceAddress, SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff08 	bl	8001a84 <VL53L0X_WriteReg32>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]

    return res;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <VL53L0X_ReadRangeContinuous>:

/* Read range value in continuous mode */
uint8_t VL53L0X_ReadRangeContinuous(uint8_t i2cDeviceAddress, uint16_t *valP) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
    uint8_t res;
    uint8_t ready;
    uint16_t timeout = 500; // 500ms timeout
 8001c94:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c98:	81fb      	strh	r3, [r7, #14]

    do {
        res = VL53L0X_ReadReg8(i2cDeviceAddress, RESULT_INTERRUPT_STATUS, &ready);
 8001c9a:	f107 020c 	add.w	r2, r7, #12
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2113      	movs	r1, #19
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff20 	bl	8001ae8 <VL53L0X_ReadReg8>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	737b      	strb	r3, [r7, #13]
        if (res != 0) {
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <VL53L0X_ReadRangeContinuous+0x2e>
            return res;
 8001cb2:	7b7b      	ldrb	r3, [r7, #13]
 8001cb4:	e029      	b.n	8001d0a <VL53L0X_ReadRangeContinuous+0x82>
        }
        if (ready & 0x07) {
 8001cb6:	7b3b      	ldrb	r3, [r7, #12]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <VL53L0X_ReadRangeContinuous+0x4c>
            break;
        }
        HAL_Delay(1);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f002 fde5 	bl	8004890 <HAL_Delay>
        timeout--;
 8001cc6:	89fb      	ldrh	r3, [r7, #14]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	81fb      	strh	r3, [r7, #14]
    } while (timeout > 0);
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e3      	bne.n	8001c9a <VL53L0X_ReadRangeContinuous+0x12>
 8001cd2:	e000      	b.n	8001cd6 <VL53L0X_ReadRangeContinuous+0x4e>
            break;
 8001cd4:	bf00      	nop

    if (timeout == 0) {
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <VL53L0X_ReadRangeContinuous+0x58>
        return 1; // Timeout error
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e014      	b.n	8001d0a <VL53L0X_ReadRangeContinuous+0x82>
    }

    // Read range value
    uint16_t range;
    res = VL53L0X_ReadReg16(i2cDeviceAddress, RESULT_RANGE_STATUS + 10, &range); // Offset of 10 to get the range value
 8001ce0:	f107 020a 	add.w	r2, r7, #10
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	211e      	movs	r1, #30
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff2f 	bl	8001b4c <VL53L0X_ReadReg16>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	737b      	strb	r3, [r7, #13]
    *valP = range;
 8001cf2:	897a      	ldrh	r2, [r7, #10]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	801a      	strh	r2, [r3, #0]

    // Clear interrupt
    res = VL53L0X_WriteReg8(i2cDeviceAddress, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	210b      	movs	r1, #11
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe6e 	bl	80019e0 <VL53L0X_WriteReg8>
 8001d04:	4603      	mov	r3, r0
 8001d06:	737b      	strb	r3, [r7, #13]

    return res;
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ConfigureSensorTiming>:

uint8_t ConfigureSensorTiming(uint8_t i2cDeviceAddress) {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    // Switch to page 0
    status = VL53L0X_WriteReg8(i2cDeviceAddress, 0xFF, 0x00);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	21ff      	movs	r1, #255	@ 0xff
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe5c 	bl	80019e0 <VL53L0X_WriteReg8>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]

    // Set measurement timing budget
    // Setting to long range mode for more accurate readings
    status = VL53L0X_WriteReg8(i2cDeviceAddress, 0x01, 0xFF);  // Set long range mode
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	22ff      	movs	r2, #255	@ 0xff
 8001d30:	2101      	movs	r1, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe54 	bl	80019e0 <VL53L0X_WriteReg8>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]

    // Set VCSEL period for pre-range
    status = VL53L0X_WriteReg8(i2cDeviceAddress, 0x50, 0x18);  // 18 = longer period
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2218      	movs	r2, #24
 8001d40:	2150      	movs	r1, #80	@ 0x50
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fe4c 	bl	80019e0 <VL53L0X_WriteReg8>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73fb      	strb	r3, [r7, #15]

    // Set VCSEL period for final range
    status = VL53L0X_WriteReg8(i2cDeviceAddress, 0x52, 0x14);  // 14 = longer period
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2214      	movs	r2, #20
 8001d50:	2152      	movs	r1, #82	@ 0x52
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe44 	bl	80019e0 <VL53L0X_WriteReg8>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]

    // Increase timing budget for more accuracy
    status = VL53L0X_WriteReg16(i2cDeviceAddress, 0x46, 0x1000);  // Higher timing budget
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d62:	2146      	movs	r1, #70	@ 0x46
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fe61 	bl	8001a2c <VL53L0X_WriteReg16>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	73fb      	strb	r3, [r7, #15]

    // Set signal rate limit (lower = more sensitive but more noise)
    status = VL53L0X_WriteReg16(i2cDeviceAddress, 0x44, 0x0028);  // 0.44 MCPS
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2228      	movs	r2, #40	@ 0x28
 8001d72:	2144      	movs	r1, #68	@ 0x44
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fe59 	bl	8001a2c <VL53L0X_WriteReg16>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]

    // Set measurement timing budget (inter-measurement period)
    status = VL53L0X_WriteReg16(i2cDeviceAddress, 0x40, 0x0100);  // ~100ms
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d84:	2140      	movs	r1, #64	@ 0x40
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe50 	bl	8001a2c <VL53L0X_WriteReg16>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]

    return status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <CheckAndInitSensor>:

uint8_t CheckAndInitSensor(uint8_t currentAddress, uint8_t newAddress, GPIO_TypeDef* port, uint16_t xshut_pin, uint8_t sensorNum)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	603a      	str	r2, [r7, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	460b      	mov	r3, r1
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80bb      	strh	r3, [r7, #4]
    uint8_t status;
    uint8_t val;

    // Enable only this sensor's XSHUT pin
    HAL_GPIO_WritePin(port, xshut_pin, GPIO_PIN_SET);
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4619      	mov	r1, r3
 8001db8:	6838      	ldr	r0, [r7, #0]
 8001dba:	f003 f8df 	bl	8004f7c <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Wait for sensor to wake up
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f002 fd66 	bl	8004890 <HAL_Delay>

    sprintf(uart_buf, "Checking Sensor %d...\r\n", sensorNum);
 8001dc4:	7e3b      	ldrb	r3, [r7, #24]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	497f      	ldr	r1, [pc, #508]	@ (8001fc8 <CheckAndInitSensor+0x22c>)
 8001dca:	4880      	ldr	r0, [pc, #512]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001dcc:	f00b fb60 	bl	800d490 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001dd0:	487e      	ldr	r0, [pc, #504]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001dd2:	f7fe f9fd 	bl	80001d0 <strlen>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	497b      	ldr	r1, [pc, #492]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001de0:	487b      	ldr	r0, [pc, #492]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001de2:	f006 fe05 	bl	80089f0 <HAL_UART_Transmit>

    // Try reading from the new address first
    status = VL53L0X_ReadReg8(newAddress, 0x00, &val);
 8001de6:	f107 020e 	add.w	r2, r7, #14
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fe7a 	bl	8001ae8 <VL53L0X_ReadReg8>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]

    if(status == 0) {
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d149      	bne.n	8001e92 <CheckAndInitSensor+0xf6>
        // Sensor is already configured to new address
        sprintf(uart_buf, "Sensor %d already configured at address 0x%02X\r\n", sensorNum, newAddress);
 8001dfe:	7e3a      	ldrb	r2, [r7, #24]
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	4974      	ldr	r1, [pc, #464]	@ (8001fd4 <CheckAndInitSensor+0x238>)
 8001e04:	4871      	ldr	r0, [pc, #452]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e06:	f00b fb43 	bl	800d490 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001e0a:	4870      	ldr	r0, [pc, #448]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e0c:	f7fe f9e0 	bl	80001d0 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	496c      	ldr	r1, [pc, #432]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e1a:	486d      	ldr	r0, [pc, #436]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001e1c:	f006 fde8 	bl	80089f0 <HAL_UART_Transmit>

        // Initialize sensor with existing address
        status = VL53L0X_InitDevice(newAddress);
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fece 	bl	8001bc4 <VL53L0X_InitDevice>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
        if(status != 0) {
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <CheckAndInitSensor+0xbc>
            sprintf(uart_buf, "Sensor %d init failed at address 0x%02X\r\n", sensorNum, newAddress);
 8001e32:	7e3a      	ldrb	r2, [r7, #24]
 8001e34:	79bb      	ldrb	r3, [r7, #6]
 8001e36:	4968      	ldr	r1, [pc, #416]	@ (8001fd8 <CheckAndInitSensor+0x23c>)
 8001e38:	4864      	ldr	r0, [pc, #400]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e3a:	f00b fb29 	bl	800d490 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001e3e:	4863      	ldr	r0, [pc, #396]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e40:	f7fe f9c6 	bl	80001d0 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	495f      	ldr	r1, [pc, #380]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e4e:	4860      	ldr	r0, [pc, #384]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001e50:	f006 fdce 	bl	80089f0 <HAL_UART_Transmit>
            return 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b2      	b.n	8001fbe <CheckAndInitSensor+0x222>
        }

        status = ConfigureSensorTiming(newAddress);
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff59 	bl	8001d12 <ConfigureSensorTiming>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]
        if(status != 0) {
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 808b 	beq.w	8001f82 <CheckAndInitSensor+0x1e6>
            sprintf(uart_buf, "Failed to configure timing for Sensor %d\r\n", sensorNum);
 8001e6c:	7e3b      	ldrb	r3, [r7, #24]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	495a      	ldr	r1, [pc, #360]	@ (8001fdc <CheckAndInitSensor+0x240>)
 8001e72:	4856      	ldr	r0, [pc, #344]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e74:	f00b fb0c 	bl	800d490 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001e78:	4854      	ldr	r0, [pc, #336]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e7a:	f7fe f9a9 	bl	80001d0 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	4951      	ldr	r1, [pc, #324]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e88:	4851      	ldr	r0, [pc, #324]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001e8a:	f006 fdb1 	bl	80089f0 <HAL_UART_Transmit>
            return 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e095      	b.n	8001fbe <CheckAndInitSensor+0x222>
        }

    } else {
        // Sensor needs to be configured with new address
        sprintf(uart_buf, "Configuring Sensor %d with new address...\r\n", sensorNum);
 8001e92:	7e3b      	ldrb	r3, [r7, #24]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4952      	ldr	r1, [pc, #328]	@ (8001fe0 <CheckAndInitSensor+0x244>)
 8001e98:	484c      	ldr	r0, [pc, #304]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001e9a:	f00b faf9 	bl	800d490 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001e9e:	484b      	ldr	r0, [pc, #300]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001ea0:	f7fe f996 	bl	80001d0 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	4947      	ldr	r1, [pc, #284]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001eae:	4848      	ldr	r0, [pc, #288]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001eb0:	f006 fd9e 	bl	80089f0 <HAL_UART_Transmit>

        // Initialize with default address
        status = VL53L0X_InitDevice(currentAddress);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fe84 	bl	8001bc4 <VL53L0X_InitDevice>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]
        if(status != 0) {
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <CheckAndInitSensor+0x150>
            sprintf(uart_buf, "Sensor %d init failed at default address\r\n", sensorNum);
 8001ec6:	7e3b      	ldrb	r3, [r7, #24]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4946      	ldr	r1, [pc, #280]	@ (8001fe4 <CheckAndInitSensor+0x248>)
 8001ecc:	483f      	ldr	r0, [pc, #252]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001ece:	f00b fadf 	bl	800d490 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001ed2:	483e      	ldr	r0, [pc, #248]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001ed4:	f7fe f97c 	bl	80001d0 <strlen>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	493a      	ldr	r1, [pc, #232]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001ee2:	483b      	ldr	r0, [pc, #236]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001ee4:	f006 fd84 	bl	80089f0 <HAL_UART_Transmit>
            return 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e068      	b.n	8001fbe <CheckAndInitSensor+0x222>
        }

        status = ConfigureSensorTiming(currentAddress);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff0f 	bl	8001d12 <ConfigureSensorTiming>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
        if(status != 0) {
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d012      	beq.n	8001f24 <CheckAndInitSensor+0x188>
            sprintf(uart_buf, "Failed to configure timing for Sensor %d\r\n", sensorNum);
 8001efe:	7e3b      	ldrb	r3, [r7, #24]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4936      	ldr	r1, [pc, #216]	@ (8001fdc <CheckAndInitSensor+0x240>)
 8001f04:	4831      	ldr	r0, [pc, #196]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f06:	f00b fac3 	bl	800d490 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001f0a:	4830      	ldr	r0, [pc, #192]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f0c:	f7fe f960 	bl	80001d0 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	492c      	ldr	r1, [pc, #176]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f1a:	482d      	ldr	r0, [pc, #180]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001f1c:	f006 fd68 	bl	80089f0 <HAL_UART_Transmit>
            return 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04c      	b.n	8001fbe <CheckAndInitSensor+0x222>
        }

        // Change to new address
        status = VL53L0X_WriteReg8(currentAddress, I2C_SLAVE_DEVICE_ADDRESS, newAddress);
 8001f24:	79ba      	ldrb	r2, [r7, #6]
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	218a      	movs	r1, #138	@ 0x8a
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fd58 	bl	80019e0 <VL53L0X_WriteReg8>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]
        if(status != 0) {
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <CheckAndInitSensor+0x1c4>
            sprintf(uart_buf, "Failed to change Sensor %d address to 0x%02X\r\n", sensorNum, newAddress);
 8001f3a:	7e3a      	ldrb	r2, [r7, #24]
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	492a      	ldr	r1, [pc, #168]	@ (8001fe8 <CheckAndInitSensor+0x24c>)
 8001f40:	4822      	ldr	r0, [pc, #136]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f42:	f00b faa5 	bl	800d490 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001f46:	4821      	ldr	r0, [pc, #132]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f48:	f7fe f942 	bl	80001d0 <strlen>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	491d      	ldr	r1, [pc, #116]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f56:	481e      	ldr	r0, [pc, #120]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001f58:	f006 fd4a 	bl	80089f0 <HAL_UART_Transmit>
            return 1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e02e      	b.n	8001fbe <CheckAndInitSensor+0x222>
        }

        sprintf(uart_buf, "Sensor %d successfully configured to address 0x%02X\r\n", sensorNum, newAddress);
 8001f60:	7e3a      	ldrb	r2, [r7, #24]
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	4921      	ldr	r1, [pc, #132]	@ (8001fec <CheckAndInitSensor+0x250>)
 8001f66:	4819      	ldr	r0, [pc, #100]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f68:	f00b fa92 	bl	800d490 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001f6c:	4817      	ldr	r0, [pc, #92]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f6e:	f7fe f92f 	bl	80001d0 <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	4914      	ldr	r1, [pc, #80]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f7c:	4814      	ldr	r0, [pc, #80]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001f7e:	f006 fd37 	bl	80089f0 <HAL_UART_Transmit>
    }

    // Start continuous mode
    status = VL53L0X_StartContinuous(newAddress, 33);
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	2121      	movs	r1, #33	@ 0x21
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe4a 	bl	8001c20 <VL53L0X_StartContinuous>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	73fb      	strb	r3, [r7, #15]
    if(status != 0) {
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <CheckAndInitSensor+0x220>
        sprintf(uart_buf, "Failed to start continuous mode on Sensor %d\r\n", sensorNum);
 8001f96:	7e3b      	ldrb	r3, [r7, #24]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4915      	ldr	r1, [pc, #84]	@ (8001ff0 <CheckAndInitSensor+0x254>)
 8001f9c:	480b      	ldr	r0, [pc, #44]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001f9e:	f00b fa77 	bl	800d490 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001fa2:	480a      	ldr	r0, [pc, #40]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001fa4:	f7fe f914 	bl	80001d0 <strlen>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	4906      	ldr	r1, [pc, #24]	@ (8001fcc <CheckAndInitSensor+0x230>)
 8001fb2:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <CheckAndInitSensor+0x234>)
 8001fb4:	f006 fd1c 	bl	80089f0 <HAL_UART_Transmit>
        return 1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <CheckAndInitSensor+0x222>
    }

    return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800dfbc 	.word	0x0800dfbc
 8001fcc:	20000108 	.word	0x20000108
 8001fd0:	200005c4 	.word	0x200005c4
 8001fd4:	0800dfd4 	.word	0x0800dfd4
 8001fd8:	0800e008 	.word	0x0800e008
 8001fdc:	0800e034 	.word	0x0800e034
 8001fe0:	0800e060 	.word	0x0800e060
 8001fe4:	0800e08c 	.word	0x0800e08c
 8001fe8:	0800e0b8 	.word	0x0800e0b8
 8001fec:	0800e0e8 	.word	0x0800e0e8
 8001ff0:	0800e120 	.word	0x0800e120

08001ff4 <VL53L0X_SetOffset>:

uint8_t VL53L0X_SetOffset(uint8_t i2cDeviceAddress, int8_t offset_mm)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    // Write to offset register (signed byte value)
    status = VL53L0X_WriteReg8(i2cDeviceAddress,
 8002004:	79ba      	ldrb	r2, [r7, #6]
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2128      	movs	r1, #40	@ 0x28
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fce8 	bl	80019e0 <VL53L0X_WriteReg8>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]
                              ALGO_PART_TO_PART_RANGE_OFFSET_MM,
                              (uint8_t)offset_mm);

    // Enable offset compensation
    if(status == 0)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <VL53L0X_SetOffset+0x36>
    {
        status = VL53L0X_WriteReg8(i2cDeviceAddress,
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2201      	movs	r2, #1
 800201e:	2124      	movs	r1, #36	@ 0x24
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fcdd 	bl	80019e0 <VL53L0X_WriteReg8>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
                                  SYSRANGE_PART_TO_PART_RANGE_OFFSET,
                                  0x01);
    }

    return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af04      	add	r7, sp, #16
 800203a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_UART_RxCpltCallback+0x84>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d134      	bne.n	80020b0 <HAL_UART_RxCpltCallback+0x7c>
    {
        // Store received byte in buffer
		UART1_rxBuffer[rxIndex++] = rxData[0];
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_UART_RxCpltCallback+0x88>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	b291      	uxth	r1, r2
 800204e:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_UART_RxCpltCallback+0x88>)
 8002050:	8011      	strh	r1, [r2, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_UART_RxCpltCallback+0x8c>)
 8002056:	7819      	ldrb	r1, [r3, #0]
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_UART_RxCpltCallback+0x90>)
 800205a:	5499      	strb	r1, [r3, r2]
		// If buffer is full or we received a newline character
		if(rxIndex >= RX_BUFFER_SIZE || rxData[0] == '\n' || rxData[0] == '\r')
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_UART_RxCpltCallback+0x88>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	2b63      	cmp	r3, #99	@ 0x63
 8002062:	d807      	bhi.n	8002074 <HAL_UART_RxCpltCallback+0x40>
 8002064:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_UART_RxCpltCallback+0x8c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b0a      	cmp	r3, #10
 800206a:	d003      	beq.n	8002074 <HAL_UART_RxCpltCallback+0x40>
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_UART_RxCpltCallback+0x8c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b0d      	cmp	r3, #13
 8002072:	d118      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0x72>
		{
			// Echo back the received data
			processTimeData(UART1_rxBuffer, &hour, &min, &day, &month, &year, &timer_type);
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <HAL_UART_RxCpltCallback+0x94>)
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <HAL_UART_RxCpltCallback+0x98>)
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <HAL_UART_RxCpltCallback+0x9c>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_UART_RxCpltCallback+0xa0>)
 8002082:	4a15      	ldr	r2, [pc, #84]	@ (80020d8 <HAL_UART_RxCpltCallback+0xa4>)
 8002084:	4915      	ldr	r1, [pc, #84]	@ (80020dc <HAL_UART_RxCpltCallback+0xa8>)
 8002086:	480f      	ldr	r0, [pc, #60]	@ (80020c4 <HAL_UART_RxCpltCallback+0x90>)
 8002088:	f7ff fb36 	bl	80016f8 <processTimeData>
			HAL_UART_Transmit(&huart2, UART1_rxBuffer, rxIndex, 100);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_UART_RxCpltCallback+0x88>)
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	2364      	movs	r3, #100	@ 0x64
 8002092:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <HAL_UART_RxCpltCallback+0x90>)
 8002094:	4812      	ldr	r0, [pc, #72]	@ (80020e0 <HAL_UART_RxCpltCallback+0xac>)
 8002096:	f006 fcab 	bl	80089f0 <HAL_UART_Transmit>
			rxIndex = 0;  // Reset buffer
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_UART_RxCpltCallback+0x88>)
 800209c:	2200      	movs	r2, #0
 800209e:	801a      	strh	r2, [r3, #0]
			time_recieved = 1;
 80020a0:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <HAL_UART_RxCpltCallback+0xb0>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
		}
        // Restart reception for next byte
        HAL_UART_Receive_IT(&huart2, rxData, 1);
 80020a6:	2201      	movs	r2, #1
 80020a8:	4905      	ldr	r1, [pc, #20]	@ (80020c0 <HAL_UART_RxCpltCallback+0x8c>)
 80020aa:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <HAL_UART_RxCpltCallback+0xac>)
 80020ac:	f006 fd2a 	bl	8008b04 <HAL_UART_Receive_IT>
    }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40004400 	.word	0x40004400
 80020bc:	20000396 	.word	0x20000396
 80020c0:	20000394 	.word	0x20000394
 80020c4:	20000330 	.word	0x20000330
 80020c8:	20000320 	.word	0x20000320
 80020cc:	2000032c 	.word	0x2000032c
 80020d0:	2000032a 	.word	0x2000032a
 80020d4:	2000032b 	.word	0x2000032b
 80020d8:	20000329 	.word	0x20000329
 80020dc:	20000328 	.word	0x20000328
 80020e0:	200005c4 	.word	0x200005c4
 80020e4:	20000324 	.word	0x20000324

080020e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_7) // Changed to PA9
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b80      	cmp	r3, #128	@ 0x80
 80020f6:	d10b      	bne.n	8002110 <HAL_GPIO_EXTI_Callback+0x28>
     {
         alarmVar = 0;
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <HAL_GPIO_EXTI_Callback+0x30>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
         stop_motors = 0;
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_GPIO_EXTI_Callback+0x34>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2120      	movs	r1, #32
 8002108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210c:	f002 ff36 	bl	8004f7c <HAL_GPIO_WritePin>
     }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000032d 	.word	0x2000032d
 800211c:	2000039c 	.word	0x2000039c

08002120 <isValidObstacle>:

uint8_t isValidObstacle(uint16_t distance) {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
    // Valid obstacle detection range
    if(distance < SAFETY_DISTANCE_CM) {
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b13      	cmp	r3, #19
 800212e:	d801      	bhi.n	8002134 <isValidObstacle+0x14>
        return 1;  // Obstacle detected
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <isValidObstacle+0x16>
    }
    return 0;  // No obstacle
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <set_motor_speed>:

void set_motor_speed(uint8_t motor, int16_t speed)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	460a      	mov	r2, r1
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	4613      	mov	r3, r2
 8002152:	80bb      	strh	r3, [r7, #4]
    uint16_t pwm_value;

    // Limit speed to -199 to +199 for 5kHz PWM
    if(speed > 199) speed = 199;
 8002154:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002158:	2bc7      	cmp	r3, #199	@ 0xc7
 800215a:	dd01      	ble.n	8002160 <set_motor_speed+0x1c>
 800215c:	23c7      	movs	r3, #199	@ 0xc7
 800215e:	80bb      	strh	r3, [r7, #4]
    if(speed < -199) speed = -199;
 8002160:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002164:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 8002168:	da02      	bge.n	8002170 <set_motor_speed+0x2c>
 800216a:	f64f 7339 	movw	r3, #65337	@ 0xff39
 800216e:	80bb      	strh	r3, [r7, #4]

    // Get absolute PWM value
    pwm_value = abs(speed);
 8002170:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	bfb8      	it	lt
 8002178:	425b      	neglt	r3, r3
 800217a:	81fb      	strh	r3, [r7, #14]

    if(motor == 1)  // Left motor (PA5, PA6)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d115      	bne.n	80021ae <set_motor_speed+0x6a>
    {
        if(speed >= 0)
 8002182:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db08      	blt.n	800219c <set_motor_speed+0x58>
        {
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);  // PA5
 800218a:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <set_motor_speed+0xa8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	89fa      	ldrh	r2, [r7, #14]
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);         // PA6
 8002192:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <set_motor_speed+0xac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34
        {
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
        }
    }
}
 800219a:	e020      	b.n	80021de <set_motor_speed+0x9a>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <set_motor_speed+0xa8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_value);
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <set_motor_speed+0xac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	89fa      	ldrh	r2, [r7, #14]
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021ac:	e017      	b.n	80021de <set_motor_speed+0x9a>
    else if(motor == 2)  // Right motor (PA7, PB6)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d114      	bne.n	80021de <set_motor_speed+0x9a>
        if(speed >= 0)
 80021b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db08      	blt.n	80021ce <set_motor_speed+0x8a>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_value);  // PA7
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <set_motor_speed+0xac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	89fa      	ldrh	r2, [r7, #14]
 80021c2:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);         // PB6
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <set_motor_speed+0xb0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021cc:	e007      	b.n	80021de <set_motor_speed+0x9a>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <set_motor_speed+0xac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <set_motor_speed+0xb0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	89fa      	ldrh	r2, [r7, #14]
 80021dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000494 	.word	0x20000494
 80021f0:	200004e0 	.word	0x200004e0
 80021f4:	2000052c 	.word	0x2000052c

080021f8 <motors_forward>:

void motors_forward(uint8_t speed)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
    // Convert speed percentage to target RPM
    float target_rpm = (float)speed * TARGET_SPEED_RPM / 100.0f;
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002240 <motors_forward+0x48>
 8002210:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002214:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002244 <motors_forward+0x4c>
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Set same target RPM but compensation will be applied in PID calculation
    pid_motor1.target_rpm = target_rpm;
 8002220:	4a09      	ldr	r2, [pc, #36]	@ (8002248 <motors_forward+0x50>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6013      	str	r3, [r2, #0]
    pid_motor2.target_rpm = target_rpm;
 8002226:	4a09      	ldr	r2, [pc, #36]	@ (800224c <motors_forward+0x54>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6013      	str	r3, [r2, #0]
    current_direction = 1;
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <motors_forward+0x58>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	43160000 	.word	0x43160000
 8002244:	42c80000 	.word	0x42c80000
 8002248:	20000244 	.word	0x20000244
 800224c:	20000274 	.word	0x20000274
 8002250:	200002a4 	.word	0x200002a4

08002254 <motors_backward>:

void motors_backward(uint8_t speed)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
    float target_rpm = (float)speed * TARGET_SPEED_RPM / 100.0f;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002268:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80022ac <motors_backward+0x58>
 800226c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002270:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80022b0 <motors_backward+0x5c>
 8002274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002278:	edc7 7a03 	vstr	s15, [r7, #12]

    // For backward motion, use negative RPM targets
    pid_motor1.target_rpm = -target_rpm;
 800227c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002280:	eef1 7a67 	vneg.f32	s15, s15
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <motors_backward+0x60>)
 8002286:	edc3 7a00 	vstr	s15, [r3]
    pid_motor2.target_rpm = -target_rpm;
 800228a:	edd7 7a03 	vldr	s15, [r7, #12]
 800228e:	eef1 7a67 	vneg.f32	s15, s15
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <motors_backward+0x64>)
 8002294:	edc3 7a00 	vstr	s15, [r3]
    current_direction = 2;
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <motors_backward+0x68>)
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	43160000 	.word	0x43160000
 80022b0:	42c80000 	.word	0x42c80000
 80022b4:	20000244 	.word	0x20000244
 80022b8:	20000274 	.word	0x20000274
 80022bc:	200002a4 	.word	0x200002a4

080022c0 <motors_left>:

void motors_left(uint8_t speed)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
    float target_rpm = (float)speed * TARGET_SPEED_RPM / 100.0f;
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002310 <motors_left+0x50>
 80022d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022dc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002314 <motors_left+0x54>
 80022e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e4:	edc7 7a03 	vstr	s15, [r7, #12]

    // For turning, motors run in opposite directions
    pid_motor1.target_rpm = target_rpm;
 80022e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002318 <motors_left+0x58>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6013      	str	r3, [r2, #0]
    pid_motor2.target_rpm = -target_rpm;
 80022ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f2:	eef1 7a67 	vneg.f32	s15, s15
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <motors_left+0x5c>)
 80022f8:	edc3 7a00 	vstr	s15, [r3]
    current_direction = 3;
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <motors_left+0x60>)
 80022fe:	2203      	movs	r2, #3
 8002300:	701a      	strb	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	43160000 	.word	0x43160000
 8002314:	42c80000 	.word	0x42c80000
 8002318:	20000244 	.word	0x20000244
 800231c:	20000274 	.word	0x20000274
 8002320:	200002a4 	.word	0x200002a4

08002324 <motors_right>:

void motors_right(uint8_t speed)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
    float target_rpm = (float)speed * TARGET_SPEED_RPM / 100.0f;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002338:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002374 <motors_right+0x50>
 800233c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002340:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002378 <motors_right+0x54>
 8002344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002348:	edc7 7a03 	vstr	s15, [r7, #12]

    pid_motor1.target_rpm = -target_rpm;
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	eef1 7a67 	vneg.f32	s15, s15
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <motors_right+0x58>)
 8002356:	edc3 7a00 	vstr	s15, [r3]
    pid_motor2.target_rpm = target_rpm;
 800235a:	4a09      	ldr	r2, [pc, #36]	@ (8002380 <motors_right+0x5c>)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6013      	str	r3, [r2, #0]
    current_direction = 4;
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <motors_right+0x60>)
 8002362:	2204      	movs	r2, #4
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	43160000 	.word	0x43160000
 8002378:	42c80000 	.word	0x42c80000
 800237c:	20000244 	.word	0x20000244
 8002380:	20000274 	.word	0x20000274
 8002384:	200002a4 	.word	0x200002a4

08002388 <motors_stop>:

void motors_stop(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
    pid_motor1.target_rpm = 0;
 800238c:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <motors_stop+0x40>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    pid_motor2.target_rpm = 0;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <motors_stop+0x44>)
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    current_direction = 0;
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <motors_stop+0x48>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

    // Immediately stop motors
    set_motor_speed(1, 0);
 80023a2:	2100      	movs	r1, #0
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff fecd 	bl	8002144 <set_motor_speed>
    set_motor_speed(2, 0);
 80023aa:	2100      	movs	r1, #0
 80023ac:	2002      	movs	r0, #2
 80023ae:	f7ff fec9 	bl	8002144 <set_motor_speed>

    // Reset PID controllers
    pid_motor1.integral = 0;
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <motors_stop+0x40>)
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
    pid_motor2.integral = 0;
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <motors_stop+0x44>)
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000244 	.word	0x20000244
 80023cc:	20000274 	.word	0x20000274
 80023d0:	200002a4 	.word	0x200002a4

080023d4 <Calculate_RPM>:

/* Calculate RPM from sensor counts */
float Calculate_RPM(uint32_t counts, uint32_t last_counts, uint32_t time_diff_ms) {
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    uint32_t count_diff = counts - last_counts;
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	617b      	str	r3, [r7, #20]
    // Convert to RPM: (counts/ticks_per_rev) * (60000/time_diff_ms)
    return ((float)count_diff * 60000.0f) / (COUNTS_PER_REV * time_diff_ms);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002424 <Calculate_RPM+0x50>
 80023f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800240c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002410:	eef0 7a66 	vmov.f32	s15, s13
}
 8002414:	eeb0 0a67 	vmov.f32	s0, s15
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	476a6000 	.word	0x476a6000

08002428 <PID_Calculate>:

float PID_Calculate(PID_TypeDef *pid, uint32_t current_counts, uint8_t motor_number) {
 8002428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242a:	b091      	sub	sp, #68	@ 0x44
 800242c:	af06      	add	r7, sp, #24
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	71fb      	strb	r3, [r7, #7]
    uint32_t current_time = HAL_GetTick();
 8002436:	f002 fa1f 	bl	8004878 <HAL_GetTick>
 800243a:	6238      	str	r0, [r7, #32]
    uint32_t time_diff = current_time - pid->last_time;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	6a3a      	ldr	r2, [r7, #32]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	61fb      	str	r3, [r7, #28]
    float new_output = pid->filtered_output;  // Initialize with current value
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (time_diff >= PID_SAMPLE_TIME_MS) {
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b31      	cmp	r3, #49	@ 0x31
 8002450:	f240 8161 	bls.w	8002716 <PID_Calculate+0x2ee>
        // Calculate current speed from sensor counts
        pid->current_rpm = Calculate_RPM(current_counts, pid->last_counts, time_diff);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	4619      	mov	r1, r3
 800245c:	68b8      	ldr	r0, [r7, #8]
 800245e:	f7ff ffb9 	bl	80023d4 <Calculate_RPM>
 8002462:	eef0 7a40 	vmov.f32	s15, s0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	edc3 7a01 	vstr	s15, [r3, #4]

        // Apply motor compensation
        float compensation = (motor_number == 1) ? MOTOR1_COMPENSATION : MOTOR2_COMPENSATION;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <PID_Calculate+0x50>
 8002472:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002476:	e000      	b.n	800247a <PID_Calculate+0x52>
 8002478:	4bab      	ldr	r3, [pc, #684]	@ (8002728 <PID_Calculate+0x300>)
 800247a:	61bb      	str	r3, [r7, #24]

        // Calculate error with compensation
        pid->error = (pid->target_rpm - pid->current_rpm) * compensation;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	edd3 7a01 	vldr	s15, [r3, #4]
 8002488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800248c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	edc3 7a02 	vstr	s15, [r3, #8]

        // More aggressive integral for low speeds
        float ki_adaptive = (pid->current_rpm < pid->target_rpm/2) ? KI * 1.5f : KI;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	ed93 7a01 	vldr	s14, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	edd3 6a00 	vldr	s13, [r3]
 80024a6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80024aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d501      	bpl.n	80024bc <PID_Calculate+0x94>
 80024b8:	4b9c      	ldr	r3, [pc, #624]	@ (800272c <PID_Calculate+0x304>)
 80024ba:	e000      	b.n	80024be <PID_Calculate+0x96>
 80024bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002730 <PID_Calculate+0x308>)
 80024be:	617b      	str	r3, [r7, #20]

        // Calculate integral with anti-windup
        if (fabsf(pid->output) < 100.0f) {
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80024c6:	eef0 7ae7 	vabs.f32	s15, s15
 80024ca:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002734 <PID_Calculate+0x30c>
 80024ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	d52b      	bpl.n	8002530 <PID_Calculate+0x108>
            pid->integral += pid->error * ((float)time_diff / 1000.0f);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	ed93 7a04 	vldr	s14, [r3, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80024ee:	eddf 5a92 	vldr	s11, [pc, #584]	@ 8002738 <PID_Calculate+0x310>
 80024f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	edc3 7a04 	vstr	s15, [r3, #16]
            pid->integral = fminf(fmaxf(pid->integral, -MAX_INTEGRAL), MAX_INTEGRAL);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	edd3 7a04 	vldr	s15, [r3, #16]
 800250a:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 800273c <PID_Calculate+0x314>
 800250e:	eeb0 0a67 	vmov.f32	s0, s15
 8002512:	f00a fbef 	bl	800ccf4 <fmaxf>
 8002516:	eef0 7a40 	vmov.f32	s15, s0
 800251a:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8002740 <PID_Calculate+0x318>
 800251e:	eeb0 0a67 	vmov.f32	s0, s15
 8002522:	f00a fc04 	bl	800cd2e <fminf>
 8002526:	eef0 7a40 	vmov.f32	s15, s0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	edc3 7a04 	vstr	s15, [r3, #16]
        }

        // Derivative with filtering
        pid->derivative = (pid->error - pid->last_error) / ((float)time_diff / 1000.0f);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	ed93 7a02 	vldr	s14, [r3, #8]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	edd3 7a03 	vldr	s15, [r3, #12]
 800253c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8002738 <PID_Calculate+0x310>
 800254e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	edc3 7a05 	vstr	s15, [r3, #20]
        pid->derivative = (ALPHA * pid->derivative) + ((1.0f - ALPHA) * pid->derivative);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002562:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002744 <PID_Calculate+0x31c>
 8002566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002570:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8002748 <PID_Calculate+0x320>
 8002574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	edc3 7a05 	vstr	s15, [r3, #20]

        // Calculate PID output
        new_output = (KP * pid->error) +
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	edd3 7a02 	vldr	s15, [r3, #8]
 8002588:	ee37 7aa7 	vadd.f32	s14, s15, s15
                    (ki_adaptive * pid->integral) +
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002592:	edd7 7a05 	vldr	s15, [r7, #20]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
        new_output = (KP * pid->error) +
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
                    (KD * pid->derivative);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80025a4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800274c <PID_Calculate+0x324>
 80025a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
        new_output = (KP * pid->error) +
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Smoother output changes
        float output_delta = new_output - pid->last_output;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80025ba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80025be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c2:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fabsf(output_delta) > OUTPUT_RAMP_RATE) {
 80025c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ca:	eef0 7ae7 	vabs.f32	s15, s15
 80025ce:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	dd12      	ble.n	8002602 <PID_Calculate+0x1da>
            new_output = pid->last_output + (output_delta > 0 ? OUTPUT_RAMP_RATE : -OUTPUT_RAMP_RATE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	edd3 7a08 	vldr	s15, [r3, #32]
 80025e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80025e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	dd02      	ble.n	80025f6 <PID_Calculate+0x1ce>
 80025f0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80025f4:	e001      	b.n	80025fa <PID_Calculate+0x1d2>
 80025f6:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        }

        // Store values for next iteration
        pid->last_error = pid->error;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	60da      	str	r2, [r3, #12]
        pid->last_output = new_output;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260e:	621a      	str	r2, [r3, #32]
        pid->last_time = current_time;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a3a      	ldr	r2, [r7, #32]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
        pid->last_counts = current_counts;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c
        pid->filtered_output = (ALPHA * new_output) + ((1.0f - ALPHA) * pid->filtered_output);
 800261c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002620:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002744 <PID_Calculate+0x31c>
 8002624:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	edd3 7a07 	vldr	s15, [r3, #28]
 800262e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002748 <PID_Calculate+0x320>
 8002632:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	edc3 7a07 	vstr	s15, [r3, #28]

        // Debug output
        sprintf(uart_buf, "Motor%d RPM: %d.%d, Target: %d.%d, Out: %d.%d\r\n",
 8002640:	79fd      	ldrb	r5, [r7, #7]
                motor_number,
                (int)pid->current_rpm, (int)(pid->current_rpm * 10) % 10,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	edd3 7a01 	vldr	s15, [r3, #4]
        sprintf(uart_buf, "Motor%d RPM: %d.%d, Target: %d.%d, Out: %d.%d\r\n",
 8002648:	eefd 6ae7 	vcvt.s32.f32	s13, s15
                (int)pid->current_rpm, (int)(pid->current_rpm * 10) % 10,
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002652:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800265e:	ee17 1a90 	vmov	r1, s15
        sprintf(uart_buf, "Motor%d RPM: %d.%d, Target: %d.%d, Out: %d.%d\r\n",
 8002662:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <PID_Calculate+0x328>)
 8002664:	fb83 2301 	smull	r2, r3, r3, r1
 8002668:	109a      	asrs	r2, r3, #2
 800266a:	17cb      	asrs	r3, r1, #31
 800266c:	1ad2      	subs	r2, r2, r3
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	1aca      	subs	r2, r1, r3
                (int)pid->target_rpm, (int)(pid->target_rpm * 10) % 10,
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	edd3 7a00 	vldr	s15, [r3]
        sprintf(uart_buf, "Motor%d RPM: %d.%d, Target: %d.%d, Out: %d.%d\r\n",
 800267e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002682:	ee17 6a90 	vmov	r6, s15
                (int)pid->target_rpm, (int)(pid->target_rpm * 10) % 10,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002698:	ee17 0a90 	vmov	r0, s15
        sprintf(uart_buf, "Motor%d RPM: %d.%d, Target: %d.%d, Out: %d.%d\r\n",
 800269c:	4b2c      	ldr	r3, [pc, #176]	@ (8002750 <PID_Calculate+0x328>)
 800269e:	fb83 1300 	smull	r1, r3, r3, r0
 80026a2:	1099      	asrs	r1, r3, #2
 80026a4:	17c3      	asrs	r3, r0, #31
 80026a6:	1ac9      	subs	r1, r1, r3
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	1ac1      	subs	r1, r0, r3
 80026b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ba:	edc7 7a00 	vstr	s15, [r7]
                (int)new_output, (int)(new_output * 10) % 10);
 80026be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026c2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80026c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ce:	ee17 4a90 	vmov	r4, s15
        sprintf(uart_buf, "Motor%d RPM: %d.%d, Target: %d.%d, Out: %d.%d\r\n",
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <PID_Calculate+0x328>)
 80026d4:	fb83 0304 	smull	r0, r3, r3, r4
 80026d8:	1098      	asrs	r0, r3, #2
 80026da:	17e3      	asrs	r3, r4, #31
 80026dc:	1ac0      	subs	r0, r0, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4403      	add	r3, r0
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	1ae0      	subs	r0, r4, r3
 80026e8:	9004      	str	r0, [sp, #16]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9303      	str	r3, [sp, #12]
 80026ee:	9102      	str	r1, [sp, #8]
 80026f0:	9601      	str	r6, [sp, #4]
 80026f2:	9200      	str	r2, [sp, #0]
 80026f4:	ee16 3a90 	vmov	r3, s13
 80026f8:	462a      	mov	r2, r5
 80026fa:	4916      	ldr	r1, [pc, #88]	@ (8002754 <PID_Calculate+0x32c>)
 80026fc:	4816      	ldr	r0, [pc, #88]	@ (8002758 <PID_Calculate+0x330>)
 80026fe:	f00a fec7 	bl	800d490 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8002702:	4815      	ldr	r0, [pc, #84]	@ (8002758 <PID_Calculate+0x330>)
 8002704:	f7fd fd64 	bl	80001d0 <strlen>
 8002708:	4603      	mov	r3, r0
 800270a:	b29a      	uxth	r2, r3
 800270c:	2364      	movs	r3, #100	@ 0x64
 800270e:	4912      	ldr	r1, [pc, #72]	@ (8002758 <PID_Calculate+0x330>)
 8002710:	4812      	ldr	r0, [pc, #72]	@ (800275c <PID_Calculate+0x334>)
 8002712:	f006 f96d 	bl	80089f0 <HAL_UART_Transmit>
    }

    return pid->filtered_output;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	ee07 3a90 	vmov	s15, r3
}
 800271e:	eeb0 0a67 	vmov.f32	s0, s15
 8002722:	372c      	adds	r7, #44	@ 0x2c
 8002724:	46bd      	mov	sp, r7
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002728:	3f933333 	.word	0x3f933333
 800272c:	3d99999a 	.word	0x3d99999a
 8002730:	3d4ccccd 	.word	0x3d4ccccd
 8002734:	42c80000 	.word	0x42c80000
 8002738:	447a0000 	.word	0x447a0000
 800273c:	c2700000 	.word	0xc2700000
 8002740:	42700000 	.word	0x42700000
 8002744:	3f19999a 	.word	0x3f19999a
 8002748:	3ecccccc 	.word	0x3ecccccc
 800274c:	3ecccccd 	.word	0x3ecccccd
 8002750:	66666667 	.word	0x66666667
 8002754:	0800e170 	.word	0x0800e170
 8002758:	20000108 	.word	0x20000108
 800275c:	200005c4 	.word	0x200005c4

08002760 <update_motor_control>:

void update_motor_control(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
    // Read speed sensors
    check_sensors();
 8002766:	f000 f887 	bl	8002878 <check_sensors>

    if(current_direction != 0) // If motors should be moving
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <update_motor_control+0xf4>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d06c      	beq.n	800284c <update_motor_control+0xec>
    {
        // Calculate PID outputs
        float m1_output = PID_Calculate(&pid_motor1, sensor1_count, 1);
 8002772:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <update_motor_control+0xf8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	4619      	mov	r1, r3
 800277a:	4838      	ldr	r0, [pc, #224]	@ (800285c <update_motor_control+0xfc>)
 800277c:	f7ff fe54 	bl	8002428 <PID_Calculate>
 8002780:	ed87 0a02 	vstr	s0, [r7, #8]
        float m2_output = PID_Calculate(&pid_motor2, sensor2_count, 2);
 8002784:	4b36      	ldr	r3, [pc, #216]	@ (8002860 <update_motor_control+0x100>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2202      	movs	r2, #2
 800278a:	4619      	mov	r1, r3
 800278c:	4835      	ldr	r0, [pc, #212]	@ (8002864 <update_motor_control+0x104>)
 800278e:	f7ff fe4b 	bl	8002428 <PID_Calculate>
 8002792:	ed87 0a01 	vstr	s0, [r7, #4]

        // Convert PID output to PWM values
        int16_t pwm1, pwm2;

        // Handle direction
        if (current_direction == 1) { // Forward
 8002796:	4b2f      	ldr	r3, [pc, #188]	@ (8002854 <update_motor_control+0xf4>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d116      	bne.n	80027cc <update_motor_control+0x6c>
            pwm1 = (int16_t)(m1_output * 1.99f);
 800279e:	edd7 7a02 	vldr	s15, [r7, #8]
 80027a2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002868 <update_motor_control+0x108>
 80027a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ae:	ee17 3a90 	vmov	r3, s15
 80027b2:	81fb      	strh	r3, [r7, #14]
            pwm2 = (int16_t)(m2_output * 1.99f);
 80027b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002868 <update_motor_control+0x108>
 80027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c4:	ee17 3a90 	vmov	r3, s15
 80027c8:	81bb      	strh	r3, [r7, #12]
 80027ca:	e021      	b.n	8002810 <update_motor_control+0xb0>
        }
        else if (current_direction == 2) { // Backward
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <update_motor_control+0xf4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d11d      	bne.n	8002810 <update_motor_control+0xb0>
            pwm1 = -(int16_t)(m1_output * 1.99f);
 80027d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002868 <update_motor_control+0x108>
 80027dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e4:	ee17 3a90 	vmov	r3, s15
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	425b      	negs	r3, r3
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	81fb      	strh	r3, [r7, #14]
            pwm2 = -(int16_t)(m2_output * 1.99f);
 80027f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002868 <update_motor_control+0x108>
 80027fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002802:	ee17 3a90 	vmov	r3, s15
 8002806:	b21b      	sxth	r3, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	425b      	negs	r3, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	81bb      	strh	r3, [r7, #12]
        }

        // Apply to motors
        set_motor_speed(1, pwm1);
 8002810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002814:	4619      	mov	r1, r3
 8002816:	2001      	movs	r0, #1
 8002818:	f7ff fc94 	bl	8002144 <set_motor_speed>
        set_motor_speed(2, pwm2);
 800281c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002820:	4619      	mov	r1, r3
 8002822:	2002      	movs	r0, #2
 8002824:	f7ff fc8e 	bl	8002144 <set_motor_speed>

        // Debug
        sprintf(uart_buf, "PWM1: %d, PWM2: %d\r\n", pwm1, pwm2);
 8002828:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800282c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002830:	490e      	ldr	r1, [pc, #56]	@ (800286c <update_motor_control+0x10c>)
 8002832:	480f      	ldr	r0, [pc, #60]	@ (8002870 <update_motor_control+0x110>)
 8002834:	f00a fe2c 	bl	800d490 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8002838:	480d      	ldr	r0, [pc, #52]	@ (8002870 <update_motor_control+0x110>)
 800283a:	f7fd fcc9 	bl	80001d0 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	b29a      	uxth	r2, r3
 8002842:	2364      	movs	r3, #100	@ 0x64
 8002844:	490a      	ldr	r1, [pc, #40]	@ (8002870 <update_motor_control+0x110>)
 8002846:	480b      	ldr	r0, [pc, #44]	@ (8002874 <update_motor_control+0x114>)
 8002848:	f006 f8d2 	bl	80089f0 <HAL_UART_Transmit>
    }
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200002a4 	.word	0x200002a4
 8002858:	200002a8 	.word	0x200002a8
 800285c:	20000244 	.word	0x20000244
 8002860:	200002ac 	.word	0x200002ac
 8002864:	20000274 	.word	0x20000274
 8002868:	3ffeb852 	.word	0x3ffeb852
 800286c:	0800e1a0 	.word	0x0800e1a0
 8002870:	20000108 	.word	0x20000108
 8002874:	200005c4 	.word	0x200005c4

08002878 <check_sensors>:

void check_sensors(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    // Read current states
    uint8_t current_state_pc2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 800287e:	2104      	movs	r1, #4
 8002880:	4816      	ldr	r0, [pc, #88]	@ (80028dc <check_sensors+0x64>)
 8002882:	f002 fb63 	bl	8004f4c <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
    uint8_t current_state_pc3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 800288a:	2108      	movs	r1, #8
 800288c:	4813      	ldr	r0, [pc, #76]	@ (80028dc <check_sensors+0x64>)
 800288e:	f002 fb5d 	bl	8004f4c <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	71bb      	strb	r3, [r7, #6]

    // Check for rising edge on PC2 (Motor 1 sensor)
    if(current_state_pc2 == 1 && last_state_pc2 == 0) {
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d108      	bne.n	80028ae <check_sensors+0x36>
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <check_sensors+0x68>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <check_sensors+0x36>
        sensor1_count++;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <check_sensors+0x6c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <check_sensors+0x6c>)
 80028ac:	6013      	str	r3, [r2, #0]
    }

    // Check for rising edge on PC3 (Motor 2 sensor)
    if(current_state_pc3 == 1 && last_state_pc3 == 0) {
 80028ae:	79bb      	ldrb	r3, [r7, #6]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <check_sensors+0x4e>
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <check_sensors+0x70>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <check_sensors+0x4e>
        sensor2_count++;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <check_sensors+0x74>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <check_sensors+0x74>)
 80028c4:	6013      	str	r3, [r2, #0]
    }

    // Update last states
    last_state_pc2 = current_state_pc2;
 80028c6:	4a06      	ldr	r2, [pc, #24]	@ (80028e0 <check_sensors+0x68>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	7013      	strb	r3, [r2, #0]
    last_state_pc3 = current_state_pc3;
 80028cc:	4a06      	ldr	r2, [pc, #24]	@ (80028e8 <check_sensors+0x70>)
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	7013      	strb	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	48000800 	.word	0x48000800
 80028e0:	200002b0 	.word	0x200002b0
 80028e4:	200002a8 	.word	0x200002a8
 80028e8:	200002b1 	.word	0x200002b1
 80028ec:	200002ac 	.word	0x200002ac

080028f0 <PID_Init>:

/* PID initialization */
void PID_Init(PID_TypeDef *pid, float target_rpm) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	ed87 0a00 	vstr	s0, [r7]
    pid->target_rpm = target_rpm;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	601a      	str	r2, [r3, #0]
    pid->current_rpm = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
    pid->error = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
    pid->last_error = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
    pid->integral = 0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
    pid->derivative = 0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
    pid->output = 0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
    pid->filtered_output = 0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
    pid->last_output = 0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
    pid->last_time = HAL_GetTick();
 8002942:	f001 ff99 	bl	8004878 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->counts = 0;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->last_counts = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <turn_with_steps>:

// In your navigation function:
void turn_with_steps(uint8_t direction, uint32_t currentTime) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
    static uint32_t cycleStartTime = 0;
    static uint8_t isNewCycle = 1;

    // Start new turn cycle
    if(isNewCycle) {
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <turn_with_steps+0x94>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <turn_with_steps+0x20>
        cycleStartTime = currentTime;
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <turn_with_steps+0x98>)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6013      	str	r3, [r2, #0]
        isNewCycle = 0;
 800297a:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <turn_with_steps+0x94>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    }

    // Calculate time within the current cycle
    uint32_t timeInCycle = currentTime - cycleStartTime;
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <turn_with_steps+0x98>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	60fb      	str	r3, [r7, #12]

    // Total cycle time
    const uint32_t TOTAL_CYCLE_TIME = TURN_ACTIVE_TIME + TURN_PAUSE_TIME;
 800298a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 800298e:	60bb      	str	r3, [r7, #8]

    // If we've completed a cycle, start a new one
    if(timeInCycle >= TOTAL_CYCLE_TIME) {
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	429a      	cmp	r2, r3
 8002996:	d304      	bcc.n	80029a2 <turn_with_steps+0x42>
        cycleStartTime = currentTime;
 8002998:	4a17      	ldr	r2, [pc, #92]	@ (80029f8 <turn_with_steps+0x98>)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6013      	str	r3, [r2, #0]
        timeInCycle = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
    }

    // During active turn time
    if(timeInCycle < TURN_ACTIVE_TIME) {
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b1d      	cmp	r3, #29
 80029a6:	d80a      	bhi.n	80029be <turn_with_steps+0x5e>
        if(direction == RIGHT) {
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d103      	bne.n	80029b6 <turn_with_steps+0x56>
            motors_right(TURN_SPEED_MAX);
 80029ae:	2064      	movs	r0, #100	@ 0x64
 80029b0:	f7ff fcb8 	bl	8002324 <motors_right>
 80029b4:	e005      	b.n	80029c2 <turn_with_steps+0x62>
        } else {
            motors_left(TURN_SPEED_MAX);
 80029b6:	2064      	movs	r0, #100	@ 0x64
 80029b8:	f7ff fc82 	bl	80022c0 <motors_left>
 80029bc:	e001      	b.n	80029c2 <turn_with_steps+0x62>
        }
    }
    // During pause time
    else {
        motors_stop();
 80029be:	f7ff fce3 	bl	8002388 <motors_stop>
    }

    // Debug output
    sprintf(uart_buf, "Turn Cycle: %lu ms, State: %s\r\n",
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b1d      	cmp	r3, #29
 80029c6:	d801      	bhi.n	80029cc <turn_with_steps+0x6c>
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <turn_with_steps+0x9c>)
 80029ca:	e000      	b.n	80029ce <turn_with_steps+0x6e>
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <turn_with_steps+0xa0>)
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	490c      	ldr	r1, [pc, #48]	@ (8002a04 <turn_with_steps+0xa4>)
 80029d2:	480d      	ldr	r0, [pc, #52]	@ (8002a08 <turn_with_steps+0xa8>)
 80029d4:	f00a fd5c 	bl	800d490 <siprintf>
            timeInCycle,
            (timeInCycle < TURN_ACTIVE_TIME) ? "Turning" : "Stopped");
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 80029d8:	480b      	ldr	r0, [pc, #44]	@ (8002a08 <turn_with_steps+0xa8>)
 80029da:	f7fd fbf9 	bl	80001d0 <strlen>
 80029de:	4603      	mov	r3, r0
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	2364      	movs	r3, #100	@ 0x64
 80029e4:	4908      	ldr	r1, [pc, #32]	@ (8002a08 <turn_with_steps+0xa8>)
 80029e6:	4809      	ldr	r0, [pc, #36]	@ (8002a0c <turn_with_steps+0xac>)
 80029e8:	f006 f802 	bl	80089f0 <HAL_UART_Transmit>
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000008 	.word	0x20000008
 80029f8:	20000658 	.word	0x20000658
 80029fc:	0800e1b8 	.word	0x0800e1b8
 8002a00:	0800e1c0 	.word	0x0800e1c0
 8002a04:	0800e1c8 	.word	0x0800e1c8
 8002a08:	20000108 	.word	0x20000108
 8002a0c:	200005c4 	.word	0x200005c4

08002a10 <navigateRobot>:

void navigateRobot(uint16_t *filteredDistances) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    static uint32_t stateStartTime = 0;
    uint8_t leftObstacles = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
    uint8_t rightObstacles = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75bb      	strb	r3, [r7, #22]
    uint32_t currentTime = HAL_GetTick();
 8002a20:	f001 ff2a 	bl	8004878 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]

    // Count obstacles on left and right
    for(int i = 0; i < 2; i++) {
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e010      	b.n	8002a4e <navigateRobot+0x3e>
        if(isValidObstacle(filteredDistances[i])) {
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fb72 	bl	8002120 <isValidObstacle>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <navigateRobot+0x38>
            leftObstacles++;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	3301      	adds	r3, #1
 8002a46:	75fb      	strb	r3, [r7, #23]
    for(int i = 0; i < 2; i++) {
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	ddeb      	ble.n	8002a2c <navigateRobot+0x1c>
        }
    }
    for(int i = 3; i < 5; i++) {
 8002a54:	2303      	movs	r3, #3
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e010      	b.n	8002a7c <navigateRobot+0x6c>
        if(isValidObstacle(filteredDistances[i])) {
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fb5b 	bl	8002120 <isValidObstacle>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <navigateRobot+0x66>
            rightObstacles++;
 8002a70:	7dbb      	ldrb	r3, [r7, #22]
 8002a72:	3301      	adds	r3, #1
 8002a74:	75bb      	strb	r3, [r7, #22]
    for(int i = 3; i < 5; i++) {
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	ddeb      	ble.n	8002a5a <navigateRobot+0x4a>
        }
    }

    // If obstacles on left side, turn right gradually
    // Handle center sensor separately if needed
    if((isValidObstacle(filteredDistances[2]) && filteredDistances[2] < SAFETY_DISTANCE_CM/2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb49 	bl	8002120 <isValidObstacle>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <navigateRobot+0x8e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	d919      	bls.n	8002ad2 <navigateRobot+0xc2>
    	|| (isValidObstacle(filteredDistances[0]) && filteredDistances[0] < SAFETY_DISTANCE_CM/2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fb3c 	bl	8002120 <isValidObstacle>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <navigateRobot+0xa6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	d90d      	bls.n	8002ad2 <navigateRobot+0xc2>
		|| (isValidObstacle(filteredDistances[4]) && filteredDistances[4] < SAFETY_DISTANCE_CM/2)) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fb2f 	bl	8002120 <isValidObstacle>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <navigateRobot+0xe0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3308      	adds	r3, #8
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	d80e      	bhi.n	8002af0 <navigateRobot+0xe0>
        // Consider center obstacle based on context
    	if(currentTime - stateStartTime > 300) {
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <navigateRobot+0x238>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002ade:	f240 80af 	bls.w	8002c40 <navigateRobot+0x230>
    		motors_backward(NORMAL_SPEED);
 8002ae2:	2046      	movs	r0, #70	@ 0x46
 8002ae4:	f7ff fbb6 	bl	8002254 <motors_backward>
    	 stateStartTime = currentTime;
 8002ae8:	4a57      	ldr	r2, [pc, #348]	@ (8002c48 <navigateRobot+0x238>)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6013      	str	r3, [r2, #0]
    	if(currentTime - stateStartTime > 300) {
 8002aee:	e0a7      	b.n	8002c40 <navigateRobot+0x230>
        }

    }
    else if(leftObstacles > rightObstacles) {
 8002af0:	7dfa      	ldrb	r2, [r7, #23]
 8002af2:	7dbb      	ldrb	r3, [r7, #22]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d91f      	bls.n	8002b38 <navigateRobot+0x128>
    	if(isValidObstacle(filteredDistances[0]) || isValidObstacle(filteredDistances[1])|| isValidObstacle(filteredDistances[2])) {
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fb0f 	bl	8002120 <isValidObstacle>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d112      	bne.n	8002b2e <navigateRobot+0x11e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fb06 	bl	8002120 <isValidObstacle>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <navigateRobot+0x11e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fafd 	bl	8002120 <isValidObstacle>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8089 	beq.w	8002c40 <navigateRobot+0x230>
    		 turn_with_steps(RIGHT, currentTime);
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7ff ff15 	bl	8002960 <turn_with_steps>
//    sprintf(uart_buf, "Distances: %d,%d,%d,%d,%d\r\n",
//            filteredDistances[0], filteredDistances[1],
//            filteredDistances[2], filteredDistances[3],
//            filteredDistances[4]);
//    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
}
 8002b36:	e083      	b.n	8002c40 <navigateRobot+0x230>
    else if(leftObstacles < rightObstacles) {
 8002b38:	7dfa      	ldrb	r2, [r7, #23]
 8002b3a:	7dbb      	ldrb	r3, [r7, #22]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d21f      	bcs.n	8002b80 <navigateRobot+0x170>
    	if(isValidObstacle(filteredDistances[2]) || isValidObstacle(filteredDistances[3]) || isValidObstacle(filteredDistances[4])) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff faea 	bl	8002120 <isValidObstacle>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d111      	bne.n	8002b76 <navigateRobot+0x166>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3306      	adds	r3, #6
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fae1 	bl	8002120 <isValidObstacle>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <navigateRobot+0x166>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3308      	adds	r3, #8
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fad8 	bl	8002120 <isValidObstacle>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d064      	beq.n	8002c40 <navigateRobot+0x230>
    		 turn_with_steps(LEFT, currentTime);
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff fef1 	bl	8002960 <turn_with_steps>
}
 8002b7e:	e05f      	b.n	8002c40 <navigateRobot+0x230>
    else if(leftObstacles > 0 && leftObstacles == rightObstacles) {
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <navigateRobot+0x188>
 8002b86:	7dfa      	ldrb	r2, [r7, #23]
 8002b88:	7dbb      	ldrb	r3, [r7, #22]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d104      	bne.n	8002b98 <navigateRobot+0x188>
    	 turn_with_steps(LEFT, currentTime);
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7ff fee5 	bl	8002960 <turn_with_steps>
 8002b96:	e053      	b.n	8002c40 <navigateRobot+0x230>
    else if(leftObstacles > rightObstacles && leftObstacles > 1) {  // Need at least 2 sensors to trigger
 8002b98:	7dfa      	ldrb	r2, [r7, #23]
 8002b9a:	7dbb      	ldrb	r3, [r7, #22]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d921      	bls.n	8002be4 <navigateRobot+0x1d4>
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d91e      	bls.n	8002be4 <navigateRobot+0x1d4>
		if(isValidObstacle(filteredDistances[0]) || isValidObstacle(filteredDistances[1])|| isValidObstacle(filteredDistances[2])) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fab8 	bl	8002120 <isValidObstacle>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <navigateRobot+0x1ca>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff faaf 	bl	8002120 <isValidObstacle>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <navigateRobot+0x1ca>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff faa6 	bl	8002120 <isValidObstacle>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02f      	beq.n	8002c3a <navigateRobot+0x22a>
			 turn_with_steps(RIGHT, currentTime);
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7ff febf 	bl	8002960 <turn_with_steps>
		if(isValidObstacle(filteredDistances[0]) || isValidObstacle(filteredDistances[1])|| isValidObstacle(filteredDistances[2])) {
 8002be2:	e02a      	b.n	8002c3a <navigateRobot+0x22a>
    else if(rightObstacles > leftObstacles && rightObstacles > 1) {  // Need at least 2 sensors to trigger
 8002be4:	7dba      	ldrb	r2, [r7, #22]
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d922      	bls.n	8002c32 <navigateRobot+0x222>
 8002bec:	7dbb      	ldrb	r3, [r7, #22]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d91f      	bls.n	8002c32 <navigateRobot+0x222>
    	if(isValidObstacle(filteredDistances[2]) || isValidObstacle(filteredDistances[3]) || isValidObstacle(filteredDistances[4])) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fa91 	bl	8002120 <isValidObstacle>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d111      	bne.n	8002c28 <navigateRobot+0x218>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3306      	adds	r3, #6
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fa88 	bl	8002120 <isValidObstacle>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <navigateRobot+0x218>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fa7f 	bl	8002120 <isValidObstacle>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <navigateRobot+0x22e>
    		 turn_with_steps(LEFT, currentTime);
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7ff fe98 	bl	8002960 <turn_with_steps>
    	if(isValidObstacle(filteredDistances[2]) || isValidObstacle(filteredDistances[3]) || isValidObstacle(filteredDistances[4])) {
 8002c30:	e005      	b.n	8002c3e <navigateRobot+0x22e>
        motors_forward(NORMAL_SPEED);
 8002c32:	2046      	movs	r0, #70	@ 0x46
 8002c34:	f7ff fae0 	bl	80021f8 <motors_forward>
}
 8002c38:	e002      	b.n	8002c40 <navigateRobot+0x230>
		if(isValidObstacle(filteredDistances[0]) || isValidObstacle(filteredDistances[1])|| isValidObstacle(filteredDistances[2])) {
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <navigateRobot+0x230>
    	if(isValidObstacle(filteredDistances[2]) || isValidObstacle(filteredDistances[3]) || isValidObstacle(filteredDistances[4])) {
 8002c3e:	bf00      	nop
}
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	2000065c 	.word	0x2000065c

08002c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c50:	f001 fda2 	bl	8004798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c54:	f000 f850 	bl	8002cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c58:	f000 fbbc 	bl	80033d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c5c:	f000 fb8a 	bl	8003374 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8002c60:	f000 f8dc 	bl	8002e1c <MX_I2C3_Init>
  MX_TIM1_Init();
 8002c64:	f000 f91a 	bl	8002e9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c68:	f000 f9c6 	bl	8002ff8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002c6c:	f000 f896 	bl	8002d9c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002c70:	f000 fa38 	bl	80030e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c74:	f000 fab8 	bl	80031e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c78:	f000 fb2e 	bl	80032d8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  Debug_Print("\r\n[DEBUG] System Initialized\r\n");
 8002c7c:	4812      	ldr	r0, [pc, #72]	@ (8002cc8 <main+0x7c>)
 8002c7e:	f7fe fb75 	bl	800136c <Debug_Print>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8002c82:	2201      	movs	r2, #1
 8002c84:	4911      	ldr	r1, [pc, #68]	@ (8002ccc <main+0x80>)
 8002c86:	4812      	ldr	r0, [pc, #72]	@ (8002cd0 <main+0x84>)
 8002c88:	f005 ff3c 	bl	8008b04 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c8c:	f007 fa80 	bl	800a190 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of timeTask */
  timeTaskHandle = osThreadNew(TimeTask, NULL, &timeTask_attributes);
 8002c90:	4a10      	ldr	r2, [pc, #64]	@ (8002cd4 <main+0x88>)
 8002c92:	2100      	movs	r1, #0
 8002c94:	4810      	ldr	r0, [pc, #64]	@ (8002cd8 <main+0x8c>)
 8002c96:	f007 fac5 	bl	800a224 <osThreadNew>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cdc <main+0x90>)
 8002c9e:	6013      	str	r3, [r2, #0]

  /* creation of pidTask */
  pidTaskHandle = osThreadNew(PidTask, NULL, &pidTask_attributes);
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <main+0x94>)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	480f      	ldr	r0, [pc, #60]	@ (8002ce4 <main+0x98>)
 8002ca6:	f007 fabd 	bl	800a224 <osThreadNew>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce8 <main+0x9c>)
 8002cae:	6013      	str	r3, [r2, #0]

  /* creation of lidarTask */
  lidarTaskHandle = osThreadNew(LidarTask, NULL, &lidarTask_attributes);
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <main+0xa0>)
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	480e      	ldr	r0, [pc, #56]	@ (8002cf0 <main+0xa4>)
 8002cb6:	f007 fab5 	bl	800a224 <osThreadNew>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <main+0xa8>)
 8002cbe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002cc0:	f007 fa8a 	bl	800a1d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <main+0x78>
 8002cc8:	0800e1e8 	.word	0x0800e1e8
 8002ccc:	20000394 	.word	0x20000394
 8002cd0:	200005c4 	.word	0x200005c4
 8002cd4:	0800f000 	.word	0x0800f000
 8002cd8:	080034f9 	.word	0x080034f9
 8002cdc:	2000064c 	.word	0x2000064c
 8002ce0:	0800f024 	.word	0x0800f024
 8002ce4:	0800378d 	.word	0x0800378d
 8002ce8:	20000650 	.word	0x20000650
 8002cec:	0800f048 	.word	0x0800f048
 8002cf0:	08003809 	.word	0x08003809
 8002cf4:	20000654 	.word	0x20000654

08002cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b096      	sub	sp, #88	@ 0x58
 8002cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	2244      	movs	r2, #68	@ 0x44
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f00a fbe2 	bl	800d4d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d1e:	f003 fa29 	bl	8006174 <HAL_PWREx_ControlVoltageScaling>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002d28:	f000 ff38 	bl	8003b9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d36:	2310      	movs	r3, #16
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002d46:	230a      	movs	r3, #10
 8002d48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d52:	2302      	movs	r3, #2
 8002d54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fa60 	bl	8006220 <HAL_RCC_OscConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002d66:	f000 ff19 	bl	8003b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d6a:	230f      	movs	r3, #15
 8002d6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d7e:	463b      	mov	r3, r7
 8002d80:	2104      	movs	r1, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fe28 	bl	80069d8 <HAL_RCC_ClockConfig>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d8e:	f000 ff05 	bl	8003b9c <Error_Handler>
  }
}
 8002d92:	bf00      	nop
 8002d94:	3758      	adds	r7, #88	@ 0x58
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002da2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <MX_I2C1_Init+0x78>)
 8002da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002da8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e18 <MX_I2C1_Init+0x7c>)
 8002daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002dac:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002db2:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dbe:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dca:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dd6:	480e      	ldr	r0, [pc, #56]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dd8:	f002 f900 	bl	8004fdc <HAL_I2C_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002de2:	f000 fedb 	bl	8003b9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002de6:	2100      	movs	r1, #0
 8002de8:	4809      	ldr	r0, [pc, #36]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dea:	f003 f91d 	bl	8006028 <HAL_I2CEx_ConfigAnalogFilter>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002df4:	f000 fed2 	bl	8003b9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <MX_I2C1_Init+0x74>)
 8002dfc:	f003 f95f 	bl	80060be <HAL_I2CEx_ConfigDigitalFilter>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e06:	f000 fec9 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200003a0 	.word	0x200003a0
 8002e14:	40005400 	.word	0x40005400
 8002e18:	00f12981 	.word	0x00f12981

08002e1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e22:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <MX_I2C3_Init+0x78>)
 8002e24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e28:	4a1b      	ldr	r2, [pc, #108]	@ (8002e98 <MX_I2C3_Init+0x7c>)
 8002e2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e32:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002e3e:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e56:	480e      	ldr	r0, [pc, #56]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e58:	f002 f8c0 	bl	8004fdc <HAL_I2C_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002e62:	f000 fe9b 	bl	8003b9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e66:	2100      	movs	r1, #0
 8002e68:	4809      	ldr	r0, [pc, #36]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e6a:	f003 f8dd 	bl	8006028 <HAL_I2CEx_ConfigAnalogFilter>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002e74:	f000 fe92 	bl	8003b9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4805      	ldr	r0, [pc, #20]	@ (8002e90 <MX_I2C3_Init+0x74>)
 8002e7c:	f003 f91f 	bl	80060be <HAL_I2CEx_ConfigDigitalFilter>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002e86:	f000 fe89 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200003f4 	.word	0x200003f4
 8002e94:	40005c00 	.word	0x40005c00
 8002e98:	10d19ce4 	.word	0x10d19ce4

08002e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b09a      	sub	sp, #104	@ 0x68
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ebc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
 8002ecc:	615a      	str	r2, [r3, #20]
 8002ece:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	222c      	movs	r2, #44	@ 0x2c
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f00a fafa 	bl	800d4d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002edc:	4b44      	ldr	r3, [pc, #272]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002ede:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <MX_TIM1_Init+0x158>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 399;
 8002ee2:	4b43      	ldr	r3, [pc, #268]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002ee4:	f240 128f 	movw	r2, #399	@ 0x18f
 8002ee8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eea:	4b41      	ldr	r3, [pc, #260]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8002ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002ef2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8002ef6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002efe:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f0a:	4839      	ldr	r0, [pc, #228]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f0c:	f004 fc44 	bl	8007798 <HAL_TIM_Base_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002f16:	f000 fe41 	bl	8003b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f20:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f24:	4619      	mov	r1, r3
 8002f26:	4832      	ldr	r0, [pc, #200]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f28:	f004 ff08 	bl	8007d3c <HAL_TIM_ConfigClockSource>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002f32:	f000 fe33 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f36:	482e      	ldr	r0, [pc, #184]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f38:	f004 fc85 	bl	8007846 <HAL_TIM_PWM_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002f42:	f000 fe2b 	bl	8003b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f56:	4619      	mov	r1, r3
 8002f58:	4825      	ldr	r0, [pc, #148]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f5a:	f005 fbf5 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002f64:	f000 fe1a 	bl	8003b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f68:	2360      	movs	r3, #96	@ 0x60
 8002f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f74:	2300      	movs	r3, #0
 8002f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f88:	2204      	movs	r2, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4818      	ldr	r0, [pc, #96]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002f8e:	f004 fdc1 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002f98:	f000 fe00 	bl	8003b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4807      	ldr	r0, [pc, #28]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002fd2:	f005 fc41 	bl	8008858 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002fdc:	f000 fdde 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fe0:	4803      	ldr	r0, [pc, #12]	@ (8002ff0 <MX_TIM1_Init+0x154>)
 8002fe2:	f001 fa23 	bl	800442c <HAL_TIM_MspPostInit>

}
 8002fe6:	bf00      	nop
 8002fe8:	3768      	adds	r7, #104	@ 0x68
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000448 	.word	0x20000448
 8002ff4:	40012c00 	.word	0x40012c00

08002ff8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	@ 0x38
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003018:	463b      	mov	r3, r7
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	615a      	str	r2, [r3, #20]
 8003028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800302a:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 800302c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003030:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8003032:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 8003034:	224f      	movs	r2, #79	@ 0x4f
 8003036:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003038:	4b29      	ldr	r3, [pc, #164]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800303e:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 8003040:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003044:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003046:	4b26      	ldr	r3, [pc, #152]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800304c:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003052:	4823      	ldr	r0, [pc, #140]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 8003054:	f004 fba0 	bl	8007798 <HAL_TIM_Base_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800305e:	f000 fd9d 	bl	8003b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003068:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800306c:	4619      	mov	r1, r3
 800306e:	481c      	ldr	r0, [pc, #112]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 8003070:	f004 fe64 	bl	8007d3c <HAL_TIM_ConfigClockSource>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800307a:	f000 fd8f 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800307e:	4818      	ldr	r0, [pc, #96]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 8003080:	f004 fbe1 	bl	8007846 <HAL_TIM_PWM_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800308a:	f000 fd87 	bl	8003b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	4810      	ldr	r0, [pc, #64]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 800309e:	f005 fb53 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030a8:	f000 fd78 	bl	8003b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ac:	2360      	movs	r3, #96	@ 0x60
 80030ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030bc:	463b      	mov	r3, r7
 80030be:	2200      	movs	r2, #0
 80030c0:	4619      	mov	r1, r3
 80030c2:	4807      	ldr	r0, [pc, #28]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 80030c4:	f004 fd26 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80030ce:	f000 fd65 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030d2:	4803      	ldr	r0, [pc, #12]	@ (80030e0 <MX_TIM2_Init+0xe8>)
 80030d4:	f001 f9aa 	bl	800442c <HAL_TIM_MspPostInit>

}
 80030d8:	bf00      	nop
 80030da:	3738      	adds	r7, #56	@ 0x38
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000494 	.word	0x20000494

080030e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	@ 0x38
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003104:	463b      	mov	r3, r7
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	615a      	str	r2, [r3, #20]
 8003114:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003116:	4b32      	ldr	r3, [pc, #200]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 8003118:	4a32      	ldr	r2, [pc, #200]	@ (80031e4 <MX_TIM3_Init+0x100>)
 800311a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800311c:	4b30      	ldr	r3, [pc, #192]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 800311e:	224f      	movs	r2, #79	@ 0x4f
 8003120:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	4b2f      	ldr	r3, [pc, #188]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003128:	4b2d      	ldr	r3, [pc, #180]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 800312a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800312e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003130:	4b2b      	ldr	r3, [pc, #172]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003136:	4b2a      	ldr	r3, [pc, #168]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800313c:	4828      	ldr	r0, [pc, #160]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 800313e:	f004 fb2b 	bl	8007798 <HAL_TIM_Base_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003148:	f000 fd28 	bl	8003b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003152:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003156:	4619      	mov	r1, r3
 8003158:	4821      	ldr	r0, [pc, #132]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 800315a:	f004 fdef 	bl	8007d3c <HAL_TIM_ConfigClockSource>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003164:	f000 fd1a 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003168:	481d      	ldr	r0, [pc, #116]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 800316a:	f004 fb6c 	bl	8007846 <HAL_TIM_PWM_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003174:	f000 fd12 	bl	8003b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	4816      	ldr	r0, [pc, #88]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 8003188:	f005 fade 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003192:	f000 fd03 	bl	8003b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003196:	2360      	movs	r3, #96	@ 0x60
 8003198:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031a6:	463b      	mov	r3, r7
 80031a8:	2200      	movs	r2, #0
 80031aa:	4619      	mov	r1, r3
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 80031ae:	f004 fcb1 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80031b8:	f000 fcf0 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031bc:	463b      	mov	r3, r7
 80031be:	2204      	movs	r2, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4807      	ldr	r0, [pc, #28]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 80031c4:	f004 fca6 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80031ce:	f000 fce5 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031d2:	4803      	ldr	r0, [pc, #12]	@ (80031e0 <MX_TIM3_Init+0xfc>)
 80031d4:	f001 f92a 	bl	800442c <HAL_TIM_MspPostInit>

}
 80031d8:	bf00      	nop
 80031da:	3738      	adds	r7, #56	@ 0x38
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200004e0 	.word	0x200004e0
 80031e4:	40000400 	.word	0x40000400

080031e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	@ 0x38
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003208:	463b      	mov	r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
 8003214:	611a      	str	r2, [r3, #16]
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800321a:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 800321c:	4a2d      	ldr	r2, [pc, #180]	@ (80032d4 <MX_TIM4_Init+0xec>)
 800321e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8003220:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 8003222:	224f      	movs	r2, #79	@ 0x4f
 8003224:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003226:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800322c:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 800322e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003232:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003234:	4b26      	ldr	r3, [pc, #152]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323a:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003240:	4823      	ldr	r0, [pc, #140]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 8003242:	f004 faa9 	bl	8007798 <HAL_TIM_Base_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800324c:	f000 fca6 	bl	8003b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800325a:	4619      	mov	r1, r3
 800325c:	481c      	ldr	r0, [pc, #112]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 800325e:	f004 fd6d 	bl	8007d3c <HAL_TIM_ConfigClockSource>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003268:	f000 fc98 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800326c:	4818      	ldr	r0, [pc, #96]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 800326e:	f004 faea 	bl	8007846 <HAL_TIM_PWM_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003278:	f000 fc90 	bl	8003b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	4619      	mov	r1, r3
 800328a:	4811      	ldr	r0, [pc, #68]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 800328c:	f005 fa5c 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003296:	f000 fc81 	bl	8003b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800329a:	2360      	movs	r3, #96	@ 0x60
 800329c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032aa:	463b      	mov	r3, r7
 80032ac:	2200      	movs	r2, #0
 80032ae:	4619      	mov	r1, r3
 80032b0:	4807      	ldr	r0, [pc, #28]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 80032b2:	f004 fc2f 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80032bc:	f000 fc6e 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80032c0:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <MX_TIM4_Init+0xe8>)
 80032c2:	f001 f8b3 	bl	800442c <HAL_TIM_MspPostInit>

}
 80032c6:	bf00      	nop
 80032c8:	3738      	adds	r7, #56	@ 0x38
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2000052c 	.word	0x2000052c
 80032d4:	40000800 	.word	0x40000800

080032d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <MX_TIM5_Init+0x94>)
 80032f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <MX_TIM5_Init+0x98>)
 80032fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <MX_TIM5_Init+0x94>)
 80032fe:	224f      	movs	r2, #79	@ 0x4f
 8003300:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <MX_TIM5_Init+0x94>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 382;
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <MX_TIM5_Init+0x94>)
 800330a:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800330e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003310:	4b16      	ldr	r3, [pc, #88]	@ (800336c <MX_TIM5_Init+0x94>)
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <MX_TIM5_Init+0x94>)
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800331c:	4813      	ldr	r0, [pc, #76]	@ (800336c <MX_TIM5_Init+0x94>)
 800331e:	f004 fa3b 	bl	8007798 <HAL_TIM_Base_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003328:	f000 fc38 	bl	8003b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	4619      	mov	r1, r3
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <MX_TIM5_Init+0x94>)
 800333a:	f004 fcff 	bl	8007d3c <HAL_TIM_ConfigClockSource>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003344:	f000 fc2a 	bl	8003b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <MX_TIM5_Init+0x94>)
 8003356:	f005 f9f7 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003360:	f000 fc1c 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000578 	.word	0x20000578
 8003370:	40000c00 	.word	0x40000c00

08003374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 800337a:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <MX_USART2_UART_Init+0x5c>)
 800337c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800337e:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 8003380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 800339a:	220c      	movs	r2, #12
 800339c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	@ (80033cc <MX_USART2_UART_Init+0x58>)
 80033b8:	f005 facc 	bl	8008954 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033c2:	f000 fbeb 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200005c4 	.word	0x200005c4
 80033d0:	40004400 	.word	0x40004400

080033d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ea:	4b41      	ldr	r3, [pc, #260]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	4a40      	ldr	r2, [pc, #256]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f6:	4b3e      	ldr	r3, [pc, #248]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003402:	4b3b      	ldr	r3, [pc, #236]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003406:	4a3a      	ldr	r2, [pc, #232]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800340e:	4b38      	ldr	r3, [pc, #224]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b35      	ldr	r3, [pc, #212]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	4a34      	ldr	r2, [pc, #208]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003426:	4b32      	ldr	r3, [pc, #200]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	4b2f      	ldr	r3, [pc, #188]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	4a2e      	ldr	r2, [pc, #184]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343e:	4b2c      	ldr	r3, [pc, #176]	@ (80034f0 <MX_GPIO_Init+0x11c>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8003450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003454:	f001 fd92 	bl	8004f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800345e:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <MX_GPIO_Init+0x120>)
 8003460:	f001 fd8c 	bl	8004f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800346a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800346e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	4619      	mov	r1, r3
 800347a:	481e      	ldr	r0, [pc, #120]	@ (80034f4 <MX_GPIO_Init+0x120>)
 800347c:	f001 fbbc 	bl	8004bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8003480:	f241 0301 	movw	r3, #4097	@ 0x1001
 8003484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349c:	f001 fbac 	bl	8004bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80034a0:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80034a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	480e      	ldr	r0, [pc, #56]	@ (80034f4 <MX_GPIO_Init+0x120>)
 80034ba:	f001 fb9d 	bl	8004bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80034c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	4619      	mov	r1, r3
 80034d2:	4808      	ldr	r0, [pc, #32]	@ (80034f4 <MX_GPIO_Init+0x120>)
 80034d4:	f001 fb90 	bl	8004bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	2017      	movs	r0, #23
 80034de:	f001 fad6 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034e2:	2017      	movs	r0, #23
 80034e4:	f001 faef 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	@ 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	48000800 	.word	0x48000800

080034f8 <TimeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TimeTask */
void TimeTask(void *argument)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af04      	add	r7, sp, #16
 80034fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint32_t led_last_time = 0;
	static uint8_t led_state = 0;  // 0 = OFF cycle, 1 = ON cycle
	MPU6050_init();
 8003500:	f7fd fd1a 	bl	8000f38 <MPU6050_init>
	ssd1306_Init(&hi2c3);
 8003504:	4887      	ldr	r0, [pc, #540]	@ (8003724 <TimeTask+0x22c>)
 8003506:	f000 fbc3 	bl	8003c90 <ssd1306_Init>
	buzzer_init();
 800350a:	f7fd feff 	bl	800130c <buzzer_init>
	start_mario_melody();  // Start with main theme
 800350e:	f7fd ff07 	bl	8001320 <start_mario_melody>

	Set_init_time( __DATE__, __TIME__);
 8003512:	4985      	ldr	r1, [pc, #532]	@ (8003728 <TimeTask+0x230>)
 8003514:	4885      	ldr	r0, [pc, #532]	@ (800372c <TimeTask+0x234>)
 8003516:	f7fd ffdb 	bl	80014d0 <Set_init_time>

	servo_init(&htim1, TIM_CHANNEL_2);
 800351a:	2104      	movs	r1, #4
 800351c:	4884      	ldr	r0, [pc, #528]	@ (8003730 <TimeTask+0x238>)
 800351e:	f000 fb43 	bl	8003ba8 <servo_init>
	setServoAngle(&htim1, TIM_CHANNEL_2, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2104      	movs	r1, #4
 8003526:	4882      	ldr	r0, [pc, #520]	@ (8003730 <TimeTask+0x238>)
 8003528:	f000 fb4c 	bl	8003bc4 <setServoAngle>
	HAL_Delay(1000);
 800352c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003530:	f001 f9ae 	bl	8004890 <HAL_Delay>
  /* Infinite loop */
  for(;;)
  {
	uint32_t current_time = HAL_GetTick();
 8003534:	f001 f9a0 	bl	8004878 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]
    if(time_recieved == 1){
 800353a:	4b7e      	ldr	r3, [pc, #504]	@ (8003734 <TimeTask+0x23c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d13b      	bne.n	80035ba <TimeTask+0xc2>
    	if(timer_type == 0){
 8003542:	4b7d      	ldr	r3, [pc, #500]	@ (8003738 <TimeTask+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d112      	bne.n	8003570 <TimeTask+0x78>
    		Set_Time(0, min, hour, 1, day, month, year);
 800354a:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <TimeTask+0x244>)
 800354c:	7818      	ldrb	r0, [r3, #0]
 800354e:	4b7c      	ldr	r3, [pc, #496]	@ (8003740 <TimeTask+0x248>)
 8003550:	781c      	ldrb	r4, [r3, #0]
 8003552:	4b7c      	ldr	r3, [pc, #496]	@ (8003744 <TimeTask+0x24c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4a7c      	ldr	r2, [pc, #496]	@ (8003748 <TimeTask+0x250>)
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	497c      	ldr	r1, [pc, #496]	@ (800374c <TimeTask+0x254>)
 800355c:	7809      	ldrb	r1, [r1, #0]
 800355e:	9102      	str	r1, [sp, #8]
 8003560:	9201      	str	r2, [sp, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	4622      	mov	r2, r4
 8003568:	4601      	mov	r1, r0
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd ff52 	bl	8001414 <Set_Time>
    	}
    	if(timer_type == 1){
 8003570:	4b71      	ldr	r3, [pc, #452]	@ (8003738 <TimeTask+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d11d      	bne.n	80035b4 <TimeTask+0xbc>
    		alarmHour = hour;
 8003578:	4b71      	ldr	r3, [pc, #452]	@ (8003740 <TimeTask+0x248>)
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	4b74      	ldr	r3, [pc, #464]	@ (8003750 <TimeTask+0x258>)
 800357e:	701a      	strb	r2, [r3, #0]
    		alarmMin = min;
 8003580:	4b6e      	ldr	r3, [pc, #440]	@ (800373c <TimeTask+0x244>)
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	4b73      	ldr	r3, [pc, #460]	@ (8003754 <TimeTask+0x25c>)
 8003586:	701a      	strb	r2, [r3, #0]
    		snprintf(timerBuffer, sizeof(timerBuffer), "A:%02d:%02d", alarmHour, alarmMin);
 8003588:	4b71      	ldr	r3, [pc, #452]	@ (8003750 <TimeTask+0x258>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	4b71      	ldr	r3, [pc, #452]	@ (8003754 <TimeTask+0x25c>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	4a70      	ldr	r2, [pc, #448]	@ (8003758 <TimeTask+0x260>)
 8003598:	2164      	movs	r1, #100	@ 0x64
 800359a:	4870      	ldr	r0, [pc, #448]	@ (800375c <TimeTask+0x264>)
 800359c:	f009 ff44 	bl	800d428 <sniprintf>
    		ssd1306_SetCursor(0, 40); // column, row
 80035a0:	2128      	movs	r1, #40	@ 0x28
 80035a2:	2000      	movs	r0, #0
 80035a4:	f000 fdf0 	bl	8004188 <ssd1306_SetCursor>
    		ssd1306_WriteString(timerBuffer, Font_11x18, White);
 80035a8:	4a6d      	ldr	r2, [pc, #436]	@ (8003760 <TimeTask+0x268>)
 80035aa:	2301      	movs	r3, #1
 80035ac:	ca06      	ldmia	r2, {r1, r2}
 80035ae:	486b      	ldr	r0, [pc, #428]	@ (800375c <TimeTask+0x264>)
 80035b0:	f000 fdc4 	bl	800413c <ssd1306_WriteString>
    	}
      time_recieved = 0;
 80035b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <TimeTask+0x23c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    }

	Get_Time();
 80035ba:	f7fe f843 	bl	8001644 <Get_Time>
	get_roll_pitch(&roll, &pitch);
 80035be:	4969      	ldr	r1, [pc, #420]	@ (8003764 <TimeTask+0x26c>)
 80035c0:	4869      	ldr	r0, [pc, #420]	@ (8003768 <TimeTask+0x270>)
 80035c2:	f7fd fde1 	bl	8001188 <get_roll_pitch>

	snprintf(timerBuffer, sizeof(timerBuffer), "T:%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80035c6:	4b69      	ldr	r3, [pc, #420]	@ (800376c <TimeTask+0x274>)
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	4619      	mov	r1, r3
 80035cc:	4b67      	ldr	r3, [pc, #412]	@ (800376c <TimeTask+0x274>)
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b66      	ldr	r3, [pc, #408]	@ (800376c <TimeTask+0x274>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	9200      	str	r2, [sp, #0]
 80035da:	460b      	mov	r3, r1
 80035dc:	4a64      	ldr	r2, [pc, #400]	@ (8003770 <TimeTask+0x278>)
 80035de:	2164      	movs	r1, #100	@ 0x64
 80035e0:	485e      	ldr	r0, [pc, #376]	@ (800375c <TimeTask+0x264>)
 80035e2:	f009 ff21 	bl	800d428 <sniprintf>
	ssd1306_SetCursor(0, 0); // column, row
 80035e6:	2100      	movs	r1, #0
 80035e8:	2000      	movs	r0, #0
 80035ea:	f000 fdcd 	bl	8004188 <ssd1306_SetCursor>
	ssd1306_WriteString(timerBuffer, Font_11x18, White);
 80035ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003760 <TimeTask+0x268>)
 80035f0:	2301      	movs	r3, #1
 80035f2:	ca06      	ldmia	r2, {r1, r2}
 80035f4:	4859      	ldr	r0, [pc, #356]	@ (800375c <TimeTask+0x264>)
 80035f6:	f000 fda1 	bl	800413c <ssd1306_WriteString>

	sprintf(timerBuffer, "D:%02d/%02d/%02d",time.dayofmonth, time.month, time.year);
 80035fa:	4b5c      	ldr	r3, [pc, #368]	@ (800376c <TimeTask+0x274>)
 80035fc:	791b      	ldrb	r3, [r3, #4]
 80035fe:	461a      	mov	r2, r3
 8003600:	4b5a      	ldr	r3, [pc, #360]	@ (800376c <TimeTask+0x274>)
 8003602:	795b      	ldrb	r3, [r3, #5]
 8003604:	4619      	mov	r1, r3
 8003606:	4b59      	ldr	r3, [pc, #356]	@ (800376c <TimeTask+0x274>)
 8003608:	799b      	ldrb	r3, [r3, #6]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	460b      	mov	r3, r1
 800360e:	4959      	ldr	r1, [pc, #356]	@ (8003774 <TimeTask+0x27c>)
 8003610:	4852      	ldr	r0, [pc, #328]	@ (800375c <TimeTask+0x264>)
 8003612:	f009 ff3d 	bl	800d490 <siprintf>
	ssd1306_SetCursor(0, 20); // column, row
 8003616:	2114      	movs	r1, #20
 8003618:	2000      	movs	r0, #0
 800361a:	f000 fdb5 	bl	8004188 <ssd1306_SetCursor>
	ssd1306_WriteString(timerBuffer, Font_11x18, White);
 800361e:	4a50      	ldr	r2, [pc, #320]	@ (8003760 <TimeTask+0x268>)
 8003620:	2301      	movs	r3, #1
 8003622:	ca06      	ldmia	r2, {r1, r2}
 8003624:	484d      	ldr	r0, [pc, #308]	@ (800375c <TimeTask+0x264>)
 8003626:	f000 fd89 	bl	800413c <ssd1306_WriteString>
	ssd1306_UpdateScreen(&hi2c3); // Copy all data from local screen buffer to the screen
 800362a:	483e      	ldr	r0, [pc, #248]	@ (8003724 <TimeTask+0x22c>)
 800362c:	f000 fc74 	bl	8003f18 <ssd1306_UpdateScreen>
//		HAL_UART_Transmit(&huart2, (uint8_t *)timerBuffer, strlen(timerBuffer), HAL_MAX_DELAY);
//
//		snprintf(timerBuffer, sizeof(timerBuffer), "Roll: %d, Pitch: %d\r\n", roll, pitch);
//		HAL_UART_Transmit(&huart2, (uint8_t *)timerBuffer, strlen(timerBuffer), HAL_MAX_DELAY);

	if(alarmHour == time.hour && alarmMin == time.minutes && (previousAlarmMin != time.minutes)){
 8003630:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <TimeTask+0x274>)
 8003632:	789a      	ldrb	r2, [r3, #2]
 8003634:	4b46      	ldr	r3, [pc, #280]	@ (8003750 <TimeTask+0x258>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d115      	bne.n	8003668 <TimeTask+0x170>
 800363c:	4b4b      	ldr	r3, [pc, #300]	@ (800376c <TimeTask+0x274>)
 800363e:	785a      	ldrb	r2, [r3, #1]
 8003640:	4b44      	ldr	r3, [pc, #272]	@ (8003754 <TimeTask+0x25c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d10f      	bne.n	8003668 <TimeTask+0x170>
 8003648:	4b48      	ldr	r3, [pc, #288]	@ (800376c <TimeTask+0x274>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	461a      	mov	r2, r3
 800364e:	4b4a      	ldr	r3, [pc, #296]	@ (8003778 <TimeTask+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d008      	beq.n	8003668 <TimeTask+0x170>
		previousAlarmMin = time.minutes;
 8003656:	4b45      	ldr	r3, [pc, #276]	@ (800376c <TimeTask+0x274>)
 8003658:	785b      	ldrb	r3, [r3, #1]
 800365a:	461a      	mov	r2, r3
 800365c:	4b46      	ldr	r3, [pc, #280]	@ (8003778 <TimeTask+0x280>)
 800365e:	601a      	str	r2, [r3, #0]
		alarmVar = 1;
 8003660:	4b46      	ldr	r3, [pc, #280]	@ (800377c <TimeTask+0x284>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e009      	b.n	800367c <TimeTask+0x184>
	}
	else if(previousAlarmMin != time.minutes){
 8003668:	4b40      	ldr	r3, [pc, #256]	@ (800376c <TimeTask+0x274>)
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	461a      	mov	r2, r3
 800366e:	4b42      	ldr	r3, [pc, #264]	@ (8003778 <TimeTask+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d002      	beq.n	800367c <TimeTask+0x184>
		previousAlarmMin = 0;
 8003676:	4b40      	ldr	r3, [pc, #256]	@ (8003778 <TimeTask+0x280>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
	}

	if(alarmVar == 1){
 800367c:	4b3f      	ldr	r3, [pc, #252]	@ (800377c <TimeTask+0x284>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d12d      	bne.n	80036e0 <TimeTask+0x1e8>
		stop_motors = 1;
 8003684:	4b3e      	ldr	r3, [pc, #248]	@ (8003780 <TimeTask+0x288>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
		if(led_state == 0)  // During OFF cycle
 800368a:	4b3e      	ldr	r3, [pc, #248]	@ (8003784 <TimeTask+0x28c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d113      	bne.n	80036ba <TimeTask+0x1c2>
		    {
		        if(current_time - led_last_time >= 1000)  // Check if 1 second passed
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <TimeTask+0x290>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800369e:	d31f      	bcc.n	80036e0 <TimeTask+0x1e8>
		        {
		            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  // Turn ON
 80036a0:	2201      	movs	r2, #1
 80036a2:	2101      	movs	r1, #1
 80036a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036a8:	f001 fc68 	bl	8004f7c <HAL_GPIO_WritePin>
		            led_last_time = current_time;
 80036ac:	4a36      	ldr	r2, [pc, #216]	@ (8003788 <TimeTask+0x290>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6013      	str	r3, [r2, #0]
		            led_state = 1;  // Switch to ON cycle
 80036b2:	4b34      	ldr	r3, [pc, #208]	@ (8003784 <TimeTask+0x28c>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e012      	b.n	80036e0 <TimeTask+0x1e8>
		        }
		    }
		 else  // During ON cycle
		    {
		        if(current_time - led_last_time >= 1000)  // Check if 1 second passed
 80036ba:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <TimeTask+0x290>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c6:	d30b      	bcc.n	80036e0 <TimeTask+0x1e8>
		        {
		            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Turn OFF
 80036c8:	2200      	movs	r2, #0
 80036ca:	2101      	movs	r1, #1
 80036cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036d0:	f001 fc54 	bl	8004f7c <HAL_GPIO_WritePin>
		            led_last_time = current_time;
 80036d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003788 <TimeTask+0x290>)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6013      	str	r3, [r2, #0]
		            led_state = 0;  // Switch to OFF cycle
 80036da:	4b2a      	ldr	r3, [pc, #168]	@ (8003784 <TimeTask+0x28c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
		    }

	}


	if(roll>90 || roll<-90 || pitch>90 || pitch<-90 ){
 80036e0:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <TimeTask+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b5a      	cmp	r3, #90	@ 0x5a
 80036e6:	dc0d      	bgt.n	8003704 <TimeTask+0x20c>
 80036e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003768 <TimeTask+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 80036f0:	db08      	blt.n	8003704 <TimeTask+0x20c>
 80036f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <TimeTask+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80036f8:	dc04      	bgt.n	8003704 <TimeTask+0x20c>
 80036fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <TimeTask+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8003702:	da05      	bge.n	8003710 <TimeTask+0x218>
		setServoAngle(&htim1, TIM_CHANNEL_2, 180);
 8003704:	22b4      	movs	r2, #180	@ 0xb4
 8003706:	2104      	movs	r1, #4
 8003708:	4809      	ldr	r0, [pc, #36]	@ (8003730 <TimeTask+0x238>)
 800370a:	f000 fa5b 	bl	8003bc4 <setServoAngle>
 800370e:	e004      	b.n	800371a <TimeTask+0x222>
	}
	else {
		setServoAngle(&htim1, TIM_CHANNEL_2, 0);
 8003710:	2200      	movs	r2, #0
 8003712:	2104      	movs	r1, #4
 8003714:	4806      	ldr	r0, [pc, #24]	@ (8003730 <TimeTask+0x238>)
 8003716:	f000 fa55 	bl	8003bc4 <setServoAngle>
	}
	osDelay(1);
 800371a:	2001      	movs	r0, #1
 800371c:	f006 fe14 	bl	800a348 <osDelay>
  {
 8003720:	e708      	b.n	8003534 <TimeTask+0x3c>
 8003722:	bf00      	nop
 8003724:	200003f4 	.word	0x200003f4
 8003728:	0800e208 	.word	0x0800e208
 800372c:	0800e214 	.word	0x0800e214
 8003730:	20000448 	.word	0x20000448
 8003734:	20000324 	.word	0x20000324
 8003738:	20000320 	.word	0x20000320
 800373c:	20000329 	.word	0x20000329
 8003740:	20000328 	.word	0x20000328
 8003744:	2000032b 	.word	0x2000032b
 8003748:	2000032a 	.word	0x2000032a
 800374c:	2000032c 	.word	0x2000032c
 8003750:	2000032e 	.word	0x2000032e
 8003754:	2000032f 	.word	0x2000032f
 8003758:	0800e220 	.word	0x0800e220
 800375c:	200002b4 	.word	0x200002b4
 8003760:	20000000 	.word	0x20000000
 8003764:	2000031c 	.word	0x2000031c
 8003768:	20000318 	.word	0x20000318
 800376c:	20000100 	.word	0x20000100
 8003770:	0800e22c 	.word	0x0800e22c
 8003774:	0800e240 	.word	0x0800e240
 8003778:	20000398 	.word	0x20000398
 800377c:	2000032d 	.word	0x2000032d
 8003780:	2000039c 	.word	0x2000039c
 8003784:	20000660 	.word	0x20000660
 8003788:	20000664 	.word	0x20000664

0800378c <PidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PidTask */
void PidTask(void *argument)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PidTask */
  /* Infinite loop */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003794:	2100      	movs	r1, #0
 8003796:	4814      	ldr	r0, [pc, #80]	@ (80037e8 <PidTask+0x5c>)
 8003798:	f004 f8b6 	bl	8007908 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800379c:	2100      	movs	r1, #0
 800379e:	4813      	ldr	r0, [pc, #76]	@ (80037ec <PidTask+0x60>)
 80037a0:	f004 f8b2 	bl	8007908 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80037a4:	2104      	movs	r1, #4
 80037a6:	4811      	ldr	r0, [pc, #68]	@ (80037ec <PidTask+0x60>)
 80037a8:	f004 f8ae 	bl	8007908 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80037ac:	2100      	movs	r1, #0
 80037ae:	4810      	ldr	r0, [pc, #64]	@ (80037f0 <PidTask+0x64>)
 80037b0:	f004 f8aa 	bl	8007908 <HAL_TIM_PWM_Start>

  PID_Init(&pid_motor1, TARGET_SPEED_RPM);
 80037b4:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80037f4 <PidTask+0x68>
 80037b8:	480f      	ldr	r0, [pc, #60]	@ (80037f8 <PidTask+0x6c>)
 80037ba:	f7ff f899 	bl	80028f0 <PID_Init>
  PID_Init(&pid_motor2, TARGET_SPEED_RPM);
 80037be:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80037f4 <PidTask+0x68>
 80037c2:	480e      	ldr	r0, [pc, #56]	@ (80037fc <PidTask+0x70>)
 80037c4:	f7ff f894 	bl	80028f0 <PID_Init>

  for(;;)
  {
	if(stop_motors !=0 ){
 80037c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <PidTask+0x74>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <PidTask+0x4c>
		navigateRobot(filteredDistances);
 80037d0:	480c      	ldr	r0, [pc, #48]	@ (8003804 <PidTask+0x78>)
 80037d2:	f7ff f91d 	bl	8002a10 <navigateRobot>
 80037d6:	e001      	b.n	80037dc <PidTask+0x50>
		// Small delay to prevent overwhelming the system
	}
	else{
		motors_stop();
 80037d8:	f7fe fdd6 	bl	8002388 <motors_stop>
	}
	 // Update PID control
	update_motor_control();
 80037dc:	f7fe ffc0 	bl	8002760 <update_motor_control>
//			  (int)pid_motor2.current_rpm);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
//	  last_debug = HAL_GetTick();
//	}

	osDelay(1);
 80037e0:	2001      	movs	r0, #1
 80037e2:	f006 fdb1 	bl	800a348 <osDelay>
	if(stop_motors !=0 ){
 80037e6:	e7ef      	b.n	80037c8 <PidTask+0x3c>
 80037e8:	20000494 	.word	0x20000494
 80037ec:	200004e0 	.word	0x200004e0
 80037f0:	2000052c 	.word	0x2000052c
 80037f4:	43160000 	.word	0x43160000
 80037f8:	20000244 	.word	0x20000244
 80037fc:	20000274 	.word	0x20000274
 8003800:	2000039c 	.word	0x2000039c
 8003804:	200001d0 	.word	0x200001d0

08003808 <LidarTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LidarTask */
void LidarTask(void *argument)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b090      	sub	sp, #64	@ 0x40
 800380c:	af02      	add	r7, sp, #8
 800380e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LidarTask */
  /* Infinite loop */
	sprintf(uart_buf, "Starting VL53L0X multiple sensor initialization...\r\n");
 8003810:	498a      	ldr	r1, [pc, #552]	@ (8003a3c <LidarTask+0x234>)
 8003812:	488b      	ldr	r0, [pc, #556]	@ (8003a40 <LidarTask+0x238>)
 8003814:	f009 fe3c 	bl	800d490 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8003818:	4889      	ldr	r0, [pc, #548]	@ (8003a40 <LidarTask+0x238>)
 800381a:	f7fc fcd9 	bl	80001d0 <strlen>
 800381e:	4603      	mov	r3, r0
 8003820:	b29a      	uxth	r2, r3
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	4986      	ldr	r1, [pc, #536]	@ (8003a40 <LidarTask+0x238>)
 8003828:	4886      	ldr	r0, [pc, #536]	@ (8003a44 <LidarTask+0x23c>)
 800382a:	f005 f8e1 	bl	80089f0 <HAL_UART_Transmit>

	// Initially set all XSHUT pins low
	HAL_GPIO_WritePin(SENSOR_GPIO_PORT_C, SENSOR1_XSHUT_PIN, GPIO_PIN_RESET);
 800382e:	2200      	movs	r2, #0
 8003830:	2120      	movs	r1, #32
 8003832:	4885      	ldr	r0, [pc, #532]	@ (8003a48 <LidarTask+0x240>)
 8003834:	f001 fba2 	bl	8004f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENSOR_GPIO_PORT_A, SENSOR2_XSHUT_PIN, GPIO_PIN_RESET);
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800383e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003842:	f001 fb9b 	bl	8004f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENSOR_GPIO_PORT_C, SENSOR3_XSHUT_PIN, GPIO_PIN_RESET);
 8003846:	2200      	movs	r2, #0
 8003848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800384c:	487e      	ldr	r0, [pc, #504]	@ (8003a48 <LidarTask+0x240>)
 800384e:	f001 fb95 	bl	8004f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENSOR_GPIO_PORT_C, SENSOR4_XSHUT_PIN, GPIO_PIN_RESET);
 8003852:	2200      	movs	r2, #0
 8003854:	2140      	movs	r1, #64	@ 0x40
 8003856:	487c      	ldr	r0, [pc, #496]	@ (8003a48 <LidarTask+0x240>)
 8003858:	f001 fb90 	bl	8004f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENSOR_GPIO_PORT_C, SENSOR5_XSHUT_PIN, GPIO_PIN_RESET);
 800385c:	2200      	movs	r2, #0
 800385e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003862:	4879      	ldr	r0, [pc, #484]	@ (8003a48 <LidarTask+0x240>)
 8003864:	f001 fb8a 	bl	8004f7c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003868:	200a      	movs	r0, #10
 800386a:	f001 f811 	bl	8004890 <HAL_Delay>

	// Initialize sensors one by one, keeping previous ones enabled
	CheckAndInitSensor(0x29, 0x30, SENSOR_GPIO_PORT_C, SENSOR1_XSHUT_PIN, 1);
 800386e:	2301      	movs	r3, #1
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2320      	movs	r3, #32
 8003874:	4a74      	ldr	r2, [pc, #464]	@ (8003a48 <LidarTask+0x240>)
 8003876:	2130      	movs	r1, #48	@ 0x30
 8003878:	2029      	movs	r0, #41	@ 0x29
 800387a:	f7fe fa8f 	bl	8001d9c <CheckAndInitSensor>
	// First sensor stays enabled, initialize second
	CheckAndInitSensor(0x29, 0x31, SENSOR_GPIO_PORT_A, SENSOR2_XSHUT_PIN, 2);
 800387e:	2302      	movs	r3, #2
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003886:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800388a:	2131      	movs	r1, #49	@ 0x31
 800388c:	2029      	movs	r0, #41	@ 0x29
 800388e:	f7fe fa85 	bl	8001d9c <CheckAndInitSensor>
	// First two sensors stay enabled, initialize third
	CheckAndInitSensor(0x29, 0x32, SENSOR_GPIO_PORT_C, SENSOR3_XSHUT_PIN, 3);
 8003892:	2303      	movs	r3, #3
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800389a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a48 <LidarTask+0x240>)
 800389c:	2132      	movs	r1, #50	@ 0x32
 800389e:	2029      	movs	r0, #41	@ 0x29
 80038a0:	f7fe fa7c 	bl	8001d9c <CheckAndInitSensor>
	CheckAndInitSensor(0x29, 0x33, SENSOR_GPIO_PORT_C, SENSOR4_XSHUT_PIN, 4);
 80038a4:	2304      	movs	r3, #4
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2340      	movs	r3, #64	@ 0x40
 80038aa:	4a67      	ldr	r2, [pc, #412]	@ (8003a48 <LidarTask+0x240>)
 80038ac:	2133      	movs	r1, #51	@ 0x33
 80038ae:	2029      	movs	r0, #41	@ 0x29
 80038b0:	f7fe fa74 	bl	8001d9c <CheckAndInitSensor>
	CheckAndInitSensor(0x29, 0x34, SENSOR_GPIO_PORT_C, SENSOR5_XSHUT_PIN, 5);
 80038b4:	2305      	movs	r3, #5
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038bc:	4a62      	ldr	r2, [pc, #392]	@ (8003a48 <LidarTask+0x240>)
 80038be:	2134      	movs	r1, #52	@ 0x34
 80038c0:	2029      	movs	r0, #41	@ 0x29
 80038c2:	f7fe fa6b 	bl	8001d9c <CheckAndInitSensor>

	//    VL53L0X_SetOffset(0x30, -20);
	// Set +15mm offset for sensor 2
	VL53L0X_SetOffset(0x31, 0.3);
 80038c6:	2100      	movs	r1, #0
 80038c8:	2031      	movs	r0, #49	@ 0x31
 80038ca:	f7fe fb93 	bl	8001ff4 <VL53L0X_SetOffset>
	//    VL53L0X_SetOffset(0x32, 15);
	VL53L0X_SetOffset(0x33, 0.3);
 80038ce:	2100      	movs	r1, #0
 80038d0:	2033      	movs	r0, #51	@ 0x33
 80038d2:	f7fe fb8f 	bl	8001ff4 <VL53L0X_SetOffset>
	VL53L0X_SetOffset(0x34, -1);
 80038d6:	f04f 31ff 	mov.w	r1, #4294967295
 80038da:	2034      	movs	r0, #52	@ 0x34
 80038dc:	f7fe fb8a 	bl	8001ff4 <VL53L0X_SetOffset>
	uint8_t status;
	uint16_t distance1, distance2, distance3, distance4, distance5;

	while(1)
	{
		uint32_t sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0, sum5 = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e4:	2300      	movs	r3, #0
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ec:	2300      	movs	r3, #0
 80038ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
		uint16_t filtered_dist1, filtered_dist2, filtered_dist3, filtered_dist4, filtered_dist5;

		// Read and store in circular buffer
		status = VL53L0X_ReadRangeContinuous(0x30, &distance1);
 80038f4:	f107 0312 	add.w	r3, r7, #18
 80038f8:	4619      	mov	r1, r3
 80038fa:	2030      	movs	r0, #48	@ 0x30
 80038fc:	f7fe f9c4 	bl	8001c88 <VL53L0X_ReadRangeContinuous>
 8003900:	4603      	mov	r3, r0
 8003902:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(1);
 8003904:	2001      	movs	r0, #1
 8003906:	f000 ffc3 	bl	8004890 <HAL_Delay>
		if(status != 0) {
 800390a:	7ffb      	ldrb	r3, [r7, #31]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <LidarTask+0x110>
		  distance1 = 1000;  // Invalid reading due to error
 8003910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003914:	827b      	strh	r3, [r7, #18]
 8003916:	e006      	b.n	8003926 <LidarTask+0x11e>
		}
		else if(distance1 > 1000) {
 8003918:	8a7b      	ldrh	r3, [r7, #18]
 800391a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800391e:	d902      	bls.n	8003926 <LidarTask+0x11e>
		  distance1 = 1000;  // Limit maximum distance to 500
 8003920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003924:	827b      	strh	r3, [r7, #18]
		}
		buffer1[buffer_index] = distance1;
 8003926:	4b49      	ldr	r3, [pc, #292]	@ (8003a4c <LidarTask+0x244>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	8a79      	ldrh	r1, [r7, #18]
 800392e:	4b48      	ldr	r3, [pc, #288]	@ (8003a50 <LidarTask+0x248>)
 8003930:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		status = VL53L0X_ReadRangeContinuous(0x31, &distance2);
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4619      	mov	r1, r3
 800393a:	2031      	movs	r0, #49	@ 0x31
 800393c:	f7fe f9a4 	bl	8001c88 <VL53L0X_ReadRangeContinuous>
 8003940:	4603      	mov	r3, r0
 8003942:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(1);
 8003944:	2001      	movs	r0, #1
 8003946:	f000 ffa3 	bl	8004890 <HAL_Delay>
		if(status != 0) {
 800394a:	7ffb      	ldrb	r3, [r7, #31]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <LidarTask+0x150>
		  distance2 = 1000;  // Invalid reading due to error
 8003950:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003954:	823b      	strh	r3, [r7, #16]
 8003956:	e006      	b.n	8003966 <LidarTask+0x15e>
		}
		else if(distance2 > 1000) {
 8003958:	8a3b      	ldrh	r3, [r7, #16]
 800395a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800395e:	d902      	bls.n	8003966 <LidarTask+0x15e>
		  distance2 = 1000;  // Limit maximum distance to 500
 8003960:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003964:	823b      	strh	r3, [r7, #16]
		}
		buffer2[buffer_index] = distance2;
 8003966:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <LidarTask+0x244>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	8a39      	ldrh	r1, [r7, #16]
 800396e:	4b39      	ldr	r3, [pc, #228]	@ (8003a54 <LidarTask+0x24c>)
 8003970:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		status = VL53L0X_ReadRangeContinuous(0x32, &distance3);
 8003974:	f107 030e 	add.w	r3, r7, #14
 8003978:	4619      	mov	r1, r3
 800397a:	2032      	movs	r0, #50	@ 0x32
 800397c:	f7fe f984 	bl	8001c88 <VL53L0X_ReadRangeContinuous>
 8003980:	4603      	mov	r3, r0
 8003982:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(1);
 8003984:	2001      	movs	r0, #1
 8003986:	f000 ff83 	bl	8004890 <HAL_Delay>
		if(status != 0) {
 800398a:	7ffb      	ldrb	r3, [r7, #31]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <LidarTask+0x190>
		  distance3 = 1000;  // Invalid reading due to error
 8003990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003994:	81fb      	strh	r3, [r7, #14]
 8003996:	e006      	b.n	80039a6 <LidarTask+0x19e>
		}
		else if(distance3 > 1000) {
 8003998:	89fb      	ldrh	r3, [r7, #14]
 800399a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800399e:	d902      	bls.n	80039a6 <LidarTask+0x19e>
		  distance3 = 1000;  // Limit maximum distance to 500
 80039a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039a4:	81fb      	strh	r3, [r7, #14]
		}
		buffer3[buffer_index] = distance3;
 80039a6:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <LidarTask+0x244>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	89f9      	ldrh	r1, [r7, #14]
 80039ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <LidarTask+0x250>)
 80039b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		status = VL53L0X_ReadRangeContinuous(0x33, &distance4);
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	4619      	mov	r1, r3
 80039ba:	2033      	movs	r0, #51	@ 0x33
 80039bc:	f7fe f964 	bl	8001c88 <VL53L0X_ReadRangeContinuous>
 80039c0:	4603      	mov	r3, r0
 80039c2:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(1);
 80039c4:	2001      	movs	r0, #1
 80039c6:	f000 ff63 	bl	8004890 <HAL_Delay>
		if(status != 0) {
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <LidarTask+0x1d0>
		  distance4 = 1000;  // Invalid reading due to error
 80039d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039d4:	81bb      	strh	r3, [r7, #12]
 80039d6:	e006      	b.n	80039e6 <LidarTask+0x1de>
		}
		else if(distance4 > 1000) {
 80039d8:	89bb      	ldrh	r3, [r7, #12]
 80039da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039de:	d902      	bls.n	80039e6 <LidarTask+0x1de>
		  distance4 = 1000;  // Limit maximum distance to 500
 80039e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039e4:	81bb      	strh	r3, [r7, #12]
		}
		buffer4[buffer_index] = distance4;
 80039e6:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <LidarTask+0x244>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	89b9      	ldrh	r1, [r7, #12]
 80039ee:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <LidarTask+0x254>)
 80039f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		status = VL53L0X_ReadRangeContinuous(0x34, &distance5);
 80039f4:	f107 030a 	add.w	r3, r7, #10
 80039f8:	4619      	mov	r1, r3
 80039fa:	2034      	movs	r0, #52	@ 0x34
 80039fc:	f7fe f944 	bl	8001c88 <VL53L0X_ReadRangeContinuous>
 8003a00:	4603      	mov	r3, r0
 8003a02:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f000 ff43 	bl	8004890 <HAL_Delay>
		if(status != 0) {
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <LidarTask+0x210>
		  distance5 = 1000;  // Invalid reading due to error
 8003a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a14:	817b      	strh	r3, [r7, #10]
 8003a16:	e006      	b.n	8003a26 <LidarTask+0x21e>
		}
		else if(distance5 > 1000) {
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a1e:	d902      	bls.n	8003a26 <LidarTask+0x21e>
		  distance5 = 1000;  // Limit maximum distance to 500
 8003a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a24:	817b      	strh	r3, [r7, #10]
		}
		buffer5[buffer_index] = distance5;
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <LidarTask+0x244>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	8979      	ldrh	r1, [r7, #10]
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <LidarTask+0x258>)
 8003a30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		// Calculate averages
		for(int i = 0; i < FILTER_SIZE; i++) {
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	e03f      	b.n	8003aba <LidarTask+0x2b2>
 8003a3a:	bf00      	nop
 8003a3c:	0800e254 	.word	0x0800e254
 8003a40:	20000108 	.word	0x20000108
 8003a44:	200005c4 	.word	0x200005c4
 8003a48:	48000800 	.word	0x48000800
 8003a4c:	20000240 	.word	0x20000240
 8003a50:	200001dc 	.word	0x200001dc
 8003a54:	200001f0 	.word	0x200001f0
 8003a58:	20000204 	.word	0x20000204
 8003a5c:	20000218 	.word	0x20000218
 8003a60:	2000022c 	.word	0x2000022c
			sum1 += buffer1[i];
 8003a64:	4a44      	ldr	r2, [pc, #272]	@ (8003b78 <LidarTask+0x370>)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a70:	4413      	add	r3, r2
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
			sum2 += buffer2[i];
 8003a74:	4a41      	ldr	r2, [pc, #260]	@ (8003b7c <LidarTask+0x374>)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	4413      	add	r3, r2
 8003a82:	633b      	str	r3, [r7, #48]	@ 0x30
			sum3 += buffer3[i];
 8003a84:	4a3e      	ldr	r2, [pc, #248]	@ (8003b80 <LidarTask+0x378>)
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a90:	4413      	add	r3, r2
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
			sum4 += buffer4[i];
 8003a94:	4a3b      	ldr	r2, [pc, #236]	@ (8003b84 <LidarTask+0x37c>)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	4413      	add	r3, r2
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
			sum5 += buffer5[i];
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <LidarTask+0x380>)
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	4413      	add	r3, r2
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i = 0; i < FILTER_SIZE; i++) {
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	623b      	str	r3, [r7, #32]
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b09      	cmp	r3, #9
 8003abe:	ddd1      	ble.n	8003a64 <LidarTask+0x25c>
		}

		filtered_dist1 = sum1 / FILTER_SIZE;
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac2:	4a32      	ldr	r2, [pc, #200]	@ (8003b8c <LidarTask+0x384>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	83bb      	strh	r3, [r7, #28]
		filtered_dist2 = sum2 / FILTER_SIZE;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	4a2f      	ldr	r2, [pc, #188]	@ (8003b8c <LidarTask+0x384>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	837b      	strh	r3, [r7, #26]
		filtered_dist3 = sum3 / FILTER_SIZE;
 8003ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <LidarTask+0x384>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	833b      	strh	r3, [r7, #24]
		filtered_dist4 = sum4 / FILTER_SIZE;
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <LidarTask+0x384>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	08db      	lsrs	r3, r3, #3
 8003aee:	82fb      	strh	r3, [r7, #22]
		filtered_dist5 = sum5 / FILTER_SIZE;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <LidarTask+0x384>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	08db      	lsrs	r3, r3, #3
 8003afa:	82bb      	strh	r3, [r7, #20]

		// Update buffer index
		buffer_index = (buffer_index + 1) % FILTER_SIZE;
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <LidarTask+0x388>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <LidarTask+0x38c>)
 8003b04:	fb83 1302 	smull	r1, r3, r3, r2
 8003b08:	1099      	asrs	r1, r3, #2
 8003b0a:	17d3      	asrs	r3, r2, #31
 8003b0c:	1ac9      	subs	r1, r1, r3
 8003b0e:	460b      	mov	r3, r1
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	1ad1      	subs	r1, r2, r3
 8003b18:	b2ca      	uxtb	r2, r1
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <LidarTask+0x388>)
 8003b1c:	701a      	strb	r2, [r3, #0]
		//	//	      	     Output filtered distances in cm
		//	sprintf(uart_buf, "%d ---- %d ---- %d ---- %d ---- %d\r\n",
		//			filtered_dist1/10, filtered_dist2/10, filtered_dist3/10, filtered_dist4/10, filtered_dist5/10);
		//	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);

		filteredDistances[0] = filtered_dist1/10;
 8003b1e:	8bbb      	ldrh	r3, [r7, #28]
 8003b20:	4a1a      	ldr	r2, [pc, #104]	@ (8003b8c <LidarTask+0x384>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <LidarTask+0x390>)
 8003b2c:	801a      	strh	r2, [r3, #0]
		filteredDistances[1] = filtered_dist2/10;
 8003b2e:	8b7b      	ldrh	r3, [r7, #26]
 8003b30:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <LidarTask+0x384>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	08db      	lsrs	r3, r3, #3
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	4b17      	ldr	r3, [pc, #92]	@ (8003b98 <LidarTask+0x390>)
 8003b3c:	805a      	strh	r2, [r3, #2]
		filteredDistances[2] = filtered_dist3/10;
 8003b3e:	8b3b      	ldrh	r3, [r7, #24]
 8003b40:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <LidarTask+0x384>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	08db      	lsrs	r3, r3, #3
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <LidarTask+0x390>)
 8003b4c:	809a      	strh	r2, [r3, #4]
		filteredDistances[3] = filtered_dist4/10;
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	4a0e      	ldr	r2, [pc, #56]	@ (8003b8c <LidarTask+0x384>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <LidarTask+0x390>)
 8003b5c:	80da      	strh	r2, [r3, #6]
		filteredDistances[4] = filtered_dist5/10;
 8003b5e:	8abb      	ldrh	r3, [r7, #20]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <LidarTask+0x384>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <LidarTask+0x390>)
 8003b6c:	811a      	strh	r2, [r3, #8]
		osDelay(1);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f006 fbea 	bl	800a348 <osDelay>
	{
 8003b74:	e6b4      	b.n	80038e0 <LidarTask+0xd8>
 8003b76:	bf00      	nop
 8003b78:	200001dc 	.word	0x200001dc
 8003b7c:	200001f0 	.word	0x200001f0
 8003b80:	20000204 	.word	0x20000204
 8003b84:	20000218 	.word	0x20000218
 8003b88:	2000022c 	.word	0x2000022c
 8003b8c:	cccccccd 	.word	0xcccccccd
 8003b90:	20000240 	.word	0x20000240
 8003b94:	66666667 	.word	0x66666667
 8003b98:	200001d0 	.word	0x200001d0

08003b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba0:	b672      	cpsid	i
}
 8003ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <Error_Handler+0x8>

08003ba8 <servo_init>:
#include "servo.h"

void servo_init(TIM_HandleTypeDef* htim, uint32_t channel){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f003 fea7 	bl	8007908 <HAL_TIM_PWM_Start>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <setServoAngle>:

void setServoAngle(TIM_HandleTypeDef* htim, uint32_t channel, uint8_t angle)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	71fb      	strb	r3, [r7, #7]
    // Limit angle to 0-180 degrees
    if(angle > 180) angle = 180;
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2bb4      	cmp	r3, #180	@ 0xb4
 8003bd6:	d901      	bls.n	8003bdc <setServoAngle+0x18>
 8003bd8:	23b4      	movs	r3, #180	@ 0xb4
 8003bda:	71fb      	strb	r3, [r7, #7]

    // Convert angle to pulse width (200-400 counts)
    // 200 counts = 0 degrees, 400 counts = 180 degrees
    uint32_t pulse = (angle * 230) / 180 +170;
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	22e6      	movs	r2, #230	@ 0xe6
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <setServoAngle+0x98>)
 8003be6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bea:	441a      	add	r2, r3
 8003bec:	11d2      	asrs	r2, r2, #7
 8003bee:	17db      	asrs	r3, r3, #31
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	33aa      	adds	r3, #170	@ 0xaa
 8003bf4:	617b      	str	r3, [r7, #20]

    // Update PWM duty cycle
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <setServoAngle+0x42>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003c04:	e023      	b.n	8003c4e <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d104      	bne.n	8003c16 <setServoAngle+0x52>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003c14:	e01b      	b.n	8003c4e <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d104      	bne.n	8003c26 <setServoAngle+0x62>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003c24:	e013      	b.n	8003c4e <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d104      	bne.n	8003c36 <setServoAngle+0x72>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003c34:	e00b      	b.n	8003c4e <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d104      	bne.n	8003c46 <setServoAngle+0x82>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8003c44:	e003      	b.n	8003c4e <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	b60b60b7 	.word	0xb60b60b7

08003c60 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af04      	add	r7, sp, #16
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	9302      	str	r3, [sp, #8]
 8003c70:	2301      	movs	r3, #1
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	1cfb      	adds	r3, r7, #3
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2178      	movs	r1, #120	@ 0x78
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f001 fc56 	bl	8005530 <HAL_I2C_Mem_Write>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003c98:	2064      	movs	r0, #100	@ 0x64
 8003c9a:	f000 fdf9 	bl	8004890 <HAL_Delay>
    int status = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8003ca2:	21ae      	movs	r1, #174	@ 0xae
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ffdb 	bl	8003c60 <ssd1306_WriteCommand>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ffd2 	bl	8003c60 <ssd1306_WriteCommand>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffc9 	bl	8003c60 <ssd1306_WriteCommand>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8003cd8:	21b0      	movs	r1, #176	@ 0xb0
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffc0 	bl	8003c60 <ssd1306_WriteCommand>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8003cea:	21c8      	movs	r1, #200	@ 0xc8
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffb7 	bl	8003c60 <ssd1306_WriteCommand>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ffae 	bl	8003c60 <ssd1306_WriteCommand>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8003d0e:	2110      	movs	r1, #16
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ffa5 	bl	8003c60 <ssd1306_WriteCommand>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8003d20:	2140      	movs	r1, #64	@ 0x40
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff9c 	bl	8003c60 <ssd1306_WriteCommand>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8003d32:	2181      	movs	r1, #129	@ 0x81
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff93 	bl	8003c60 <ssd1306_WriteCommand>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8003d44:	21ff      	movs	r1, #255	@ 0xff
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ff8a 	bl	8003c60 <ssd1306_WriteCommand>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8003d56:	21a1      	movs	r1, #161	@ 0xa1
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff81 	bl	8003c60 <ssd1306_WriteCommand>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8003d68:	21a6      	movs	r1, #166	@ 0xa6
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff78 	bl	8003c60 <ssd1306_WriteCommand>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8003d7a:	21a8      	movs	r1, #168	@ 0xa8
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff6f 	bl	8003c60 <ssd1306_WriteCommand>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8003d8c:	213f      	movs	r1, #63	@ 0x3f
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff66 	bl	8003c60 <ssd1306_WriteCommand>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003d9e:	21a4      	movs	r1, #164	@ 0xa4
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff5d 	bl	8003c60 <ssd1306_WriteCommand>
 8003da6:	4603      	mov	r3, r0
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8003db0:	21d3      	movs	r1, #211	@ 0xd3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ff54 	bl	8003c60 <ssd1306_WriteCommand>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff4b 	bl	8003c60 <ssd1306_WriteCommand>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8003dd4:	21d5      	movs	r1, #213	@ 0xd5
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff42 	bl	8003c60 <ssd1306_WriteCommand>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8003de6:	21f0      	movs	r1, #240	@ 0xf0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff39 	bl	8003c60 <ssd1306_WriteCommand>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8003df8:	21d9      	movs	r1, #217	@ 0xd9
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff30 	bl	8003c60 <ssd1306_WriteCommand>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8003e0a:	2122      	movs	r1, #34	@ 0x22
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff27 	bl	8003c60 <ssd1306_WriteCommand>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8003e1c:	21da      	movs	r1, #218	@ 0xda
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff1e 	bl	8003c60 <ssd1306_WriteCommand>
 8003e24:	4603      	mov	r3, r0
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8003e2e:	2112      	movs	r1, #18
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff15 	bl	8003c60 <ssd1306_WriteCommand>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003e40:	21db      	movs	r1, #219	@ 0xdb
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff0c 	bl	8003c60 <ssd1306_WriteCommand>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8003e52:	2120      	movs	r1, #32
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff03 	bl	8003c60 <ssd1306_WriteCommand>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8003e64:	218d      	movs	r1, #141	@ 0x8d
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fefa 	bl	8003c60 <ssd1306_WriteCommand>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8003e76:	2114      	movs	r1, #20
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fef1 	bl	8003c60 <ssd1306_WriteCommand>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461a      	mov	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003e88:	21af      	movs	r1, #175	@ 0xaf
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fee8 	bl	8003c60 <ssd1306_WriteCommand>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <ssd1306_Init+0x214>
        return 1;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e00f      	b.n	8003ec4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f000 f813 	bl	8003ed0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f834 	bl	8003f18 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <ssd1306_Init+0x23c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <ssd1306_Init+0x23c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	@ (8003ecc <ssd1306_Init+0x23c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	715a      	strb	r2, [r3, #5]

    return 0;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000a68 	.word	0x20000a68

08003ed0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e00d      	b.n	8003efc <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <ssd1306_Fill+0x1a>
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	e000      	b.n	8003eec <ssd1306_Fill+0x1c>
 8003eea:	21ff      	movs	r1, #255	@ 0xff
 8003eec:	4a09      	ldr	r2, [pc, #36]	@ (8003f14 <ssd1306_Fill+0x44>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d3ed      	bcc.n	8003ee0 <ssd1306_Fill+0x10>
    }
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000668 	.word	0x20000668

08003f18 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af04      	add	r7, sp, #16
 8003f1e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e020      	b.n	8003f68 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	3b50      	subs	r3, #80	@ 0x50
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fe96 	bl	8003c60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8003f34:	2100      	movs	r1, #0
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe92 	bl	8003c60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003f3c:	2110      	movs	r1, #16
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fe8e 	bl	8003c60 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	01db      	lsls	r3, r3, #7
 8003f48:	4a0b      	ldr	r2, [pc, #44]	@ (8003f78 <ssd1306_UpdateScreen+0x60>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	2264      	movs	r2, #100	@ 0x64
 8003f4e:	9202      	str	r2, [sp, #8]
 8003f50:	2280      	movs	r2, #128	@ 0x80
 8003f52:	9201      	str	r2, [sp, #4]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2301      	movs	r3, #1
 8003f58:	2240      	movs	r2, #64	@ 0x40
 8003f5a:	2178      	movs	r1, #120	@ 0x78
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 fae7 	bl	8005530 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3301      	adds	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d9db      	bls.n	8003f26 <ssd1306_UpdateScreen+0xe>
    }
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000668 	.word	0x20000668

08003f7c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
 8003f86:	460b      	mov	r3, r1
 8003f88:	71bb      	strb	r3, [r7, #6]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db48      	blt.n	8004028 <ssd1306_DrawPixel+0xac>
 8003f96:	79bb      	ldrb	r3, [r7, #6]
 8003f98:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f9a:	d845      	bhi.n	8004028 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003f9c:	4b25      	ldr	r3, [pc, #148]	@ (8004034 <ssd1306_DrawPixel+0xb8>)
 8003f9e:	791b      	ldrb	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d006      	beq.n	8003fb2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8003fa4:	797b      	ldrb	r3, [r7, #5]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003fb2:	797b      	ldrb	r3, [r7, #5]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d11a      	bne.n	8003fee <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003fb8:	79fa      	ldrb	r2, [r7, #7]
 8003fba:	79bb      	ldrb	r3, [r7, #6]
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	b2d8      	uxtb	r0, r3
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	01db      	lsls	r3, r3, #7
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <ssd1306_DrawPixel+0xbc>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	79bb      	ldrb	r3, [r7, #6]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b259      	sxtb	r1, r3
 8003fde:	79fa      	ldrb	r2, [r7, #7]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b2c9      	uxtb	r1, r1
 8003fe8:	4a13      	ldr	r2, [pc, #76]	@ (8004038 <ssd1306_DrawPixel+0xbc>)
 8003fea:	54d1      	strb	r1, [r2, r3]
 8003fec:	e01d      	b.n	800402a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003fee:	79fa      	ldrb	r2, [r7, #7]
 8003ff0:	79bb      	ldrb	r3, [r7, #6]
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	b2d8      	uxtb	r0, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	01db      	lsls	r3, r3, #7
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8004038 <ssd1306_DrawPixel+0xbc>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	b25a      	sxtb	r2, r3
 8004002:	79bb      	ldrb	r3, [r7, #6]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	b25b      	sxtb	r3, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	b25b      	sxtb	r3, r3
 8004014:	4013      	ands	r3, r2
 8004016:	b259      	sxtb	r1, r3
 8004018:	79fa      	ldrb	r2, [r7, #7]
 800401a:	4603      	mov	r3, r0
 800401c:	01db      	lsls	r3, r3, #7
 800401e:	4413      	add	r3, r2
 8004020:	b2c9      	uxtb	r1, r1
 8004022:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <ssd1306_DrawPixel+0xbc>)
 8004024:	54d1      	strb	r1, [r2, r3]
 8004026:	e000      	b.n	800402a <ssd1306_DrawPixel+0xae>
        return;
 8004028:	bf00      	nop
    }
}
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	20000a68 	.word	0x20000a68
 8004038:	20000668 	.word	0x20000668

0800403c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b089      	sub	sp, #36	@ 0x24
 8004040:	af00      	add	r7, sp, #0
 8004042:	4604      	mov	r4, r0
 8004044:	1d38      	adds	r0, r7, #4
 8004046:	e880 0006 	stmia.w	r0, {r1, r2}
 800404a:	461a      	mov	r2, r3
 800404c:	4623      	mov	r3, r4
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	4613      	mov	r3, r2
 8004052:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004054:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	793b      	ldrb	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004060:	dc06      	bgt.n	8004070 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004062:	4b35      	ldr	r3, [pc, #212]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 8004064:	885b      	ldrh	r3, [r3, #2]
 8004066:	461a      	mov	r2, r3
 8004068:	797b      	ldrb	r3, [r7, #5]
 800406a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800406c:	2b3f      	cmp	r3, #63	@ 0x3f
 800406e:	dd01      	ble.n	8004074 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8004070:	2300      	movs	r3, #0
 8004072:	e05c      	b.n	800412e <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e04c      	b.n	8004114 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	3b20      	subs	r3, #32
 8004080:	7979      	ldrb	r1, [r7, #5]
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4619      	mov	r1, r3
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	440b      	add	r3, r1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e034      	b.n	8004104 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80040aa:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	b2d8      	uxtb	r0, r3
 80040b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 80040ba:	885b      	ldrh	r3, [r3, #2]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	7bba      	ldrb	r2, [r7, #14]
 80040c8:	4619      	mov	r1, r3
 80040ca:	f7ff ff57 	bl	8003f7c <ssd1306_DrawPixel>
 80040ce:	e016      	b.n	80040fe <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80040d0:	4b19      	ldr	r3, [pc, #100]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	4413      	add	r3, r2
 80040dc:	b2d8      	uxtb	r0, r3
 80040de:	4b16      	ldr	r3, [pc, #88]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 80040e0:	885b      	ldrh	r3, [r3, #2]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	b2d9      	uxtb	r1, r3
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	f7ff ff3f 	bl	8003f7c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	3301      	adds	r3, #1
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	793b      	ldrb	r3, [r7, #4]
 8004106:	461a      	mov	r2, r3
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	4293      	cmp	r3, r2
 800410c:	d3c5      	bcc.n	800409a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	797b      	ldrb	r3, [r7, #5]
 8004116:	461a      	mov	r2, r3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4293      	cmp	r3, r2
 800411c:	d3ad      	bcc.n	800407a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	793a      	ldrb	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	b29a      	uxth	r2, r3
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <ssd1306_WriteChar+0xfc>)
 800412a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3724      	adds	r7, #36	@ 0x24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	bf00      	nop
 8004138:	20000a68 	.word	0x20000a68

0800413c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	1d38      	adds	r0, r7, #4
 8004146:	e880 0006 	stmia.w	r0, {r1, r2}
 800414a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800414c:	e012      	b.n	8004174 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	7818      	ldrb	r0, [r3, #0]
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	1d3a      	adds	r2, r7, #4
 8004156:	ca06      	ldmia	r2, {r1, r2}
 8004158:	f7ff ff70 	bl	800403c <ssd1306_WriteChar>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d002      	beq.n	800416e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	e008      	b.n	8004180 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
    while (*str)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e8      	bne.n	800414e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	781b      	ldrb	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	460a      	mov	r2, r1
 8004192:	71fb      	strb	r3, [r7, #7]
 8004194:	4613      	mov	r3, r2
 8004196:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	b29a      	uxth	r2, r3
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <ssd1306_SetCursor+0x2c>)
 800419e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80041a0:	79bb      	ldrb	r3, [r7, #6]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <ssd1306_SetCursor+0x2c>)
 80041a6:	805a      	strh	r2, [r3, #2]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20000a68 	.word	0x20000a68

080041b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <HAL_MspInit+0x4c>)
 80041c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c2:	4a10      	ldr	r2, [pc, #64]	@ (8004204 <HAL_MspInit+0x4c>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80041ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_MspInit+0x4c>)
 80041cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_MspInit+0x4c>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <HAL_MspInit+0x4c>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_MspInit+0x4c>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	210f      	movs	r1, #15
 80041f2:	f06f 0001 	mvn.w	r0, #1
 80041f6:	f000 fc4a 	bl	8004a8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b0ae      	sub	sp, #184	@ 0xb8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004220:	f107 031c 	add.w	r3, r7, #28
 8004224:	2288      	movs	r2, #136	@ 0x88
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f009 f951 	bl	800d4d0 <memset>
  if(hi2c->Instance==I2C1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a42      	ldr	r2, [pc, #264]	@ (800433c <HAL_I2C_MspInit+0x134>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d13c      	bne.n	80042b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004238:	2340      	movs	r3, #64	@ 0x40
 800423a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800423c:	2300      	movs	r3, #0
 800423e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004240:	f107 031c 	add.w	r3, r7, #28
 8004244:	4618      	mov	r0, r3
 8004246:	f002 fdeb 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004250:	f7ff fca4 	bl	8003b9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004254:	4b3a      	ldr	r3, [pc, #232]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	4a39      	ldr	r2, [pc, #228]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004260:	4b37      	ldr	r3, [pc, #220]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 8004262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800426c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004274:	2312      	movs	r3, #18
 8004276:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800427a:	2301      	movs	r3, #1
 800427c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004286:	2304      	movs	r3, #4
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004290:	4619      	mov	r1, r3
 8004292:	482c      	ldr	r0, [pc, #176]	@ (8004344 <HAL_I2C_MspInit+0x13c>)
 8004294:	f000 fcb0 	bl	8004bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004298:	4b29      	ldr	r3, [pc, #164]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	4a28      	ldr	r2, [pc, #160]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 800429e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a4:	4b26      	ldr	r3, [pc, #152]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80042b0:	e040      	b.n	8004334 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a24      	ldr	r2, [pc, #144]	@ (8004348 <HAL_I2C_MspInit+0x140>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d13b      	bne.n	8004334 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80042bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80042c2:	2300      	movs	r3, #0
 80042c4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fda8 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80042d6:	f7ff fc61 	bl	8003b9c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042da:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	4a18      	ldr	r2, [pc, #96]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 80042e0:	f043 0304 	orr.w	r3, r3, #4
 80042e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042e6:	4b16      	ldr	r3, [pc, #88]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042f2:	2303      	movs	r3, #3
 80042f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f8:	2312      	movs	r3, #18
 80042fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042fe:	2301      	movs	r3, #1
 8004300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004304:	2303      	movs	r3, #3
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800430a:	2304      	movs	r3, #4
 800430c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004310:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004314:	4619      	mov	r1, r3
 8004316:	480d      	ldr	r0, [pc, #52]	@ (800434c <HAL_I2C_MspInit+0x144>)
 8004318:	f000 fc6e 	bl	8004bf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800431c:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004320:	4a07      	ldr	r2, [pc, #28]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 8004322:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004326:	6593      	str	r3, [r2, #88]	@ 0x58
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_I2C_MspInit+0x138>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	bf00      	nop
 8004336:	37b8      	adds	r7, #184	@ 0xb8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40005400 	.word	0x40005400
 8004340:	40021000 	.word	0x40021000
 8004344:	48000400 	.word	0x48000400
 8004348:	40005c00 	.word	0x40005c00
 800434c:	48000800 	.word	0x48000800

08004350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	@ 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <HAL_TIM_Base_MspInit+0xc8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10c      	bne.n	800437c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004362:	4b2e      	ldr	r3, [pc, #184]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	4a2d      	ldr	r2, [pc, #180]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 8004368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800436c:	6613      	str	r3, [r2, #96]	@ 0x60
 800436e:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800437a:	e046      	b.n	800440a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004384:	d10c      	bne.n	80043a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004386:	4b25      	ldr	r3, [pc, #148]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	4a24      	ldr	r2, [pc, #144]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6593      	str	r3, [r2, #88]	@ 0x58
 8004392:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	69bb      	ldr	r3, [r7, #24]
}
 800439e:	e034      	b.n	800440a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_TIM_Base_MspInit+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10c      	bne.n	80043c4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043aa:	4b1c      	ldr	r3, [pc, #112]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ae:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b6:	4b19      	ldr	r3, [pc, #100]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]
}
 80043c2:	e022      	b.n	800440a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10c      	bne.n	80043e8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043ce:	4b13      	ldr	r3, [pc, #76]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	4a12      	ldr	r2, [pc, #72]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043da:	4b10      	ldr	r3, [pc, #64]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]
}
 80043e6:	e010      	b.n	800440a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004428 <HAL_TIM_Base_MspInit+0xd8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10b      	bne.n	800440a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	4a09      	ldr	r2, [pc, #36]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <HAL_TIM_Base_MspInit+0xcc>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
}
 800440a:	bf00      	nop
 800440c:	3724      	adds	r7, #36	@ 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40021000 	.word	0x40021000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00

0800442c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	@ 0x30
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a46      	ldr	r2, [pc, #280]	@ (8004564 <HAL_TIM_MspPostInit+0x138>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d11e      	bne.n	800448c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444e:	4b46      	ldr	r3, [pc, #280]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	4a45      	ldr	r2, [pc, #276]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800445a:	4b43      	ldr	r3, [pc, #268]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800446a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	2300      	movs	r3, #0
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004478:	2301      	movs	r3, #1
 800447a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447c:	f107 031c 	add.w	r3, r7, #28
 8004480:	4619      	mov	r1, r3
 8004482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004486:	f000 fbb7 	bl	8004bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800448a:	e066      	b.n	800455a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004494:	d11d      	bne.n	80044d2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004496:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449a:	4a33      	ldr	r2, [pc, #204]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044a2:	4b31      	ldr	r3, [pc, #196]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 80044a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044ae:	2320      	movs	r3, #32
 80044b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ba:	2300      	movs	r3, #0
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044be:	2301      	movs	r3, #1
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	f107 031c 	add.w	r3, r7, #28
 80044c6:	4619      	mov	r1, r3
 80044c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044cc:	f000 fb94 	bl	8004bf8 <HAL_GPIO_Init>
}
 80044d0:	e043      	b.n	800455a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a25      	ldr	r2, [pc, #148]	@ (800456c <HAL_TIM_MspPostInit+0x140>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d11d      	bne.n	8004518 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044dc:	4b22      	ldr	r3, [pc, #136]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 80044de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e0:	4a21      	ldr	r2, [pc, #132]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 80044ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044f4:	23c0      	movs	r3, #192	@ 0xc0
 80044f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f8:	2302      	movs	r3, #2
 80044fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004500:	2300      	movs	r3, #0
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004504:	2302      	movs	r3, #2
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	f107 031c 	add.w	r3, r7, #28
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004512:	f000 fb71 	bl	8004bf8 <HAL_GPIO_Init>
}
 8004516:	e020      	b.n	800455a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <HAL_TIM_MspPostInit+0x144>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d11b      	bne.n	800455a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004522:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 8004524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004526:	4a10      	ldr	r2, [pc, #64]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <HAL_TIM_MspPostInit+0x13c>)
 8004530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800453a:	2340      	movs	r3, #64	@ 0x40
 800453c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004546:	2300      	movs	r3, #0
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800454a:	2302      	movs	r3, #2
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454e:	f107 031c 	add.w	r3, r7, #28
 8004552:	4619      	mov	r1, r3
 8004554:	4807      	ldr	r0, [pc, #28]	@ (8004574 <HAL_TIM_MspPostInit+0x148>)
 8004556:	f000 fb4f 	bl	8004bf8 <HAL_GPIO_Init>
}
 800455a:	bf00      	nop
 800455c:	3730      	adds	r7, #48	@ 0x30
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	48000400 	.word	0x48000400

08004578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b0ac      	sub	sp, #176	@ 0xb0
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	2288      	movs	r2, #136	@ 0x88
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f008 ff99 	bl	800d4d0 <memset>
  if(huart->Instance==USART2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a25      	ldr	r2, [pc, #148]	@ (8004638 <HAL_UART_MspInit+0xc0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d143      	bne.n	8004630 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045a8:	2302      	movs	r3, #2
 80045aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80045ac:	2300      	movs	r3, #0
 80045ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4618      	mov	r0, r3
 80045b6:	f002 fc33 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80045c0:	f7ff faec 	bl	8003b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <HAL_UART_MspInit+0xc4>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c8:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <HAL_UART_MspInit+0xc4>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80045d0:	4b1a      	ldr	r3, [pc, #104]	@ (800463c <HAL_UART_MspInit+0xc4>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045dc:	4b17      	ldr	r3, [pc, #92]	@ (800463c <HAL_UART_MspInit+0xc4>)
 80045de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e0:	4a16      	ldr	r2, [pc, #88]	@ (800463c <HAL_UART_MspInit+0xc4>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045e8:	4b14      	ldr	r3, [pc, #80]	@ (800463c <HAL_UART_MspInit+0xc4>)
 80045ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80045f4:	230c      	movs	r3, #12
 80045f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fa:	2302      	movs	r3, #2
 80045fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004606:	2303      	movs	r3, #3
 8004608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800460c:	2307      	movs	r3, #7
 800460e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004612:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004616:	4619      	mov	r1, r3
 8004618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800461c:	f000 faec 	bl	8004bf8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004620:	2200      	movs	r2, #0
 8004622:	2105      	movs	r1, #5
 8004624:	2026      	movs	r0, #38	@ 0x26
 8004626:	f000 fa32 	bl	8004a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800462a:	2026      	movs	r0, #38	@ 0x26
 800462c:	f000 fa4b 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004630:	bf00      	nop
 8004632:	37b0      	adds	r7, #176	@ 0xb0
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40004400 	.word	0x40004400
 800463c:	40021000 	.word	0x40021000

08004640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <NMI_Handler+0x4>

08004648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <HardFault_Handler+0x4>

08004650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <MemManage_Handler+0x4>

08004658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <BusFault_Handler+0x4>

08004660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <UsageFault_Handler+0x4>

08004668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800467a:	f000 f8e9 	bl	8004850 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800467e:	f007 fa8b 	bl	800bb98 <xTaskGetSchedulerState>
 8004682:	4603      	mov	r3, r0
 8004684:	2b01      	cmp	r3, #1
 8004686:	d001      	beq.n	800468c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004688:	f008 f886 	bl	800c798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}

08004690 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004694:	2080      	movs	r0, #128	@ 0x80
 8004696:	f000 fc89 	bl	8004fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046a4:	4802      	ldr	r0, [pc, #8]	@ (80046b0 <USART2_IRQHandler+0x10>)
 80046a6:	f004 fa79 	bl	8008b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200005c4 	.word	0x200005c4

080046b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046bc:	4a14      	ldr	r2, [pc, #80]	@ (8004710 <_sbrk+0x5c>)
 80046be:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <_sbrk+0x60>)
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046c8:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <_sbrk+0x64>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046d0:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <_sbrk+0x64>)
 80046d2:	4a12      	ldr	r2, [pc, #72]	@ (800471c <_sbrk+0x68>)
 80046d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046d6:	4b10      	ldr	r3, [pc, #64]	@ (8004718 <_sbrk+0x64>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d207      	bcs.n	80046f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046e4:	f008 ff0e 	bl	800d504 <__errno>
 80046e8:	4603      	mov	r3, r0
 80046ea:	220c      	movs	r2, #12
 80046ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	e009      	b.n	8004708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046f4:	4b08      	ldr	r3, [pc, #32]	@ (8004718 <_sbrk+0x64>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046fa:	4b07      	ldr	r3, [pc, #28]	@ (8004718 <_sbrk+0x64>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	4a05      	ldr	r2, [pc, #20]	@ (8004718 <_sbrk+0x64>)
 8004704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20018000 	.word	0x20018000
 8004714:	00000400 	.word	0x00000400
 8004718:	20000a70 	.word	0x20000a70
 800471c:	200024c8 	.word	0x200024c8

08004720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <SystemInit+0x20>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	4a05      	ldr	r2, [pc, #20]	@ (8004740 <SystemInit+0x20>)
 800472c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800477c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004748:	f7ff ffea 	bl	8004720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800474c:	480c      	ldr	r0, [pc, #48]	@ (8004780 <LoopForever+0x6>)
  ldr r1, =_edata
 800474e:	490d      	ldr	r1, [pc, #52]	@ (8004784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004750:	4a0d      	ldr	r2, [pc, #52]	@ (8004788 <LoopForever+0xe>)
  movs r3, #0
 8004752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004754:	e002      	b.n	800475c <LoopCopyDataInit>

08004756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800475a:	3304      	adds	r3, #4

0800475c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800475c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800475e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004760:	d3f9      	bcc.n	8004756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004762:	4a0a      	ldr	r2, [pc, #40]	@ (800478c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004764:	4c0a      	ldr	r4, [pc, #40]	@ (8004790 <LoopForever+0x16>)
  movs r3, #0
 8004766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004768:	e001      	b.n	800476e <LoopFillZerobss>

0800476a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800476a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800476c:	3204      	adds	r2, #4

0800476e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800476e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004770:	d3fb      	bcc.n	800476a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004772:	f008 fecd 	bl	800d510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004776:	f7fe fa69 	bl	8002c4c <main>

0800477a <LoopForever>:

LoopForever:
    b LoopForever
 800477a:	e7fe      	b.n	800477a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800477c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004784:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004788:	0800f16c 	.word	0x0800f16c
  ldr r2, =_sbss
 800478c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004790:	200024c8 	.word	0x200024c8

08004794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004794:	e7fe      	b.n	8004794 <ADC1_2_IRQHandler>
	...

08004798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <HAL_Init+0x3c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a0b      	ldr	r2, [pc, #44]	@ (80047d4 <HAL_Init+0x3c>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ae:	2003      	movs	r0, #3
 80047b0:	f000 f962 	bl	8004a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b4:	200f      	movs	r0, #15
 80047b6:	f000 f80f 	bl	80047d8 <HAL_InitTick>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	71fb      	strb	r3, [r7, #7]
 80047c4:	e001      	b.n	80047ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047c6:	f7ff fcf7 	bl	80041b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047ca:	79fb      	ldrb	r3, [r7, #7]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40022000 	.word	0x40022000

080047d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80047e4:	4b17      	ldr	r3, [pc, #92]	@ (8004844 <HAL_InitTick+0x6c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d023      	beq.n	8004834 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047ec:	4b16      	ldr	r3, [pc, #88]	@ (8004848 <HAL_InitTick+0x70>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <HAL_InitTick+0x6c>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	4619      	mov	r1, r3
 80047f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f96d 	bl	8004ae2 <HAL_SYSTICK_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b0f      	cmp	r3, #15
 8004812:	d809      	bhi.n	8004828 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004814:	2200      	movs	r2, #0
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	f000 f937 	bl	8004a8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004820:	4a0a      	ldr	r2, [pc, #40]	@ (800484c <HAL_InitTick+0x74>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e007      	b.n	8004838 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e004      	b.n	8004838 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e001      	b.n	8004838 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000014 	.word	0x20000014
 8004848:	2000000c 	.word	0x2000000c
 800484c:	20000010 	.word	0x20000010

08004850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004854:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_IncTick+0x20>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <HAL_IncTick+0x24>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4413      	add	r3, r2
 8004860:	4a04      	ldr	r2, [pc, #16]	@ (8004874 <HAL_IncTick+0x24>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000014 	.word	0x20000014
 8004874:	20000a74 	.word	0x20000a74

08004878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return uwTick;
 800487c:	4b03      	ldr	r3, [pc, #12]	@ (800488c <HAL_GetTick+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000a74 	.word	0x20000a74

08004890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004898:	f7ff ffee 	bl	8004878 <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d005      	beq.n	80048b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <HAL_Delay+0x44>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048b6:	bf00      	nop
 80048b8:	f7ff ffde 	bl	8004878 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d8f7      	bhi.n	80048b8 <HAL_Delay+0x28>
  {
  }
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000014 	.word	0x20000014

080048d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e8:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <__NVIC_SetPriorityGrouping+0x44>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800490a:	4a04      	ldr	r2, [pc, #16]	@ (800491c <__NVIC_SetPriorityGrouping+0x44>)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	60d3      	str	r3, [r2, #12]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <__NVIC_GetPriorityGrouping+0x18>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 0307 	and.w	r3, r3, #7
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	@ (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db0a      	blt.n	80049a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	490c      	ldr	r1, [pc, #48]	@ (80049c4 <__NVIC_SetPriority+0x4c>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	440b      	add	r3, r1
 800499c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a0:	e00a      	b.n	80049b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4908      	ldr	r1, [pc, #32]	@ (80049c8 <__NVIC_SetPriority+0x50>)
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3b04      	subs	r3, #4
 80049b0:	0112      	lsls	r2, r2, #4
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	761a      	strb	r2, [r3, #24]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	@ 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f1c3 0307 	rsb	r3, r3, #7
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	bf28      	it	cs
 80049ea:	2304      	movcs	r3, #4
 80049ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d902      	bls.n	80049fc <NVIC_EncodePriority+0x30>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3b03      	subs	r3, #3
 80049fa:	e000      	b.n	80049fe <NVIC_EncodePriority+0x32>
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	401a      	ands	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a14:	f04f 31ff 	mov.w	r1, #4294967295
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43d9      	mvns	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	4313      	orrs	r3, r2
         );
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	@ 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a44:	d301      	bcc.n	8004a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00f      	b.n	8004a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a74 <SysTick_Config+0x40>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a52:	210f      	movs	r1, #15
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	f7ff ff8e 	bl	8004978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <SysTick_Config+0x40>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <SysTick_Config+0x40>)
 8004a64:	2207      	movs	r2, #7
 8004a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	e000e010 	.word	0xe000e010

08004a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff29 	bl	80048d8 <__NVIC_SetPriorityGrouping>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa0:	f7ff ff3e 	bl	8004920 <__NVIC_GetPriorityGrouping>
 8004aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff ff8e 	bl	80049cc <NVIC_EncodePriority>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff5d 	bl	8004978 <__NVIC_SetPriority>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff31 	bl	800493c <__NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffa2 	bl	8004a34 <SysTick_Config>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d008      	beq.n	8004b24 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e022      	b.n	8004b6a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 020e 	bic.w	r2, r2, #14
 8004b32:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	f003 021c 	and.w	r2, r3, #28
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f202 	lsl.w	r2, r1, r2
 8004b56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d005      	beq.n	8004b9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e029      	b.n	8004bee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 020e 	bic.w	r2, r2, #14
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbe:	f003 021c 	and.w	r2, r3, #28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
    }
  }
  return status;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c06:	e17f      	b.n	8004f08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8171 	beq.w	8004f02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d005      	beq.n	8004c38 <HAL_GPIO_Init+0x40>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d130      	bne.n	8004c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	2203      	movs	r2, #3
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c6e:	2201      	movs	r2, #1
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 0201 	and.w	r2, r3, #1
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d118      	bne.n	8004cd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004cac:	2201      	movs	r2, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	f003 0201 	and.w	r2, r3, #1
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d017      	beq.n	8004d14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	2203      	movs	r2, #3
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d123      	bne.n	8004d68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	08da      	lsrs	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3208      	adds	r2, #8
 8004d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	220f      	movs	r2, #15
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	08da      	lsrs	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3208      	adds	r2, #8
 8004d62:	6939      	ldr	r1, [r7, #16]
 8004d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	2203      	movs	r2, #3
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0203 	and.w	r2, r3, #3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80ac 	beq.w	8004f02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004daa:	4b5f      	ldr	r3, [pc, #380]	@ (8004f28 <HAL_GPIO_Init+0x330>)
 8004dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dae:	4a5e      	ldr	r2, [pc, #376]	@ (8004f28 <HAL_GPIO_Init+0x330>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8004db6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f28 <HAL_GPIO_Init+0x330>)
 8004db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004dc2:	4a5a      	ldr	r2, [pc, #360]	@ (8004f2c <HAL_GPIO_Init+0x334>)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004dec:	d025      	beq.n	8004e3a <HAL_GPIO_Init+0x242>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4f      	ldr	r2, [pc, #316]	@ (8004f30 <HAL_GPIO_Init+0x338>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01f      	beq.n	8004e36 <HAL_GPIO_Init+0x23e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4e      	ldr	r2, [pc, #312]	@ (8004f34 <HAL_GPIO_Init+0x33c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d019      	beq.n	8004e32 <HAL_GPIO_Init+0x23a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4d      	ldr	r2, [pc, #308]	@ (8004f38 <HAL_GPIO_Init+0x340>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_GPIO_Init+0x236>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a4c      	ldr	r2, [pc, #304]	@ (8004f3c <HAL_GPIO_Init+0x344>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00d      	beq.n	8004e2a <HAL_GPIO_Init+0x232>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a4b      	ldr	r2, [pc, #300]	@ (8004f40 <HAL_GPIO_Init+0x348>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <HAL_GPIO_Init+0x22e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a4a      	ldr	r2, [pc, #296]	@ (8004f44 <HAL_GPIO_Init+0x34c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <HAL_GPIO_Init+0x22a>
 8004e1e:	2306      	movs	r3, #6
 8004e20:	e00c      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e22:	2307      	movs	r3, #7
 8004e24:	e00a      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e26:	2305      	movs	r3, #5
 8004e28:	e008      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	e006      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e004      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e002      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_GPIO_Init+0x244>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	f002 0203 	and.w	r2, r2, #3
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	4093      	lsls	r3, r2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e4c:	4937      	ldr	r1, [pc, #220]	@ (8004f2c <HAL_GPIO_Init+0x334>)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	3302      	adds	r3, #2
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e7e:	4a32      	ldr	r2, [pc, #200]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e84:	4b30      	ldr	r3, [pc, #192]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ea8:	4a27      	ldr	r2, [pc, #156]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004eae:	4b26      	ldr	r3, [pc, #152]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <HAL_GPIO_Init+0x350>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3301      	adds	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f47f ae78 	bne.w	8004c08 <HAL_GPIO_Init+0x10>
  }
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	48000400 	.word	0x48000400
 8004f34:	48000800 	.word	0x48000800
 8004f38:	48000c00 	.word	0x48000c00
 8004f3c:	48001000 	.word	0x48001000
 8004f40:	48001400 	.word	0x48001400
 8004f44:	48001800 	.word	0x48001800
 8004f48:	40010400 	.word	0x40010400

08004f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e001      	b.n	8004f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f8c:	787b      	ldrb	r3, [r7, #1]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f98:	e002      	b.n	8004fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fc2:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd f88c 	bl	80020e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40010400 	.word	0x40010400

08004fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e08d      	b.n	800510a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff f900 	bl	8004208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	@ 0x24
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800502c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800503c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	e006      	b.n	8005064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d108      	bne.n	800507e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507a:	605a      	str	r2, [r3, #4]
 800507c:	e007      	b.n	800508e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69d9      	ldr	r1, [r3, #28]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	460b      	mov	r3, r1
 8005122:	817b      	strh	r3, [r7, #10]
 8005124:	4613      	mov	r3, r2
 8005126:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b20      	cmp	r3, #32
 8005132:	f040 80fd 	bne.w	8005330 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_I2C_Master_Transmit+0x30>
 8005140:	2302      	movs	r3, #2
 8005142:	e0f6      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800514c:	f7ff fb94 	bl	8004878 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2319      	movs	r3, #25
 8005158:	2201      	movs	r2, #1
 800515a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fce0 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0e1      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2221      	movs	r2, #33	@ 0x21
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2210      	movs	r2, #16
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	893a      	ldrh	r2, [r7, #8]
 800518e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2bff      	cmp	r3, #255	@ 0xff
 800519e:	d906      	bls.n	80051ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	22ff      	movs	r2, #255	@ 0xff
 80051a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e007      	b.n	80051be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d024      	beq.n	8005210 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	8979      	ldrh	r1, [r7, #10]
 8005202:	4b4e      	ldr	r3, [pc, #312]	@ (800533c <HAL_I2C_Master_Transmit+0x228>)
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fedb 	bl	8005fc4 <I2C_TransferConfig>
 800520e:	e066      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	b2da      	uxtb	r2, r3
 8005216:	8979      	ldrh	r1, [r7, #10]
 8005218:	4b48      	ldr	r3, [pc, #288]	@ (800533c <HAL_I2C_Master_Transmit+0x228>)
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fed0 	bl	8005fc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005224:	e05b      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	6a39      	ldr	r1, [r7, #32]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fcd3 	bl	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e07b      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d034      	beq.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d130      	bne.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	2200      	movs	r2, #0
 8005284:	2180      	movs	r1, #128	@ 0x80
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fc4c 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e04d      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2bff      	cmp	r3, #255	@ 0xff
 800529e:	d90e      	bls.n	80052be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	22ff      	movs	r2, #255	@ 0xff
 80052a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	8979      	ldrh	r1, [r7, #10]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fe84 	bl	8005fc4 <I2C_TransferConfig>
 80052bc:	e00f      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	8979      	ldrh	r1, [r7, #10]
 80052d0:	2300      	movs	r3, #0
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fe73 	bl	8005fc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d19e      	bne.n	8005226 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	6a39      	ldr	r1, [r7, #32]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fcb9 	bl	8005c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e01a      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2220      	movs	r2, #32
 8005302:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <HAL_I2C_Master_Transmit+0x22c>)
 8005310:	400b      	ands	r3, r1
 8005312:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	80002000 	.word	0x80002000
 8005340:	fe00e800 	.word	0xfe00e800

08005344 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b20      	cmp	r3, #32
 8005362:	f040 80db 	bne.w	800551c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2C_Master_Receive+0x30>
 8005370:	2302      	movs	r3, #2
 8005372:	e0d4      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800537c:	f7ff fa7c 	bl	8004878 <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2319      	movs	r3, #25
 8005388:	2201      	movs	r2, #1
 800538a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fbc8 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0bf      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2222      	movs	r2, #34	@ 0x22
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2210      	movs	r2, #16
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	893a      	ldrh	r2, [r7, #8]
 80053be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2bff      	cmp	r3, #255	@ 0xff
 80053ce:	d90e      	bls.n	80053ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	8979      	ldrh	r1, [r7, #10]
 80053de:	4b52      	ldr	r3, [pc, #328]	@ (8005528 <HAL_I2C_Master_Receive+0x1e4>)
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fdec 	bl	8005fc4 <I2C_TransferConfig>
 80053ec:	e06d      	b.n	80054ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	8979      	ldrh	r1, [r7, #10]
 8005400:	4b49      	ldr	r3, [pc, #292]	@ (8005528 <HAL_I2C_Master_Receive+0x1e4>)
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fddb 	bl	8005fc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800540e:	e05c      	b.n	80054ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fc69 	bl	8005cec <I2C_WaitOnRXNEFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e07c      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d034      	beq.n	80054ca <HAL_I2C_Master_Receive+0x186>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	d130      	bne.n	80054ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	@ 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fb56 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e04d      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2bff      	cmp	r3, #255	@ 0xff
 800548a:	d90e      	bls.n	80054aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	22ff      	movs	r2, #255	@ 0xff
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	b2da      	uxtb	r2, r3
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fd8e 	bl	8005fc4 <I2C_TransferConfig>
 80054a8:	e00f      	b.n	80054ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	8979      	ldrh	r1, [r7, #10]
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fd7d 	bl	8005fc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d19d      	bne.n	8005410 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6a39      	ldr	r1, [r7, #32]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fbc3 	bl	8005c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e01a      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2220      	movs	r2, #32
 80054ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <HAL_I2C_Master_Receive+0x1e8>)
 80054fc:	400b      	ands	r3, r1
 80054fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	80002400 	.word	0x80002400
 800552c:	fe00e800 	.word	0xfe00e800

08005530 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	4608      	mov	r0, r1
 800553a:	4611      	mov	r1, r2
 800553c:	461a      	mov	r2, r3
 800553e:	4603      	mov	r3, r0
 8005540:	817b      	strh	r3, [r7, #10]
 8005542:	460b      	mov	r3, r1
 8005544:	813b      	strh	r3, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b20      	cmp	r3, #32
 8005554:	f040 80f9 	bne.w	800574a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_I2C_Mem_Write+0x34>
 800555e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800556a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0ed      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_I2C_Mem_Write+0x4e>
 800557a:	2302      	movs	r3, #2
 800557c:	e0e6      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005586:	f7ff f977 	bl	8004878 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	2319      	movs	r3, #25
 8005592:	2201      	movs	r2, #1
 8005594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fac3 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0d1      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2221      	movs	r2, #33	@ 0x21
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2240      	movs	r2, #64	@ 0x40
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055d0:	88f8      	ldrh	r0, [r7, #6]
 80055d2:	893a      	ldrh	r2, [r7, #8]
 80055d4:	8979      	ldrh	r1, [r7, #10]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4603      	mov	r3, r0
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f9d3 	bl	800598c <I2C_RequestMemoryWrite>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0a9      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2bff      	cmp	r3, #255	@ 0xff
 8005600:	d90e      	bls.n	8005620 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	22ff      	movs	r2, #255	@ 0xff
 8005606:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560c:	b2da      	uxtb	r2, r3
 800560e:	8979      	ldrh	r1, [r7, #10]
 8005610:	2300      	movs	r3, #0
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fcd3 	bl	8005fc4 <I2C_TransferConfig>
 800561e:	e00f      	b.n	8005640 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	b2da      	uxtb	r2, r3
 8005630:	8979      	ldrh	r1, [r7, #10]
 8005632:	2300      	movs	r3, #0
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fcc2 	bl	8005fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fac6 	bl	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e07b      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d034      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x1c8>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d130      	bne.n	80056f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	2200      	movs	r2, #0
 800569e:	2180      	movs	r1, #128	@ 0x80
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fa3f 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e04d      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2bff      	cmp	r3, #255	@ 0xff
 80056b8:	d90e      	bls.n	80056d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	22ff      	movs	r2, #255	@ 0xff
 80056be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	8979      	ldrh	r1, [r7, #10]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fc77 	bl	8005fc4 <I2C_TransferConfig>
 80056d6:	e00f      	b.n	80056f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	8979      	ldrh	r1, [r7, #10]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fc66 	bl	8005fc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d19e      	bne.n	8005640 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 faac 	bl	8005c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e01a      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2220      	movs	r2, #32
 800571c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <HAL_I2C_Mem_Write+0x224>)
 800572a:	400b      	ands	r3, r1
 800572c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	fe00e800 	.word	0xfe00e800

08005758 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	461a      	mov	r2, r3
 8005766:	4603      	mov	r3, r0
 8005768:	817b      	strh	r3, [r7, #10]
 800576a:	460b      	mov	r3, r1
 800576c:	813b      	strh	r3, [r7, #8]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	f040 80fd 	bne.w	800597a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_I2C_Mem_Read+0x34>
 8005786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005792:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0f1      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2C_Mem_Read+0x4e>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0ea      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057ae:	f7ff f863 	bl	8004878 <HAL_GetTick>
 80057b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	2319      	movs	r3, #25
 80057ba:	2201      	movs	r2, #1
 80057bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f9af 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0d5      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2222      	movs	r2, #34	@ 0x22
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2240      	movs	r2, #64	@ 0x40
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057f8:	88f8      	ldrh	r0, [r7, #6]
 80057fa:	893a      	ldrh	r2, [r7, #8]
 80057fc:	8979      	ldrh	r1, [r7, #10]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	4603      	mov	r3, r0
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f913 	bl	8005a34 <I2C_RequestMemoryRead>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0ad      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	2bff      	cmp	r3, #255	@ 0xff
 8005828:	d90e      	bls.n	8005848 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005834:	b2da      	uxtb	r2, r3
 8005836:	8979      	ldrh	r1, [r7, #10]
 8005838:	4b52      	ldr	r3, [pc, #328]	@ (8005984 <HAL_I2C_Mem_Read+0x22c>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fbbf 	bl	8005fc4 <I2C_TransferConfig>
 8005846:	e00f      	b.n	8005868 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	b2da      	uxtb	r2, r3
 8005858:	8979      	ldrh	r1, [r7, #10]
 800585a:	4b4a      	ldr	r3, [pc, #296]	@ (8005984 <HAL_I2C_Mem_Read+0x22c>)
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fbae 	bl	8005fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	2200      	movs	r2, #0
 8005870:	2104      	movs	r1, #4
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f956 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07c      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d034      	beq.n	8005928 <HAL_I2C_Mem_Read+0x1d0>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d130      	bne.n	8005928 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	@ 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f927 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e04d      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2bff      	cmp	r3, #255	@ 0xff
 80058e8:	d90e      	bls.n	8005908 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	8979      	ldrh	r1, [r7, #10]
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fb5f 	bl	8005fc4 <I2C_TransferConfig>
 8005906:	e00f      	b.n	8005928 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	b2da      	uxtb	r2, r3
 8005918:	8979      	ldrh	r1, [r7, #10]
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb4e 	bl	8005fc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d19a      	bne.n	8005868 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f994 	bl	8005c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e01a      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2220      	movs	r2, #32
 800594c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6859      	ldr	r1, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <HAL_I2C_Mem_Read+0x230>)
 800595a:	400b      	ands	r3, r1
 800595c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	80002400 	.word	0x80002400
 8005988:	fe00e800 	.word	0xfe00e800

0800598c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	460b      	mov	r3, r1
 80059a0:	813b      	strh	r3, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	8979      	ldrh	r1, [r7, #10]
 80059ac:	4b20      	ldr	r3, [pc, #128]	@ (8005a30 <I2C_RequestMemoryWrite+0xa4>)
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fb05 	bl	8005fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f909 	bl	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e02c      	b.n	8005a28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d105      	bne.n	80059e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059d4:	893b      	ldrh	r3, [r7, #8]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80059de:	e015      	b.n	8005a0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059e0:	893b      	ldrh	r3, [r7, #8]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f8ef 	bl	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e012      	b.n	8005a28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a02:	893b      	ldrh	r3, [r7, #8]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2180      	movs	r1, #128	@ 0x80
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f884 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	80002000 	.word	0x80002000

08005a34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	461a      	mov	r2, r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	460b      	mov	r3, r1
 8005a48:	813b      	strh	r3, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	8979      	ldrh	r1, [r7, #10]
 8005a54:	4b20      	ldr	r3, [pc, #128]	@ (8005ad8 <I2C_RequestMemoryRead+0xa4>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fab2 	bl	8005fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	69b9      	ldr	r1, [r7, #24]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f8b6 	bl	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e02c      	b.n	8005ace <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a7a:	893b      	ldrh	r3, [r7, #8]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a84:	e015      	b.n	8005ab2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a86:	893b      	ldrh	r3, [r7, #8]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f89c 	bl	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e012      	b.n	8005ace <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aa8:	893b      	ldrh	r3, [r7, #8]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2140      	movs	r1, #64	@ 0x40
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f831 	bl	8005b24 <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	80002000 	.word	0x80002000

08005adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d103      	bne.n	8005afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d007      	beq.n	8005b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	619a      	str	r2, [r3, #24]
  }
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	4613      	mov	r3, r2
 8005b32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b34:	e03b      	b.n	8005bae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f962 	bl	8005e04 <I2C_IsErrorOccurred>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e041      	b.n	8005bce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d02d      	beq.n	8005bae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fe fe91 	bl	8004878 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d122      	bne.n	8005bae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d113      	bne.n	8005bae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e00f      	b.n	8005bce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d0b4      	beq.n	8005b36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005be2:	e033      	b.n	8005c4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f90b 	bl	8005e04 <I2C_IsErrorOccurred>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e031      	b.n	8005c5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d025      	beq.n	8005c4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c00:	f7fe fe3a 	bl	8004878 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d11a      	bne.n	8005c4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d013      	beq.n	8005c4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e007      	b.n	8005c5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d1c4      	bne.n	8005be4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c70:	e02f      	b.n	8005cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f8c4 	bl	8005e04 <I2C_IsErrorOccurred>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e02d      	b.n	8005ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fe fdf7 	bl	8004878 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11a      	bne.n	8005cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d013      	beq.n	8005cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cae:	f043 0220 	orr.w	r2, r3, #32
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e007      	b.n	8005ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d1c8      	bne.n	8005c72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005cfc:	e071      	b.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f87e 	bl	8005e04 <I2C_IsErrorOccurred>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d13b      	bne.n	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d138      	bne.n	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d105      	bne.n	8005d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d121      	bne.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2210      	movs	r2, #16
 8005d54:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2220      	movs	r2, #32
 8005d62:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005d70:	400b      	ands	r3, r1
 8005d72:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
 8005d90:	e002      	b.n	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005d98:	f7fe fd6e 	bl	8004878 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d302      	bcc.n	8005dae <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d119      	bne.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d116      	bne.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00f      	beq.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d002      	beq.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d083      	beq.n	8005cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	fe00e800 	.word	0xfe00e800

08005e04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	@ 0x28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d068      	beq.n	8005f02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2210      	movs	r2, #16
 8005e36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e38:	e049      	b.n	8005ece <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d045      	beq.n	8005ece <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fe fd19 	bl	8004878 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <I2C_IsErrorOccurred+0x54>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d13a      	bne.n	8005ece <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e7a:	d121      	bne.n	8005ec0 <I2C_IsErrorOccurred+0xbc>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e82:	d01d      	beq.n	8005ec0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d01a      	beq.n	8005ec0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e9a:	f7fe fced 	bl	8004878 <HAL_GetTick>
 8005e9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea0:	e00e      	b.n	8005ec0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ea2:	f7fe fce9 	bl	8004878 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b19      	cmp	r3, #25
 8005eae:	d907      	bls.n	8005ec0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f043 0320 	orr.w	r3, r3, #32
 8005eb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005ebe:	e006      	b.n	8005ece <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d1e9      	bne.n	8005ea2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d003      	beq.n	8005ee4 <I2C_IsErrorOccurred+0xe0>
 8005edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0aa      	beq.n	8005e3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f043 0302 	orr.w	r3, r3, #2
 8005f5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01c      	beq.n	8005fb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fdaf 	bl	8005adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6859      	ldr	r1, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <I2C_IsErrorOccurred+0x1bc>)
 8005f8a:	400b      	ands	r3, r1
 8005f8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3728      	adds	r7, #40	@ 0x28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	fe00e800 	.word	0xfe00e800

08005fc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	817b      	strh	r3, [r7, #10]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fdc:	7a7b      	ldrb	r3, [r7, #9]
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fe4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ff2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	0d5b      	lsrs	r3, r3, #21
 8005ffe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <I2C_TransferConfig+0x60>)
 8006004:	430b      	orrs	r3, r1
 8006006:	43db      	mvns	r3, r3
 8006008:	ea02 0103 	and.w	r1, r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	03ff63ff 	.word	0x03ff63ff

08006028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b20      	cmp	r3, #32
 800603c:	d138      	bne.n	80060b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006048:	2302      	movs	r3, #2
 800604a:	e032      	b.n	80060b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	@ 0x24
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800607a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b0:	2302      	movs	r3, #2
  }
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d139      	bne.n	8006148 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060de:	2302      	movs	r3, #2
 80060e0:	e033      	b.n	800614a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2224      	movs	r2, #36	@ 0x24
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006110:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <HAL_PWREx_GetVoltageRange+0x18>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40007000 	.word	0x40007000

08006174 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006182:	d130      	bne.n	80061e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006184:	4b23      	ldr	r3, [pc, #140]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006190:	d038      	beq.n	8006204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006192:	4b20      	ldr	r3, [pc, #128]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800619a:	4a1e      	ldr	r2, [pc, #120]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800619c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006218 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2232      	movs	r2, #50	@ 0x32
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	0c9b      	lsrs	r3, r3, #18
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061b8:	e002      	b.n	80061c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3b01      	subs	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061c0:	4b14      	ldr	r3, [pc, #80]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061cc:	d102      	bne.n	80061d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f2      	bne.n	80061ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e0:	d110      	bne.n	8006204 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e00f      	b.n	8006206 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80061e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f2:	d007      	beq.n	8006204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061f4:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061fc:	4a05      	ldr	r2, [pc, #20]	@ (8006214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006202:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40007000 	.word	0x40007000
 8006218:	2000000c 	.word	0x2000000c
 800621c:	431bde83 	.word	0x431bde83

08006220 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e3ca      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006232:	4b97      	ldr	r3, [pc, #604]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800623c:	4b94      	ldr	r3, [pc, #592]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80e4 	beq.w	800641c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_RCC_OscConfig+0x4a>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b0c      	cmp	r3, #12
 800625e:	f040 808b 	bne.w	8006378 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b01      	cmp	r3, #1
 8006266:	f040 8087 	bne.w	8006378 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800626a:	4b89      	ldr	r3, [pc, #548]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_RCC_OscConfig+0x62>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e3a2      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	4b82      	ldr	r3, [pc, #520]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d004      	beq.n	800629c <HAL_RCC_OscConfig+0x7c>
 8006292:	4b7f      	ldr	r3, [pc, #508]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800629a:	e005      	b.n	80062a8 <HAL_RCC_OscConfig+0x88>
 800629c:	4b7c      	ldr	r3, [pc, #496]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800629e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d223      	bcs.n	80062f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fd55 	bl	8006d60 <RCC_SetFlashLatencyFromMSIRange>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e383      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062c0:	4b73      	ldr	r3, [pc, #460]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a72      	ldr	r2, [pc, #456]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062c6:	f043 0308 	orr.w	r3, r3, #8
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	4b70      	ldr	r3, [pc, #448]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	496d      	ldr	r1, [pc, #436]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062de:	4b6c      	ldr	r3, [pc, #432]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	4968      	ldr	r1, [pc, #416]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	604b      	str	r3, [r1, #4]
 80062f2:	e025      	b.n	8006340 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062f4:	4b66      	ldr	r3, [pc, #408]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a65      	ldr	r2, [pc, #404]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80062fa:	f043 0308 	orr.w	r3, r3, #8
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	4b63      	ldr	r3, [pc, #396]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	4960      	ldr	r1, [pc, #384]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006312:	4b5f      	ldr	r3, [pc, #380]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	495b      	ldr	r1, [pc, #364]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fd15 	bl	8006d60 <RCC_SetFlashLatencyFromMSIRange>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e343      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006340:	f000 fc4a 	bl	8006bd8 <HAL_RCC_GetSysClockFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	4b52      	ldr	r3, [pc, #328]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	4950      	ldr	r1, [pc, #320]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	4a4e      	ldr	r2, [pc, #312]	@ (8006498 <HAL_RCC_OscConfig+0x278>)
 800635e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006360:	4b4e      	ldr	r3, [pc, #312]	@ (800649c <HAL_RCC_OscConfig+0x27c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fa37 	bl	80047d8 <HAL_InitTick>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d052      	beq.n	800641a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	e327      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d032      	beq.n	80063e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006380:	4b43      	ldr	r3, [pc, #268]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a42      	ldr	r2, [pc, #264]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800638c:	f7fe fa74 	bl	8004878 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006394:	f7fe fa70 	bl	8004878 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e310      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063a6:	4b3a      	ldr	r3, [pc, #232]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063b2:	4b37      	ldr	r3, [pc, #220]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a36      	ldr	r2, [pc, #216]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063b8:	f043 0308 	orr.w	r3, r3, #8
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b34      	ldr	r3, [pc, #208]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	4931      	ldr	r1, [pc, #196]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	492c      	ldr	r1, [pc, #176]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	e01a      	b.n	800641c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a29      	ldr	r2, [pc, #164]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063f2:	f7fe fa41 	bl	8004878 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063fa:	f7fe fa3d 	bl	8004878 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e2dd      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800640c:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x1da>
 8006418:	e000      	b.n	800641c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800641a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d074      	beq.n	8006512 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b08      	cmp	r3, #8
 800642c:	d005      	beq.n	800643a <HAL_RCC_OscConfig+0x21a>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b0c      	cmp	r3, #12
 8006432:	d10e      	bne.n	8006452 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d10b      	bne.n	8006452 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643a:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d064      	beq.n	8006510 <HAL_RCC_OscConfig+0x2f0>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d160      	bne.n	8006510 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e2ba      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800645a:	d106      	bne.n	800646a <HAL_RCC_OscConfig+0x24a>
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0b      	ldr	r2, [pc, #44]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	e026      	b.n	80064b8 <HAL_RCC_OscConfig+0x298>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006472:	d115      	bne.n	80064a0 <HAL_RCC_OscConfig+0x280>
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a05      	ldr	r2, [pc, #20]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 800647a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b03      	ldr	r3, [pc, #12]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a02      	ldr	r2, [pc, #8]	@ (8006490 <HAL_RCC_OscConfig+0x270>)
 8006486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	e014      	b.n	80064b8 <HAL_RCC_OscConfig+0x298>
 800648e:	bf00      	nop
 8006490:	40021000 	.word	0x40021000
 8006494:	0800f06c 	.word	0x0800f06c
 8006498:	2000000c 	.word	0x2000000c
 800649c:	20000010 	.word	0x20000010
 80064a0:	4ba0      	ldr	r3, [pc, #640]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a9f      	ldr	r2, [pc, #636]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b9d      	ldr	r3, [pc, #628]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a9c      	ldr	r2, [pc, #624]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80064b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7fe f9da 	bl	8004878 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c8:	f7fe f9d6 	bl	8004878 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	@ 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e276      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064da:	4b92      	ldr	r3, [pc, #584]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0x2a8>
 80064e6:	e014      	b.n	8006512 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fe f9c6 	bl	8004878 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fe f9c2 	bl	8004878 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	@ 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e262      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006502:	4b88      	ldr	r3, [pc, #544]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x2d0>
 800650e:	e000      	b.n	8006512 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d060      	beq.n	80065e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d005      	beq.n	8006530 <HAL_RCC_OscConfig+0x310>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	d119      	bne.n	800655e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d116      	bne.n	800655e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006530:	4b7c      	ldr	r3, [pc, #496]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_OscConfig+0x328>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e23f      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006548:	4b76      	ldr	r3, [pc, #472]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	4973      	ldr	r1, [pc, #460]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006558:	4313      	orrs	r3, r2
 800655a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655c:	e040      	b.n	80065e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d023      	beq.n	80065ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006566:	4b6f      	ldr	r3, [pc, #444]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a6e      	ldr	r2, [pc, #440]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006572:	f7fe f981 	bl	8004878 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800657a:	f7fe f97d 	bl	8004878 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e21d      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800658c:	4b65      	ldr	r3, [pc, #404]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006598:	4b62      	ldr	r3, [pc, #392]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	061b      	lsls	r3, r3, #24
 80065a6:	495f      	ldr	r1, [pc, #380]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	604b      	str	r3, [r1, #4]
 80065ac:	e018      	b.n	80065e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80065b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ba:	f7fe f95d 	bl	8004878 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c2:	f7fe f959 	bl	8004878 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e1f9      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065d4:	4b53      	ldr	r3, [pc, #332]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f0      	bne.n	80065c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d03c      	beq.n	8006666 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01c      	beq.n	800662e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80065f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065fa:	4a4a      	ldr	r2, [pc, #296]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006604:	f7fe f938 	bl	8004878 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660c:	f7fe f934 	bl	8004878 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e1d4      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800661e:	4b41      	ldr	r3, [pc, #260]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ef      	beq.n	800660c <HAL_RCC_OscConfig+0x3ec>
 800662c:	e01b      	b.n	8006666 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006634:	4a3b      	ldr	r2, [pc, #236]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663e:	f7fe f91b 	bl	8004878 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006646:	f7fe f917 	bl	8004878 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e1b7      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006658:	4b32      	ldr	r3, [pc, #200]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800665a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1ef      	bne.n	8006646 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80a6 	beq.w	80067c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006674:	2300      	movs	r3, #0
 8006676:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006678:	4b2a      	ldr	r3, [pc, #168]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10d      	bne.n	80066a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006684:	4b27      	ldr	r3, [pc, #156]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006688:	4a26      	ldr	r2, [pc, #152]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 800668a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006690:	4b24      	ldr	r3, [pc, #144]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669c:	2301      	movs	r3, #1
 800669e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a0:	4b21      	ldr	r3, [pc, #132]	@ (8006728 <HAL_RCC_OscConfig+0x508>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d118      	bne.n	80066de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006728 <HAL_RCC_OscConfig+0x508>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <HAL_RCC_OscConfig+0x508>)
 80066b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066b8:	f7fe f8de 	bl	8004878 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c0:	f7fe f8da 	bl	8004878 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e17a      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066d2:	4b15      	ldr	r3, [pc, #84]	@ (8006728 <HAL_RCC_OscConfig+0x508>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d108      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4d8>
 80066e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066f6:	e029      	b.n	800674c <HAL_RCC_OscConfig+0x52c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d115      	bne.n	800672c <HAL_RCC_OscConfig+0x50c>
 8006700:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006706:	4a07      	ldr	r2, [pc, #28]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006708:	f043 0304 	orr.w	r3, r3, #4
 800670c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006710:	4b04      	ldr	r3, [pc, #16]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006716:	4a03      	ldr	r2, [pc, #12]	@ (8006724 <HAL_RCC_OscConfig+0x504>)
 8006718:	f043 0301 	orr.w	r3, r3, #1
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006720:	e014      	b.n	800674c <HAL_RCC_OscConfig+0x52c>
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
 800672c:	4b9c      	ldr	r3, [pc, #624]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	4a9b      	ldr	r2, [pc, #620]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800673c:	4b98      	ldr	r3, [pc, #608]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006742:	4a97      	ldr	r2, [pc, #604]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006744:	f023 0304 	bic.w	r3, r3, #4
 8006748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d016      	beq.n	8006782 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006754:	f7fe f890 	bl	8004878 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800675a:	e00a      	b.n	8006772 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800675c:	f7fe f88c 	bl	8004878 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e12a      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006772:	4b8b      	ldr	r3, [pc, #556]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0ed      	beq.n	800675c <HAL_RCC_OscConfig+0x53c>
 8006780:	e015      	b.n	80067ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006782:	f7fe f879 	bl	8004878 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006788:	e00a      	b.n	80067a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800678a:	f7fe f875 	bl	8004878 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e113      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067a0:	4b7f      	ldr	r3, [pc, #508]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1ed      	bne.n	800678a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ae:	7ffb      	ldrb	r3, [r7, #31]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b4:	4b7a      	ldr	r3, [pc, #488]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80067b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b8:	4a79      	ldr	r2, [pc, #484]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80067ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80fe 	beq.w	80069c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	f040 80d0 	bne.w	8006974 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80067d4:	4b72      	ldr	r3, [pc, #456]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0203 	and.w	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d130      	bne.n	800684a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	3b01      	subs	r3, #1
 80067f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d127      	bne.n	800684a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006804:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006806:	429a      	cmp	r2, r3
 8006808:	d11f      	bne.n	800684a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006814:	2a07      	cmp	r2, #7
 8006816:	bf14      	ite	ne
 8006818:	2201      	movne	r2, #1
 800681a:	2200      	moveq	r2, #0
 800681c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800681e:	4293      	cmp	r3, r2
 8006820:	d113      	bne.n	800684a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	3b01      	subs	r3, #1
 8006830:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d109      	bne.n	800684a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	3b01      	subs	r3, #1
 8006844:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d06e      	beq.n	8006928 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b0c      	cmp	r3, #12
 800684e:	d069      	beq.n	8006924 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006850:	4b53      	ldr	r3, [pc, #332]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800685c:	4b50      	ldr	r3, [pc, #320]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0ad      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800686c:	4b4c      	ldr	r3, [pc, #304]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a4b      	ldr	r2, [pc, #300]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006878:	f7fd fffe 	bl	8004878 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fd fffa 	bl	8004878 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e09a      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006892:	4b43      	ldr	r3, [pc, #268]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800689e:	4b40      	ldr	r3, [pc, #256]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	4b40      	ldr	r3, [pc, #256]	@ (80069a4 <HAL_RCC_OscConfig+0x784>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068ae:	3a01      	subs	r2, #1
 80068b0:	0112      	lsls	r2, r2, #4
 80068b2:	4311      	orrs	r1, r2
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068b8:	0212      	lsls	r2, r2, #8
 80068ba:	4311      	orrs	r1, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068c0:	0852      	lsrs	r2, r2, #1
 80068c2:	3a01      	subs	r2, #1
 80068c4:	0552      	lsls	r2, r2, #21
 80068c6:	4311      	orrs	r1, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80068cc:	0852      	lsrs	r2, r2, #1
 80068ce:	3a01      	subs	r2, #1
 80068d0:	0652      	lsls	r2, r2, #25
 80068d2:	4311      	orrs	r1, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80068d8:	0912      	lsrs	r2, r2, #4
 80068da:	0452      	lsls	r2, r2, #17
 80068dc:	430a      	orrs	r2, r1
 80068de:	4930      	ldr	r1, [pc, #192]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068e4:	4b2e      	ldr	r3, [pc, #184]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2d      	ldr	r2, [pc, #180]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80068ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068f0:	4b2b      	ldr	r3, [pc, #172]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4a2a      	ldr	r2, [pc, #168]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 80068f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068fc:	f7fd ffbc 	bl	8004878 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006904:	f7fd ffb8 	bl	8004878 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e058      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006916:	4b22      	ldr	r3, [pc, #136]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006922:	e050      	b.n	80069c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e04f      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006928:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d148      	bne.n	80069c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006934:	4b1a      	ldr	r3, [pc, #104]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a19      	ldr	r2, [pc, #100]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800693a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800693e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006940:	4b17      	ldr	r3, [pc, #92]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4a16      	ldr	r2, [pc, #88]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800694a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800694c:	f7fd ff94 	bl	8004878 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006954:	f7fd ff90 	bl	8004878 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e030      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006966:	4b0e      	ldr	r3, [pc, #56]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x734>
 8006972:	e028      	b.n	80069c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d023      	beq.n	80069c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697a:	4b09      	ldr	r3, [pc, #36]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a08      	ldr	r2, [pc, #32]	@ (80069a0 <HAL_RCC_OscConfig+0x780>)
 8006980:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fd ff77 	bl	8004878 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800698c:	e00c      	b.n	80069a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698e:	f7fd ff73 	bl	8004878 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d905      	bls.n	80069a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e013      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
 80069a0:	40021000 	.word	0x40021000
 80069a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a8:	4b09      	ldr	r3, [pc, #36]	@ (80069d0 <HAL_RCC_OscConfig+0x7b0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ec      	bne.n	800698e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80069b4:	4b06      	ldr	r3, [pc, #24]	@ (80069d0 <HAL_RCC_OscConfig+0x7b0>)
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	4905      	ldr	r1, [pc, #20]	@ (80069d0 <HAL_RCC_OscConfig+0x7b0>)
 80069ba:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <HAL_RCC_OscConfig+0x7b4>)
 80069bc:	4013      	ands	r3, r2
 80069be:	60cb      	str	r3, [r1, #12]
 80069c0:	e001      	b.n	80069c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40021000 	.word	0x40021000
 80069d4:	feeefffc 	.word	0xfeeefffc

080069d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0e7      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069ec:	4b75      	ldr	r3, [pc, #468]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d910      	bls.n	8006a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fa:	4b72      	ldr	r3, [pc, #456]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f023 0207 	bic.w	r2, r3, #7
 8006a02:	4970      	ldr	r1, [pc, #448]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d001      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0cf      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d010      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	4b66      	ldr	r3, [pc, #408]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d908      	bls.n	8006a4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a38:	4b63      	ldr	r3, [pc, #396]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	4960      	ldr	r1, [pc, #384]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d04c      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d121      	bne.n	8006aae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0a6      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d107      	bne.n	8006a86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a76:	4b54      	ldr	r3, [pc, #336]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d115      	bne.n	8006aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e09a      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e08e      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e086      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aae:	4b46      	ldr	r3, [pc, #280]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f023 0203 	bic.w	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	4943      	ldr	r1, [pc, #268]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac0:	f7fd feda 	bl	8004878 <HAL_GetTick>
 8006ac4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac6:	e00a      	b.n	8006ade <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac8:	f7fd fed6 	bl	8004878 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e06e      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ade:	4b3a      	ldr	r3, [pc, #232]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 020c 	and.w	r2, r3, #12
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d1eb      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d010      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	4b31      	ldr	r3, [pc, #196]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d208      	bcs.n	8006b1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	492b      	ldr	r1, [pc, #172]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1e:	4b29      	ldr	r3, [pc, #164]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d210      	bcs.n	8006b4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2c:	4b25      	ldr	r3, [pc, #148]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f023 0207 	bic.w	r2, r3, #7
 8006b34:	4923      	ldr	r1, [pc, #140]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3c:	4b21      	ldr	r3, [pc, #132]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d001      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e036      	b.n	8006bbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4918      	ldr	r1, [pc, #96]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b78:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4910      	ldr	r1, [pc, #64]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b8c:	f000 f824 	bl	8006bd8 <HAL_RCC_GetSysClockFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	490b      	ldr	r1, [pc, #44]	@ (8006bcc <HAL_RCC_ClockConfig+0x1f4>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	4a09      	ldr	r2, [pc, #36]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1f8>)
 8006baa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bac:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1fc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fd fe11 	bl	80047d8 <HAL_InitTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006bba:	7afb      	ldrb	r3, [r7, #11]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40022000 	.word	0x40022000
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	0800f06c 	.word	0x0800f06c
 8006bd0:	2000000c 	.word	0x2000000c
 8006bd4:	20000010 	.word	0x20000010

08006bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b089      	sub	sp, #36	@ 0x24
 8006bdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006be6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x34>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b0c      	cmp	r3, #12
 8006c04:	d121      	bne.n	8006c4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d11e      	bne.n	8006c4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c18:	4b31      	ldr	r3, [pc, #196]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c1e:	0a1b      	lsrs	r3, r3, #8
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e005      	b.n	8006c34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c28:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c34:	4a2b      	ldr	r2, [pc, #172]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c48:	e00a      	b.n	8006c60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d102      	bne.n	8006c56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c50:	4b25      	ldr	r3, [pc, #148]	@ (8006ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	e004      	b.n	8006c60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c5c:	4b23      	ldr	r3, [pc, #140]	@ (8006cec <HAL_RCC_GetSysClockFreq+0x114>)
 8006c5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d134      	bne.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c66:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d003      	beq.n	8006c7e <HAL_RCC_GetSysClockFreq+0xa6>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d003      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0xac>
 8006c7c:	e005      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c80:	617b      	str	r3, [r7, #20]
      break;
 8006c82:	e005      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c84:	4b19      	ldr	r3, [pc, #100]	@ (8006cec <HAL_RCC_GetSysClockFreq+0x114>)
 8006c86:	617b      	str	r3, [r7, #20]
      break;
 8006c88:	e002      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	617b      	str	r3, [r7, #20]
      break;
 8006c8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c90:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	fb03 f202 	mul.w	r2, r3, r2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	0e5b      	lsrs	r3, r3, #25
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3724      	adds	r7, #36	@ 0x24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	0800f084 	.word	0x0800f084
 8006ce8:	00f42400 	.word	0x00f42400
 8006cec:	007a1200 	.word	0x007a1200

08006cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf4:	4b03      	ldr	r3, [pc, #12]	@ (8006d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000000c 	.word	0x2000000c

08006d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d0c:	f7ff fff0 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8006d10:	4602      	mov	r2, r0
 8006d12:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	4904      	ldr	r1, [pc, #16]	@ (8006d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d1e:	5ccb      	ldrb	r3, [r1, r3]
 8006d20:	f003 031f 	and.w	r3, r3, #31
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	0800f07c 	.word	0x0800f07c

08006d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d38:	f7ff ffda 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0adb      	lsrs	r3, r3, #11
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4904      	ldr	r1, [pc, #16]	@ (8006d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	0800f07c 	.word	0x0800f07c

08006d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d78:	f7ff f9ee 	bl	8006158 <HAL_PWREx_GetVoltageRange>
 8006d7c:	6178      	str	r0, [r7, #20]
 8006d7e:	e014      	b.n	8006daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d80:	4b25      	ldr	r3, [pc, #148]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d84:	4a24      	ldr	r2, [pc, #144]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d8c:	4b22      	ldr	r3, [pc, #136]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d98:	f7ff f9de 	bl	8006158 <HAL_PWREx_GetVoltageRange>
 8006d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db0:	d10b      	bne.n	8006dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b80      	cmp	r3, #128	@ 0x80
 8006db6:	d919      	bls.n	8006dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2ba0      	cmp	r3, #160	@ 0xa0
 8006dbc:	d902      	bls.n	8006dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e013      	b.n	8006dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	e010      	b.n	8006dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b80      	cmp	r3, #128	@ 0x80
 8006dce:	d902      	bls.n	8006dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	e00a      	b.n	8006dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b80      	cmp	r3, #128	@ 0x80
 8006dda:	d102      	bne.n	8006de2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ddc:	2302      	movs	r3, #2
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	e004      	b.n	8006dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b70      	cmp	r3, #112	@ 0x70
 8006de6:	d101      	bne.n	8006dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006de8:	2301      	movs	r3, #1
 8006dea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006dec:	4b0b      	ldr	r3, [pc, #44]	@ (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f023 0207 	bic.w	r2, r3, #7
 8006df4:	4909      	ldr	r1, [pc, #36]	@ (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006dfc:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d001      	beq.n	8006e0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	40022000 	.word	0x40022000

08006e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e28:	2300      	movs	r3, #0
 8006e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d041      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e44:	d02a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e4a:	d824      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e50:	d008      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e56:	d81e      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e60:	d010      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e62:	e018      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e64:	4b86      	ldr	r3, [pc, #536]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4a85      	ldr	r2, [pc, #532]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e70:	e015      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3304      	adds	r3, #4
 8006e76:	2100      	movs	r1, #0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fabb 	bl	80073f4 <RCCEx_PLLSAI1_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e82:	e00c      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3320      	adds	r3, #32
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fba6 	bl	80075dc <RCCEx_PLLSAI2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e94:	e003      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	74fb      	strb	r3, [r7, #19]
      break;
 8006e9a:	e000      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ea4:	4b76      	ldr	r3, [pc, #472]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb2:	4973      	ldr	r1, [pc, #460]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d041      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ed0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ed4:	d02a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006ed6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006eda:	d824      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ee0:	d008      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ee2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ee6:	d81e      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ef0:	d010      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ef2:	e018      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ef4:	4b62      	ldr	r3, [pc, #392]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4a61      	ldr	r2, [pc, #388]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006efe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f00:	e015      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3304      	adds	r3, #4
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fa73 	bl	80073f4 <RCCEx_PLLSAI1_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f12:	e00c      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3320      	adds	r3, #32
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fb5e 	bl	80075dc <RCCEx_PLLSAI2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	74fb      	strb	r3, [r7, #19]
      break;
 8006f2a:	e000      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2e:	7cfb      	ldrb	r3, [r7, #19]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f34:	4b52      	ldr	r3, [pc, #328]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f42:	494f      	ldr	r1, [pc, #316]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f4a:	e001      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	7cfb      	ldrb	r3, [r7, #19]
 8006f4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80a0 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f62:	4b47      	ldr	r3, [pc, #284]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f78:	4b41      	ldr	r3, [pc, #260]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7c:	4a40      	ldr	r2, [pc, #256]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f84:	4b3e      	ldr	r3, [pc, #248]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f90:	2301      	movs	r3, #1
 8006f92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f94:	4b3b      	ldr	r3, [pc, #236]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a3a      	ldr	r2, [pc, #232]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fa0:	f7fd fc6a 	bl	8004878 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fa6:	e009      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa8:	f7fd fc66 	bl	8004878 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d902      	bls.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	74fb      	strb	r3, [r7, #19]
        break;
 8006fba:	e005      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fbc:	4b31      	ldr	r3, [pc, #196]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ef      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006fc8:	7cfb      	ldrb	r3, [r7, #19]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d15c      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fce:	4b2c      	ldr	r3, [pc, #176]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01f      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d019      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fec:	4b24      	ldr	r3, [pc, #144]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ff8:	4b21      	ldr	r3, [pc, #132]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffe:	4a20      	ldr	r2, [pc, #128]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007008:	4b1d      	ldr	r3, [pc, #116]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700e:	4a1c      	ldr	r2, [pc, #112]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007018:	4a19      	ldr	r2, [pc, #100]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d016      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702a:	f7fd fc25 	bl	8004878 <HAL_GetTick>
 800702e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007030:	e00b      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007032:	f7fd fc21 	bl	8004878 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007040:	4293      	cmp	r3, r2
 8007042:	d902      	bls.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	74fb      	strb	r3, [r7, #19]
            break;
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0ec      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007058:	7cfb      	ldrb	r3, [r7, #19]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800705e:	4b08      	ldr	r3, [pc, #32]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706e:	4904      	ldr	r1, [pc, #16]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007076:	e009      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	74bb      	strb	r3, [r7, #18]
 800707c:	e006      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000
 8007084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800708c:	7c7b      	ldrb	r3, [r7, #17]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d105      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007092:	4b9e      	ldr	r3, [pc, #632]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007096:	4a9d      	ldr	r2, [pc, #628]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800709c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070aa:	4b98      	ldr	r3, [pc, #608]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b0:	f023 0203 	bic.w	r2, r3, #3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	4994      	ldr	r1, [pc, #592]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070cc:	4b8f      	ldr	r3, [pc, #572]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d2:	f023 020c 	bic.w	r2, r3, #12
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070da:	498c      	ldr	r1, [pc, #560]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070ee:	4b87      	ldr	r3, [pc, #540]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fc:	4983      	ldr	r1, [pc, #524]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007110:	4b7e      	ldr	r3, [pc, #504]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007116:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711e:	497b      	ldr	r1, [pc, #492]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007132:	4b76      	ldr	r3, [pc, #472]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007140:	4972      	ldr	r1, [pc, #456]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007154:	4b6d      	ldr	r3, [pc, #436]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007162:	496a      	ldr	r1, [pc, #424]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007176:	4b65      	ldr	r3, [pc, #404]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007184:	4961      	ldr	r1, [pc, #388]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007198:	4b5c      	ldr	r3, [pc, #368]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800719a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a6:	4959      	ldr	r1, [pc, #356]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071ba:	4b54      	ldr	r3, [pc, #336]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c8:	4950      	ldr	r1, [pc, #320]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071dc:	4b4b      	ldr	r3, [pc, #300]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ea:	4948      	ldr	r1, [pc, #288]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071fe:	4b43      	ldr	r3, [pc, #268]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007204:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720c:	493f      	ldr	r1, [pc, #252]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d028      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007220:	4b3a      	ldr	r3, [pc, #232]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007226:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800722e:	4937      	ldr	r1, [pc, #220]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800723a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800723e:	d106      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007240:	4b32      	ldr	r3, [pc, #200]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4a31      	ldr	r2, [pc, #196]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800724a:	60d3      	str	r3, [r2, #12]
 800724c:	e011      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007252:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007256:	d10c      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f8c8 	bl	80073f4 <RCCEx_PLLSAI1_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007268:	7cfb      	ldrb	r3, [r7, #19]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800726e:	7cfb      	ldrb	r3, [r7, #19]
 8007270:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d028      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800727e:	4b23      	ldr	r3, [pc, #140]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007284:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728c:	491f      	ldr	r1, [pc, #124]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800729c:	d106      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800729e:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	4a1a      	ldr	r2, [pc, #104]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072a8:	60d3      	str	r3, [r2, #12]
 80072aa:	e011      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3304      	adds	r3, #4
 80072ba:	2101      	movs	r1, #1
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f899 	bl	80073f4 <RCCEx_PLLSAI1_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072c6:	7cfb      	ldrb	r3, [r7, #19]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02b      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072dc:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ea:	4908      	ldr	r1, [pc, #32]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072fa:	d109      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072fc:	4b03      	ldr	r3, [pc, #12]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4a02      	ldr	r2, [pc, #8]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007306:	60d3      	str	r3, [r2, #12]
 8007308:	e014      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007318:	d10c      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	2101      	movs	r1, #1
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f867 	bl	80073f4 <RCCEx_PLLSAI1_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800732a:	7cfb      	ldrb	r3, [r7, #19]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007330:	7cfb      	ldrb	r3, [r7, #19]
 8007332:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d02f      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007340:	4b2b      	ldr	r3, [pc, #172]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007346:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800734e:	4928      	ldr	r1, [pc, #160]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800735a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800735e:	d10d      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f844 	bl	80073f4 <RCCEx_PLLSAI1_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d014      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007376:	7cfb      	ldrb	r3, [r7, #19]
 8007378:	74bb      	strb	r3, [r7, #18]
 800737a:	e011      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007384:	d10c      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3320      	adds	r3, #32
 800738a:	2102      	movs	r1, #2
 800738c:	4618      	mov	r0, r3
 800738e:	f000 f925 	bl	80075dc <RCCEx_PLLSAI2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007396:	7cfb      	ldrb	r3, [r7, #19]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800739c:	7cfb      	ldrb	r3, [r7, #19]
 800739e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073ac:	4b10      	ldr	r3, [pc, #64]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ba:	490d      	ldr	r1, [pc, #52]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073ce:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073de:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80073e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40021000 	.word	0x40021000

080073f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007402:	4b75      	ldr	r3, [pc, #468]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d018      	beq.n	8007440 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800740e:	4b72      	ldr	r3, [pc, #456]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f003 0203 	and.w	r2, r3, #3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d10d      	bne.n	800743a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
       ||
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007426:	4b6c      	ldr	r3, [pc, #432]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	091b      	lsrs	r3, r3, #4
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
       ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d047      	beq.n	80074ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
 800743e:	e044      	b.n	80074ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b03      	cmp	r3, #3
 8007446:	d018      	beq.n	800747a <RCCEx_PLLSAI1_Config+0x86>
 8007448:	2b03      	cmp	r3, #3
 800744a:	d825      	bhi.n	8007498 <RCCEx_PLLSAI1_Config+0xa4>
 800744c:	2b01      	cmp	r3, #1
 800744e:	d002      	beq.n	8007456 <RCCEx_PLLSAI1_Config+0x62>
 8007450:	2b02      	cmp	r3, #2
 8007452:	d009      	beq.n	8007468 <RCCEx_PLLSAI1_Config+0x74>
 8007454:	e020      	b.n	8007498 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007456:	4b60      	ldr	r3, [pc, #384]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d11d      	bne.n	800749e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007466:	e01a      	b.n	800749e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007468:	4b5b      	ldr	r3, [pc, #364]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007470:	2b00      	cmp	r3, #0
 8007472:	d116      	bne.n	80074a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007478:	e013      	b.n	80074a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800747a:	4b57      	ldr	r3, [pc, #348]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10f      	bne.n	80074a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007486:	4b54      	ldr	r3, [pc, #336]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007496:	e006      	b.n	80074a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	e004      	b.n	80074a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800749e:	bf00      	nop
 80074a0:	e002      	b.n	80074a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10d      	bne.n	80074ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074ae:	4b4a      	ldr	r3, [pc, #296]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6819      	ldr	r1, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	3b01      	subs	r3, #1
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	430b      	orrs	r3, r1
 80074c4:	4944      	ldr	r1, [pc, #272]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d17d      	bne.n	80075cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074d0:	4b41      	ldr	r3, [pc, #260]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a40      	ldr	r2, [pc, #256]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074dc:	f7fd f9cc 	bl	8004878 <HAL_GetTick>
 80074e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074e2:	e009      	b.n	80074f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074e4:	f7fd f9c8 	bl	8004878 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d902      	bls.n	80074f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	73fb      	strb	r3, [r7, #15]
        break;
 80074f6:	e005      	b.n	8007504 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074f8:	4b37      	ldr	r3, [pc, #220]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ef      	bne.n	80074e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d160      	bne.n	80075cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d111      	bne.n	8007534 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007510:	4b31      	ldr	r3, [pc, #196]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6892      	ldr	r2, [r2, #8]
 8007520:	0211      	lsls	r1, r2, #8
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68d2      	ldr	r2, [r2, #12]
 8007526:	0912      	lsrs	r2, r2, #4
 8007528:	0452      	lsls	r2, r2, #17
 800752a:	430a      	orrs	r2, r1
 800752c:	492a      	ldr	r1, [pc, #168]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800752e:	4313      	orrs	r3, r2
 8007530:	610b      	str	r3, [r1, #16]
 8007532:	e027      	b.n	8007584 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d112      	bne.n	8007560 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800753a:	4b27      	ldr	r3, [pc, #156]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007542:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6892      	ldr	r2, [r2, #8]
 800754a:	0211      	lsls	r1, r2, #8
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6912      	ldr	r2, [r2, #16]
 8007550:	0852      	lsrs	r2, r2, #1
 8007552:	3a01      	subs	r2, #1
 8007554:	0552      	lsls	r2, r2, #21
 8007556:	430a      	orrs	r2, r1
 8007558:	491f      	ldr	r1, [pc, #124]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800755a:	4313      	orrs	r3, r2
 800755c:	610b      	str	r3, [r1, #16]
 800755e:	e011      	b.n	8007584 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007560:	4b1d      	ldr	r3, [pc, #116]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007568:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6892      	ldr	r2, [r2, #8]
 8007570:	0211      	lsls	r1, r2, #8
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6952      	ldr	r2, [r2, #20]
 8007576:	0852      	lsrs	r2, r2, #1
 8007578:	3a01      	subs	r2, #1
 800757a:	0652      	lsls	r2, r2, #25
 800757c:	430a      	orrs	r2, r1
 800757e:	4916      	ldr	r1, [pc, #88]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007580:	4313      	orrs	r3, r2
 8007582:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007584:	4b14      	ldr	r3, [pc, #80]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a13      	ldr	r2, [pc, #76]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800758a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800758e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007590:	f7fd f972 	bl	8004878 <HAL_GetTick>
 8007594:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007596:	e009      	b.n	80075ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007598:	f7fd f96e 	bl	8004878 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d902      	bls.n	80075ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	73fb      	strb	r3, [r7, #15]
          break;
 80075aa:	e005      	b.n	80075b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075ac:	4b0a      	ldr	r3, [pc, #40]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0ef      	beq.n	8007598 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075be:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	4904      	ldr	r1, [pc, #16]	@ (80075d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40021000 	.word	0x40021000

080075dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80075ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d018      	beq.n	8007628 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80075f6:	4b67      	ldr	r3, [pc, #412]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0203 	and.w	r2, r3, #3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d10d      	bne.n	8007622 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
       ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800760e:	4b61      	ldr	r3, [pc, #388]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	091b      	lsrs	r3, r3, #4
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
       ||
 800761e:	429a      	cmp	r2, r3
 8007620:	d047      	beq.n	80076b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
 8007626:	e044      	b.n	80076b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d018      	beq.n	8007662 <RCCEx_PLLSAI2_Config+0x86>
 8007630:	2b03      	cmp	r3, #3
 8007632:	d825      	bhi.n	8007680 <RCCEx_PLLSAI2_Config+0xa4>
 8007634:	2b01      	cmp	r3, #1
 8007636:	d002      	beq.n	800763e <RCCEx_PLLSAI2_Config+0x62>
 8007638:	2b02      	cmp	r3, #2
 800763a:	d009      	beq.n	8007650 <RCCEx_PLLSAI2_Config+0x74>
 800763c:	e020      	b.n	8007680 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800763e:	4b55      	ldr	r3, [pc, #340]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11d      	bne.n	8007686 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800764e:	e01a      	b.n	8007686 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007650:	4b50      	ldr	r3, [pc, #320]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007658:	2b00      	cmp	r3, #0
 800765a:	d116      	bne.n	800768a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007660:	e013      	b.n	800768a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007662:	4b4c      	ldr	r3, [pc, #304]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10f      	bne.n	800768e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800766e:	4b49      	ldr	r3, [pc, #292]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800767e:	e006      	b.n	800768e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
      break;
 8007684:	e004      	b.n	8007690 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007686:	bf00      	nop
 8007688:	e002      	b.n	8007690 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800768e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007696:	4b3f      	ldr	r3, [pc, #252]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	430b      	orrs	r3, r1
 80076ac:	4939      	ldr	r1, [pc, #228]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d167      	bne.n	8007788 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076b8:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a35      	ldr	r2, [pc, #212]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c4:	f7fd f8d8 	bl	8004878 <HAL_GetTick>
 80076c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076ca:	e009      	b.n	80076e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076cc:	f7fd f8d4 	bl	8004878 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d902      	bls.n	80076e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	73fb      	strb	r3, [r7, #15]
        break;
 80076de:	e005      	b.n	80076ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ef      	bne.n	80076cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d14a      	bne.n	8007788 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d111      	bne.n	800771c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076f8:	4b26      	ldr	r3, [pc, #152]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6892      	ldr	r2, [r2, #8]
 8007708:	0211      	lsls	r1, r2, #8
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	68d2      	ldr	r2, [r2, #12]
 800770e:	0912      	lsrs	r2, r2, #4
 8007710:	0452      	lsls	r2, r2, #17
 8007712:	430a      	orrs	r2, r1
 8007714:	491f      	ldr	r1, [pc, #124]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007716:	4313      	orrs	r3, r2
 8007718:	614b      	str	r3, [r1, #20]
 800771a:	e011      	b.n	8007740 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800771c:	4b1d      	ldr	r3, [pc, #116]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007724:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6892      	ldr	r2, [r2, #8]
 800772c:	0211      	lsls	r1, r2, #8
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6912      	ldr	r2, [r2, #16]
 8007732:	0852      	lsrs	r2, r2, #1
 8007734:	3a01      	subs	r2, #1
 8007736:	0652      	lsls	r2, r2, #25
 8007738:	430a      	orrs	r2, r1
 800773a:	4916      	ldr	r1, [pc, #88]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800773c:	4313      	orrs	r3, r2
 800773e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007740:	4b14      	ldr	r3, [pc, #80]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a13      	ldr	r2, [pc, #76]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800774a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774c:	f7fd f894 	bl	8004878 <HAL_GetTick>
 8007750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007752:	e009      	b.n	8007768 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007754:	f7fd f890 	bl	8004878 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d902      	bls.n	8007768 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	73fb      	strb	r3, [r7, #15]
          break;
 8007766:	e005      	b.n	8007774 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007768:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0ef      	beq.n	8007754 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800777a:	4b06      	ldr	r3, [pc, #24]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	4904      	ldr	r1, [pc, #16]	@ (8007794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007784:	4313      	orrs	r3, r2
 8007786:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40021000 	.word	0x40021000

08007798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e049      	b.n	800783e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fc fdc6 	bl	8004350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f000 fb7a 	bl	8007ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e049      	b.n	80078ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f841 	bl	80078f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f000 fb23 	bl	8007ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <HAL_TIM_PWM_Start+0x24>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	bf14      	ite	ne
 8007924:	2301      	movne	r3, #1
 8007926:	2300      	moveq	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e03c      	b.n	80079a6 <HAL_TIM_PWM_Start+0x9e>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b04      	cmp	r3, #4
 8007930:	d109      	bne.n	8007946 <HAL_TIM_PWM_Start+0x3e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b01      	cmp	r3, #1
 800793c:	bf14      	ite	ne
 800793e:	2301      	movne	r3, #1
 8007940:	2300      	moveq	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	e02f      	b.n	80079a6 <HAL_TIM_PWM_Start+0x9e>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b08      	cmp	r3, #8
 800794a:	d109      	bne.n	8007960 <HAL_TIM_PWM_Start+0x58>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	bf14      	ite	ne
 8007958:	2301      	movne	r3, #1
 800795a:	2300      	moveq	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	e022      	b.n	80079a6 <HAL_TIM_PWM_Start+0x9e>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b0c      	cmp	r3, #12
 8007964:	d109      	bne.n	800797a <HAL_TIM_PWM_Start+0x72>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b01      	cmp	r3, #1
 8007970:	bf14      	ite	ne
 8007972:	2301      	movne	r3, #1
 8007974:	2300      	moveq	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	e015      	b.n	80079a6 <HAL_TIM_PWM_Start+0x9e>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b10      	cmp	r3, #16
 800797e:	d109      	bne.n	8007994 <HAL_TIM_PWM_Start+0x8c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	bf14      	ite	ne
 800798c:	2301      	movne	r3, #1
 800798e:	2300      	moveq	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	e008      	b.n	80079a6 <HAL_TIM_PWM_Start+0x9e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	bf14      	ite	ne
 80079a0:	2301      	movne	r3, #1
 80079a2:	2300      	moveq	r3, #0
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e09c      	b.n	8007ae8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <HAL_TIM_PWM_Start+0xb6>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079bc:	e023      	b.n	8007a06 <HAL_TIM_PWM_Start+0xfe>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d104      	bne.n	80079ce <HAL_TIM_PWM_Start+0xc6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079cc:	e01b      	b.n	8007a06 <HAL_TIM_PWM_Start+0xfe>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d104      	bne.n	80079de <HAL_TIM_PWM_Start+0xd6>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079dc:	e013      	b.n	8007a06 <HAL_TIM_PWM_Start+0xfe>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_PWM_Start+0xe6>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079ec:	e00b      	b.n	8007a06 <HAL_TIM_PWM_Start+0xfe>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d104      	bne.n	80079fe <HAL_TIM_PWM_Start+0xf6>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079fc:	e003      	b.n	8007a06 <HAL_TIM_PWM_Start+0xfe>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2202      	movs	r2, #2
 8007a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fe74 	bl	80086fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a35      	ldr	r2, [pc, #212]	@ (8007af0 <HAL_TIM_PWM_Start+0x1e8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <HAL_TIM_PWM_Start+0x13e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a34      	ldr	r2, [pc, #208]	@ (8007af4 <HAL_TIM_PWM_Start+0x1ec>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00e      	beq.n	8007a46 <HAL_TIM_PWM_Start+0x13e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a32      	ldr	r2, [pc, #200]	@ (8007af8 <HAL_TIM_PWM_Start+0x1f0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d009      	beq.n	8007a46 <HAL_TIM_PWM_Start+0x13e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a31      	ldr	r2, [pc, #196]	@ (8007afc <HAL_TIM_PWM_Start+0x1f4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d004      	beq.n	8007a46 <HAL_TIM_PWM_Start+0x13e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a2f      	ldr	r2, [pc, #188]	@ (8007b00 <HAL_TIM_PWM_Start+0x1f8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d101      	bne.n	8007a4a <HAL_TIM_PWM_Start+0x142>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <HAL_TIM_PWM_Start+0x144>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a22      	ldr	r2, [pc, #136]	@ (8007af0 <HAL_TIM_PWM_Start+0x1e8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01d      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x19e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a72:	d018      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x19e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a22      	ldr	r2, [pc, #136]	@ (8007b04 <HAL_TIM_PWM_Start+0x1fc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x19e>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a21      	ldr	r2, [pc, #132]	@ (8007b08 <HAL_TIM_PWM_Start+0x200>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00e      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x19e>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b0c <HAL_TIM_PWM_Start+0x204>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x19e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a17      	ldr	r2, [pc, #92]	@ (8007af4 <HAL_TIM_PWM_Start+0x1ec>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x19e>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <HAL_TIM_PWM_Start+0x1f0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d115      	bne.n	8007ad2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	4b18      	ldr	r3, [pc, #96]	@ (8007b10 <HAL_TIM_PWM_Start+0x208>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b06      	cmp	r3, #6
 8007ab6:	d015      	beq.n	8007ae4 <HAL_TIM_PWM_Start+0x1dc>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007abe:	d011      	beq.n	8007ae4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad0:	e008      	b.n	8007ae4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e000      	b.n	8007ae6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	40012c00 	.word	0x40012c00
 8007af4:	40013400 	.word	0x40013400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	00010007 	.word	0x00010007

08007b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e0ff      	b.n	8007d32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b14      	cmp	r3, #20
 8007b3e:	f200 80f0 	bhi.w	8007d22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007d23 	.word	0x08007d23
 8007b50:	08007d23 	.word	0x08007d23
 8007b54:	08007d23 	.word	0x08007d23
 8007b58:	08007bdd 	.word	0x08007bdd
 8007b5c:	08007d23 	.word	0x08007d23
 8007b60:	08007d23 	.word	0x08007d23
 8007b64:	08007d23 	.word	0x08007d23
 8007b68:	08007c1f 	.word	0x08007c1f
 8007b6c:	08007d23 	.word	0x08007d23
 8007b70:	08007d23 	.word	0x08007d23
 8007b74:	08007d23 	.word	0x08007d23
 8007b78:	08007c5f 	.word	0x08007c5f
 8007b7c:	08007d23 	.word	0x08007d23
 8007b80:	08007d23 	.word	0x08007d23
 8007b84:	08007d23 	.word	0x08007d23
 8007b88:	08007ca1 	.word	0x08007ca1
 8007b8c:	08007d23 	.word	0x08007d23
 8007b90:	08007d23 	.word	0x08007d23
 8007b94:	08007d23 	.word	0x08007d23
 8007b98:	08007ce1 	.word	0x08007ce1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fa3a 	bl	800801c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0208 	orr.w	r2, r2, #8
 8007bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0204 	bic.w	r2, r2, #4
 8007bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6999      	ldr	r1, [r3, #24]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	619a      	str	r2, [r3, #24]
      break;
 8007bda:	e0a5      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 faaa 	bl	800813c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6999      	ldr	r1, [r3, #24]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	021a      	lsls	r2, r3, #8
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	619a      	str	r2, [r3, #24]
      break;
 8007c1c:	e084      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fb13 	bl	8008250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0208 	orr.w	r2, r2, #8
 8007c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0204 	bic.w	r2, r2, #4
 8007c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69d9      	ldr	r1, [r3, #28]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	61da      	str	r2, [r3, #28]
      break;
 8007c5c:	e064      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fb7b 	bl	8008360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69da      	ldr	r2, [r3, #28]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69d9      	ldr	r1, [r3, #28]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	021a      	lsls	r2, r3, #8
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	61da      	str	r2, [r3, #28]
      break;
 8007c9e:	e043      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fbc4 	bl	8008434 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0208 	orr.w	r2, r2, #8
 8007cba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0204 	bic.w	r2, r2, #4
 8007cca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007cde:	e023      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fc08 	bl	80084fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d20:	e002      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
      break;
 8007d26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop

08007d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e0b6      	b.n	8007ec6 <HAL_TIM_ConfigClockSource+0x18a>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d94:	d03e      	beq.n	8007e14 <HAL_TIM_ConfigClockSource+0xd8>
 8007d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d9a:	f200 8087 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007da2:	f000 8086 	beq.w	8007eb2 <HAL_TIM_ConfigClockSource+0x176>
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007daa:	d87f      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007dac:	2b70      	cmp	r3, #112	@ 0x70
 8007dae:	d01a      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0xaa>
 8007db0:	2b70      	cmp	r3, #112	@ 0x70
 8007db2:	d87b      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007db4:	2b60      	cmp	r3, #96	@ 0x60
 8007db6:	d050      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x11e>
 8007db8:	2b60      	cmp	r3, #96	@ 0x60
 8007dba:	d877      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007dbc:	2b50      	cmp	r3, #80	@ 0x50
 8007dbe:	d03c      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0xfe>
 8007dc0:	2b50      	cmp	r3, #80	@ 0x50
 8007dc2:	d873      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	d058      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x13e>
 8007dc8:	2b40      	cmp	r3, #64	@ 0x40
 8007dca:	d86f      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007dcc:	2b30      	cmp	r3, #48	@ 0x30
 8007dce:	d064      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x15e>
 8007dd0:	2b30      	cmp	r3, #48	@ 0x30
 8007dd2:	d86b      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d060      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x15e>
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d867      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d05c      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x15e>
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d05a      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x15e>
 8007de4:	e062      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007df6:	f000 fc61 	bl	80086bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	609a      	str	r2, [r3, #8]
      break;
 8007e12:	e04f      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e24:	f000 fc4a 	bl	80086bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e36:	609a      	str	r2, [r3, #8]
      break;
 8007e38:	e03c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 fbbe 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2150      	movs	r1, #80	@ 0x50
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fc17 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 8007e58:	e02c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e66:	461a      	mov	r2, r3
 8007e68:	f000 fbdd 	bl	8008626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2160      	movs	r1, #96	@ 0x60
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fc07 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 8007e78:	e01c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 fb9e 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2140      	movs	r1, #64	@ 0x40
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fbf7 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 8007e98:	e00c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f000 fbee 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 8007eaa:	e003      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb0:	e000      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a46      	ldr	r2, [pc, #280]	@ (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d013      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eee:	d00f      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a43      	ldr	r2, [pc, #268]	@ (8008000 <TIM_Base_SetConfig+0x130>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00b      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a42      	ldr	r2, [pc, #264]	@ (8008004 <TIM_Base_SetConfig+0x134>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a41      	ldr	r2, [pc, #260]	@ (8008008 <TIM_Base_SetConfig+0x138>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a40      	ldr	r2, [pc, #256]	@ (800800c <TIM_Base_SetConfig+0x13c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d108      	bne.n	8007f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a35      	ldr	r2, [pc, #212]	@ (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d01f      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f30:	d01b      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a32      	ldr	r2, [pc, #200]	@ (8008000 <TIM_Base_SetConfig+0x130>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d017      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a31      	ldr	r2, [pc, #196]	@ (8008004 <TIM_Base_SetConfig+0x134>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a30      	ldr	r2, [pc, #192]	@ (8008008 <TIM_Base_SetConfig+0x138>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00f      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800800c <TIM_Base_SetConfig+0x13c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00b      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2e      	ldr	r2, [pc, #184]	@ (8008010 <TIM_Base_SetConfig+0x140>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d007      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8008014 <TIM_Base_SetConfig+0x144>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_Base_SetConfig+0x9a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2c      	ldr	r2, [pc, #176]	@ (8008018 <TIM_Base_SetConfig+0x148>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d108      	bne.n	8007f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a16      	ldr	r2, [pc, #88]	@ (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00f      	beq.n	8007fc8 <TIM_Base_SetConfig+0xf8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a18      	ldr	r2, [pc, #96]	@ (800800c <TIM_Base_SetConfig+0x13c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <TIM_Base_SetConfig+0xf8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <TIM_Base_SetConfig+0x140>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <TIM_Base_SetConfig+0xf8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <TIM_Base_SetConfig+0x144>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_Base_SetConfig+0xf8>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <TIM_Base_SetConfig+0x148>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d103      	bne.n	8007fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d105      	bne.n	8007fee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f023 0201 	bic.w	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	611a      	str	r2, [r3, #16]
  }
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40012c00 	.word	0x40012c00
 8008000:	40000400 	.word	0x40000400
 8008004:	40000800 	.word	0x40000800
 8008008:	40000c00 	.word	0x40000c00
 800800c:	40013400 	.word	0x40013400
 8008010:	40014000 	.word	0x40014000
 8008014:	40014400 	.word	0x40014400
 8008018:	40014800 	.word	0x40014800

0800801c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	f023 0201 	bic.w	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800804a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0303 	bic.w	r3, r3, #3
 8008056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 0302 	bic.w	r3, r3, #2
 8008068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a2c      	ldr	r2, [pc, #176]	@ (8008128 <TIM_OC1_SetConfig+0x10c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00f      	beq.n	800809c <TIM_OC1_SetConfig+0x80>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a2b      	ldr	r2, [pc, #172]	@ (800812c <TIM_OC1_SetConfig+0x110>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00b      	beq.n	800809c <TIM_OC1_SetConfig+0x80>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a2a      	ldr	r2, [pc, #168]	@ (8008130 <TIM_OC1_SetConfig+0x114>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_OC1_SetConfig+0x80>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a29      	ldr	r2, [pc, #164]	@ (8008134 <TIM_OC1_SetConfig+0x118>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_OC1_SetConfig+0x80>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a28      	ldr	r2, [pc, #160]	@ (8008138 <TIM_OC1_SetConfig+0x11c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d10c      	bne.n	80080b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f023 0308 	bic.w	r3, r3, #8
 80080a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f023 0304 	bic.w	r3, r3, #4
 80080b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008128 <TIM_OC1_SetConfig+0x10c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_OC1_SetConfig+0xc2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <TIM_OC1_SetConfig+0x110>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_OC1_SetConfig+0xc2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a19      	ldr	r2, [pc, #100]	@ (8008130 <TIM_OC1_SetConfig+0x114>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_OC1_SetConfig+0xc2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a18      	ldr	r2, [pc, #96]	@ (8008134 <TIM_OC1_SetConfig+0x118>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_OC1_SetConfig+0xc2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a17      	ldr	r2, [pc, #92]	@ (8008138 <TIM_OC1_SetConfig+0x11c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d111      	bne.n	8008102 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	4313      	orrs	r3, r2
 8008100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	621a      	str	r2, [r3, #32]
}
 800811c:	bf00      	nop
 800811e:	371c      	adds	r7, #28
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40013400 	.word	0x40013400
 8008130:	40014000 	.word	0x40014000
 8008134:	40014400 	.word	0x40014400
 8008138:	40014800 	.word	0x40014800

0800813c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0210 	bic.w	r2, r3, #16
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0320 	bic.w	r3, r3, #32
 800818a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a28      	ldr	r2, [pc, #160]	@ (800823c <TIM_OC2_SetConfig+0x100>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC2_SetConfig+0x6c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a27      	ldr	r2, [pc, #156]	@ (8008240 <TIM_OC2_SetConfig+0x104>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d10d      	bne.n	80081c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1d      	ldr	r2, [pc, #116]	@ (800823c <TIM_OC2_SetConfig+0x100>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00f      	beq.n	80081ec <TIM_OC2_SetConfig+0xb0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008240 <TIM_OC2_SetConfig+0x104>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00b      	beq.n	80081ec <TIM_OC2_SetConfig+0xb0>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <TIM_OC2_SetConfig+0x108>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d007      	beq.n	80081ec <TIM_OC2_SetConfig+0xb0>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1a      	ldr	r2, [pc, #104]	@ (8008248 <TIM_OC2_SetConfig+0x10c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d003      	beq.n	80081ec <TIM_OC2_SetConfig+0xb0>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a19      	ldr	r2, [pc, #100]	@ (800824c <TIM_OC2_SetConfig+0x110>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d113      	bne.n	8008214 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40013400 	.word	0x40013400
 8008244:	40014000 	.word	0x40014000
 8008248:	40014400 	.word	0x40014400
 800824c:	40014800 	.word	0x40014800

08008250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800827e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800829c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a27      	ldr	r2, [pc, #156]	@ (800834c <TIM_OC3_SetConfig+0xfc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_OC3_SetConfig+0x6a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a26      	ldr	r2, [pc, #152]	@ (8008350 <TIM_OC3_SetConfig+0x100>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d10d      	bne.n	80082d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a1c      	ldr	r2, [pc, #112]	@ (800834c <TIM_OC3_SetConfig+0xfc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00f      	beq.n	80082fe <TIM_OC3_SetConfig+0xae>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008350 <TIM_OC3_SetConfig+0x100>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00b      	beq.n	80082fe <TIM_OC3_SetConfig+0xae>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008354 <TIM_OC3_SetConfig+0x104>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d007      	beq.n	80082fe <TIM_OC3_SetConfig+0xae>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a19      	ldr	r2, [pc, #100]	@ (8008358 <TIM_OC3_SetConfig+0x108>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d003      	beq.n	80082fe <TIM_OC3_SetConfig+0xae>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a18      	ldr	r2, [pc, #96]	@ (800835c <TIM_OC3_SetConfig+0x10c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d113      	bne.n	8008326 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800830c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	621a      	str	r2, [r3, #32]
}
 8008340:	bf00      	nop
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40013400 	.word	0x40013400
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800

08008360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800838e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800839a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	031b      	lsls	r3, r3, #12
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a18      	ldr	r2, [pc, #96]	@ (8008420 <TIM_OC4_SetConfig+0xc0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00f      	beq.n	80083e4 <TIM_OC4_SetConfig+0x84>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a17      	ldr	r2, [pc, #92]	@ (8008424 <TIM_OC4_SetConfig+0xc4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00b      	beq.n	80083e4 <TIM_OC4_SetConfig+0x84>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a16      	ldr	r2, [pc, #88]	@ (8008428 <TIM_OC4_SetConfig+0xc8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d007      	beq.n	80083e4 <TIM_OC4_SetConfig+0x84>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a15      	ldr	r2, [pc, #84]	@ (800842c <TIM_OC4_SetConfig+0xcc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_OC4_SetConfig+0x84>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a14      	ldr	r2, [pc, #80]	@ (8008430 <TIM_OC4_SetConfig+0xd0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d109      	bne.n	80083f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	019b      	lsls	r3, r3, #6
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	621a      	str	r2, [r3, #32]
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40012c00 	.word	0x40012c00
 8008424:	40013400 	.word	0x40013400
 8008428:	40014000 	.word	0x40014000
 800842c:	40014400 	.word	0x40014400
 8008430:	40014800 	.word	0x40014800

08008434 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008478:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	041b      	lsls	r3, r3, #16
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_OC5_SetConfig+0xb4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00f      	beq.n	80084ae <TIM_OC5_SetConfig+0x7a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_OC5_SetConfig+0xb8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_OC5_SetConfig+0x7a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <TIM_OC5_SetConfig+0xbc>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d007      	beq.n	80084ae <TIM_OC5_SetConfig+0x7a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <TIM_OC5_SetConfig+0xc0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_OC5_SetConfig+0x7a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a13      	ldr	r2, [pc, #76]	@ (80084f8 <TIM_OC5_SetConfig+0xc4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d109      	bne.n	80084c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	621a      	str	r2, [r3, #32]
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40013400 	.word	0x40013400
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800

080084fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800852a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800852e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4313      	orrs	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	051b      	lsls	r3, r3, #20
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a18      	ldr	r2, [pc, #96]	@ (80085b4 <TIM_OC6_SetConfig+0xb8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00f      	beq.n	8008578 <TIM_OC6_SetConfig+0x7c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a17      	ldr	r2, [pc, #92]	@ (80085b8 <TIM_OC6_SetConfig+0xbc>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00b      	beq.n	8008578 <TIM_OC6_SetConfig+0x7c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a16      	ldr	r2, [pc, #88]	@ (80085bc <TIM_OC6_SetConfig+0xc0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d007      	beq.n	8008578 <TIM_OC6_SetConfig+0x7c>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a15      	ldr	r2, [pc, #84]	@ (80085c0 <TIM_OC6_SetConfig+0xc4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_OC6_SetConfig+0x7c>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a14      	ldr	r2, [pc, #80]	@ (80085c4 <TIM_OC6_SetConfig+0xc8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d109      	bne.n	800858c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800857e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	029b      	lsls	r3, r3, #10
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	621a      	str	r2, [r3, #32]
}
 80085a6:	bf00      	nop
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	40012c00 	.word	0x40012c00
 80085b8:	40013400 	.word	0x40013400
 80085bc:	40014000 	.word	0x40014000
 80085c0:	40014400 	.word	0x40014400
 80085c4:	40014800 	.word	0x40014800

080085c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f023 030a 	bic.w	r3, r3, #10
 8008604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008626:	b480      	push	{r7}
 8008628:	b087      	sub	sp, #28
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	f023 0210 	bic.w	r2, r3, #16
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	031b      	lsls	r3, r3, #12
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f043 0307 	orr.w	r3, r3, #7
 80086a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	609a      	str	r2, [r3, #8]
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	021a      	lsls	r2, r3, #8
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	431a      	orrs	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	609a      	str	r2, [r3, #8]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 031f 	and.w	r3, r3, #31
 800870e:	2201      	movs	r2, #1
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1a      	ldr	r2, [r3, #32]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	43db      	mvns	r3, r3
 800871e:	401a      	ands	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	fa01 f303 	lsl.w	r3, r1, r3
 8008734:	431a      	orrs	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	621a      	str	r2, [r3, #32]
}
 800873a:	bf00      	nop
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800875c:	2302      	movs	r3, #2
 800875e:	e068      	b.n	8008832 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a2e      	ldr	r2, [pc, #184]	@ (8008840 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a2d      	ldr	r2, [pc, #180]	@ (8008844 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d108      	bne.n	80087a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800879a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008840 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d01d      	beq.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d2:	d018      	beq.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a1a      	ldr	r2, [pc, #104]	@ (800884c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00e      	beq.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a18      	ldr	r2, [pc, #96]	@ (8008850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d009      	beq.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a13      	ldr	r2, [pc, #76]	@ (8008844 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d004      	beq.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a14      	ldr	r2, [pc, #80]	@ (8008854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d10c      	bne.n	8008820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800880c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	4313      	orrs	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40013400 	.word	0x40013400
 8008848:	40000400 	.word	0x40000400
 800884c:	40000800 	.word	0x40000800
 8008850:	40000c00 	.word	0x40000c00
 8008854:	40014000 	.word	0x40014000

08008858 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008870:	2302      	movs	r3, #2
 8008872:	e065      	b.n	8008940 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	041b      	lsls	r3, r3, #16
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a16      	ldr	r2, [pc, #88]	@ (800894c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a14      	ldr	r2, [pc, #80]	@ (8008950 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d115      	bne.n	800892e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890c:	051b      	lsls	r3, r3, #20
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40013400 	.word	0x40013400

08008954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e040      	b.n	80089e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7fb fdfe 	bl	8004578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2224      	movs	r2, #36	@ 0x24
 8008980:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0201 	bic.w	r2, r2, #1
 8008990:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fedc 	bl	8009758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc21 	bl	80091e8 <UART_SetConfig>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d101      	bne.n	80089b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e01b      	b.n	80089e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0201 	orr.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 ff5b 	bl	800989c <UART_CheckIdleState>
 80089e6:	4603      	mov	r3, r0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	@ 0x28
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	4613      	mov	r3, r2
 80089fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d177      	bne.n	8008af8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_UART_Transmit+0x24>
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e070      	b.n	8008afa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2221      	movs	r2, #33	@ 0x21
 8008a24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a26:	f7fb ff27 	bl	8004878 <HAL_GetTick>
 8008a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	88fa      	ldrh	r2, [r7, #6]
 8008a30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a44:	d108      	bne.n	8008a58 <HAL_UART_Transmit+0x68>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d104      	bne.n	8008a58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e003      	b.n	8008a60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a60:	e02f      	b.n	8008ac2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2180      	movs	r1, #128	@ 0x80
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 ffbd 	bl	80099ec <UART_WaitOnFlagUntilTimeout>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d004      	beq.n	8008a82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e03b      	b.n	8008afa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	881a      	ldrh	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a94:	b292      	uxth	r2, r2
 8008a96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e007      	b.n	8008ab0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1c9      	bne.n	8008a62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2140      	movs	r1, #64	@ 0x40
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 ff87 	bl	80099ec <UART_WaitOnFlagUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e005      	b.n	8008afa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e000      	b.n	8008afa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3720      	adds	r7, #32
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	@ 0x28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b18:	2b20      	cmp	r3, #32
 8008b1a:	d137      	bne.n	8008b8c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <HAL_UART_Receive_IT+0x24>
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e030      	b.n	8008b8e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a18      	ldr	r2, [pc, #96]	@ (8008b98 <HAL_UART_Receive_IT+0x94>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d01f      	beq.n	8008b7c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d018      	beq.n	8008b7c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	613b      	str	r3, [r7, #16]
   return(result);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	623b      	str	r3, [r7, #32]
 8008b6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	69f9      	ldr	r1, [r7, #28]
 8008b6e:	6a3a      	ldr	r2, [r7, #32]
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e6      	bne.n	8008b4a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 ffa0 	bl	8009ac8 <UART_Start_Receive_IT>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	e000      	b.n	8008b8e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3728      	adds	r7, #40	@ 0x28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40008000 	.word	0x40008000

08008b9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b0ba      	sub	sp, #232	@ 0xe8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bca:	4013      	ands	r3, r2
 8008bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d115      	bne.n	8008c04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00f      	beq.n	8008c04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d009      	beq.n	8008c04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 82ca 	beq.w	800918e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
      }
      return;
 8008c02:	e2c4      	b.n	800918e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8117 	beq.w	8008e3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008c1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c1e:	4b85      	ldr	r3, [pc, #532]	@ (8008e34 <HAL_UART_IRQHandler+0x298>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 810a 	beq.w	8008e3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d011      	beq.n	8008c58 <HAL_UART_IRQHandler+0xbc>
 8008c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2201      	movs	r2, #1
 8008c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c4e:	f043 0201 	orr.w	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d011      	beq.n	8008c88 <HAL_UART_IRQHandler+0xec>
 8008c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2202      	movs	r2, #2
 8008c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c7e:	f043 0204 	orr.w	r2, r3, #4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d011      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x11c>
 8008c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cae:	f043 0202 	orr.w	r2, r3, #2
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d017      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d105      	bne.n	8008cdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cea:	f043 0208 	orr.w	r2, r3, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d012      	beq.n	8008d26 <HAL_UART_IRQHandler+0x18a>
 8008d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d1c:	f043 0220 	orr.w	r2, r3, #32
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8230 	beq.w	8009192 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6e:	2b40      	cmp	r3, #64	@ 0x40
 8008d70:	d005      	beq.n	8008d7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d04f      	beq.n	8008e1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 ff68 	bl	8009c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8e:	2b40      	cmp	r3, #64	@ 0x40
 8008d90:	d141      	bne.n	8008e16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1d9      	bne.n	8008d92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d013      	beq.n	8008e0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dea:	4a13      	ldr	r2, [pc, #76]	@ (8008e38 <HAL_UART_IRQHandler+0x29c>)
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fb febf 	bl	8004b76 <HAL_DMA_Abort_IT>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d017      	beq.n	8008e2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0c:	e00f      	b.n	8008e2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f9d4 	bl	80091bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	e00b      	b.n	8008e2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f9d0 	bl	80091bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1c:	e007      	b.n	8008e2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9cc 	bl	80091bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008e2c:	e1b1      	b.n	8009192 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2e:	bf00      	nop
    return;
 8008e30:	e1af      	b.n	8009192 <HAL_UART_IRQHandler+0x5f6>
 8008e32:	bf00      	nop
 8008e34:	04000120 	.word	0x04000120
 8008e38:	08009d1d 	.word	0x08009d1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f040 816a 	bne.w	800911a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 8163 	beq.w	800911a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 815c 	beq.w	800911a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2210      	movs	r2, #16
 8008e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e74:	2b40      	cmp	r3, #64	@ 0x40
 8008e76:	f040 80d4 	bne.w	8009022 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 80ad 	beq.w	8008fea <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	f080 80a5 	bcs.w	8008fea <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f040 8086 	bne.w	8008fc8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1da      	bne.n	8008ebc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e1      	bne.n	8008f06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e3      	bne.n	8008f42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f98:	f023 0310 	bic.w	r3, r3, #16
 8008f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e4      	bne.n	8008f88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fb fd99 	bl	8004afa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f8f4 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008fe8:	e0d5      	b.n	8009196 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	f040 80ce 	bne.w	8009196 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b20      	cmp	r3, #32
 8009008:	f040 80c5 	bne.w	8009196 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2202      	movs	r2, #2
 8009010:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8d8 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
      return;
 8009020:	e0b9      	b.n	8009196 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800902e:	b29b      	uxth	r3, r3
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80ab 	beq.w	800919a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80a6 	beq.w	800919a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800905c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800905e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009070:	647b      	str	r3, [r7, #68]	@ 0x44
 8009072:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800907e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e4      	bne.n	800904e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3308      	adds	r3, #8
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	623b      	str	r3, [r7, #32]
   return(result);
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f023 0301 	bic.w	r3, r3, #1
 800909a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80090aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e3      	bne.n	8009084 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f023 0310 	bic.w	r3, r3, #16
 80090e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090f2:	61fb      	str	r3, [r7, #28]
 80090f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	69b9      	ldr	r1, [r7, #24]
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e4      	bne.n	80090d0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2202      	movs	r2, #2
 800910a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800910c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f85c 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009118:	e03f      	b.n	800919a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800911a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00e      	beq.n	8009144 <HAL_UART_IRQHandler+0x5a8>
 8009126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800912a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d008      	beq.n	8009144 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800913a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 ffe9 	bl	800a114 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009142:	e02d      	b.n	80091a0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00e      	beq.n	800916e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009158:	2b00      	cmp	r3, #0
 800915a:	d008      	beq.n	800916e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01c      	beq.n	800919e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	4798      	blx	r3
    }
    return;
 800916c:	e017      	b.n	800919e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800916e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d012      	beq.n	80091a0 <HAL_UART_IRQHandler+0x604>
 800917a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fdde 	bl	8009d48 <UART_EndTransmit_IT>
    return;
 800918c:	e008      	b.n	80091a0 <HAL_UART_IRQHandler+0x604>
      return;
 800918e:	bf00      	nop
 8009190:	e006      	b.n	80091a0 <HAL_UART_IRQHandler+0x604>
    return;
 8009192:	bf00      	nop
 8009194:	e004      	b.n	80091a0 <HAL_UART_IRQHandler+0x604>
      return;
 8009196:	bf00      	nop
 8009198:	e002      	b.n	80091a0 <HAL_UART_IRQHandler+0x604>
      return;
 800919a:	bf00      	nop
 800919c:	e000      	b.n	80091a0 <HAL_UART_IRQHandler+0x604>
    return;
 800919e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80091a0:	37e8      	adds	r7, #232	@ 0xe8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop

080091a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091ec:	b08a      	sub	sp, #40	@ 0x28
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	431a      	orrs	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	431a      	orrs	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	4313      	orrs	r3, r2
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4ba4      	ldr	r3, [pc, #656]	@ (80094a8 <UART_SetConfig+0x2c0>)
 8009218:	4013      	ands	r3, r2
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009220:	430b      	orrs	r3, r1
 8009222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a99      	ldr	r2, [pc, #612]	@ (80094ac <UART_SetConfig+0x2c4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d004      	beq.n	8009254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009250:	4313      	orrs	r3, r2
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009264:	430a      	orrs	r2, r1
 8009266:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a90      	ldr	r2, [pc, #576]	@ (80094b0 <UART_SetConfig+0x2c8>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d126      	bne.n	80092c0 <UART_SetConfig+0xd8>
 8009272:	4b90      	ldr	r3, [pc, #576]	@ (80094b4 <UART_SetConfig+0x2cc>)
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	2b03      	cmp	r3, #3
 800927e:	d81b      	bhi.n	80092b8 <UART_SetConfig+0xd0>
 8009280:	a201      	add	r2, pc, #4	@ (adr r2, 8009288 <UART_SetConfig+0xa0>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	08009299 	.word	0x08009299
 800928c:	080092a9 	.word	0x080092a9
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092b1 	.word	0x080092b1
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800929e:	e116      	b.n	80094ce <UART_SetConfig+0x2e6>
 80092a0:	2302      	movs	r3, #2
 80092a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092a6:	e112      	b.n	80094ce <UART_SetConfig+0x2e6>
 80092a8:	2304      	movs	r3, #4
 80092aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092ae:	e10e      	b.n	80094ce <UART_SetConfig+0x2e6>
 80092b0:	2308      	movs	r3, #8
 80092b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092b6:	e10a      	b.n	80094ce <UART_SetConfig+0x2e6>
 80092b8:	2310      	movs	r3, #16
 80092ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092be:	e106      	b.n	80094ce <UART_SetConfig+0x2e6>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a7c      	ldr	r2, [pc, #496]	@ (80094b8 <UART_SetConfig+0x2d0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d138      	bne.n	800933c <UART_SetConfig+0x154>
 80092ca:	4b7a      	ldr	r3, [pc, #488]	@ (80094b4 <UART_SetConfig+0x2cc>)
 80092cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d0:	f003 030c 	and.w	r3, r3, #12
 80092d4:	2b0c      	cmp	r3, #12
 80092d6:	d82d      	bhi.n	8009334 <UART_SetConfig+0x14c>
 80092d8:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <UART_SetConfig+0xf8>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	08009315 	.word	0x08009315
 80092e4:	08009335 	.word	0x08009335
 80092e8:	08009335 	.word	0x08009335
 80092ec:	08009335 	.word	0x08009335
 80092f0:	08009325 	.word	0x08009325
 80092f4:	08009335 	.word	0x08009335
 80092f8:	08009335 	.word	0x08009335
 80092fc:	08009335 	.word	0x08009335
 8009300:	0800931d 	.word	0x0800931d
 8009304:	08009335 	.word	0x08009335
 8009308:	08009335 	.word	0x08009335
 800930c:	08009335 	.word	0x08009335
 8009310:	0800932d 	.word	0x0800932d
 8009314:	2300      	movs	r3, #0
 8009316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800931a:	e0d8      	b.n	80094ce <UART_SetConfig+0x2e6>
 800931c:	2302      	movs	r3, #2
 800931e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009322:	e0d4      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009324:	2304      	movs	r3, #4
 8009326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800932a:	e0d0      	b.n	80094ce <UART_SetConfig+0x2e6>
 800932c:	2308      	movs	r3, #8
 800932e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009332:	e0cc      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009334:	2310      	movs	r3, #16
 8009336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800933a:	e0c8      	b.n	80094ce <UART_SetConfig+0x2e6>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a5e      	ldr	r2, [pc, #376]	@ (80094bc <UART_SetConfig+0x2d4>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d125      	bne.n	8009392 <UART_SetConfig+0x1aa>
 8009346:	4b5b      	ldr	r3, [pc, #364]	@ (80094b4 <UART_SetConfig+0x2cc>)
 8009348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009350:	2b30      	cmp	r3, #48	@ 0x30
 8009352:	d016      	beq.n	8009382 <UART_SetConfig+0x19a>
 8009354:	2b30      	cmp	r3, #48	@ 0x30
 8009356:	d818      	bhi.n	800938a <UART_SetConfig+0x1a2>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d00a      	beq.n	8009372 <UART_SetConfig+0x18a>
 800935c:	2b20      	cmp	r3, #32
 800935e:	d814      	bhi.n	800938a <UART_SetConfig+0x1a2>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <UART_SetConfig+0x182>
 8009364:	2b10      	cmp	r3, #16
 8009366:	d008      	beq.n	800937a <UART_SetConfig+0x192>
 8009368:	e00f      	b.n	800938a <UART_SetConfig+0x1a2>
 800936a:	2300      	movs	r3, #0
 800936c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009370:	e0ad      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009372:	2302      	movs	r3, #2
 8009374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009378:	e0a9      	b.n	80094ce <UART_SetConfig+0x2e6>
 800937a:	2304      	movs	r3, #4
 800937c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009380:	e0a5      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009382:	2308      	movs	r3, #8
 8009384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009388:	e0a1      	b.n	80094ce <UART_SetConfig+0x2e6>
 800938a:	2310      	movs	r3, #16
 800938c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009390:	e09d      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4a      	ldr	r2, [pc, #296]	@ (80094c0 <UART_SetConfig+0x2d8>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d125      	bne.n	80093e8 <UART_SetConfig+0x200>
 800939c:	4b45      	ldr	r3, [pc, #276]	@ (80094b4 <UART_SetConfig+0x2cc>)
 800939e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80093a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80093a8:	d016      	beq.n	80093d8 <UART_SetConfig+0x1f0>
 80093aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80093ac:	d818      	bhi.n	80093e0 <UART_SetConfig+0x1f8>
 80093ae:	2b80      	cmp	r3, #128	@ 0x80
 80093b0:	d00a      	beq.n	80093c8 <UART_SetConfig+0x1e0>
 80093b2:	2b80      	cmp	r3, #128	@ 0x80
 80093b4:	d814      	bhi.n	80093e0 <UART_SetConfig+0x1f8>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <UART_SetConfig+0x1d8>
 80093ba:	2b40      	cmp	r3, #64	@ 0x40
 80093bc:	d008      	beq.n	80093d0 <UART_SetConfig+0x1e8>
 80093be:	e00f      	b.n	80093e0 <UART_SetConfig+0x1f8>
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093c6:	e082      	b.n	80094ce <UART_SetConfig+0x2e6>
 80093c8:	2302      	movs	r3, #2
 80093ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ce:	e07e      	b.n	80094ce <UART_SetConfig+0x2e6>
 80093d0:	2304      	movs	r3, #4
 80093d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093d6:	e07a      	b.n	80094ce <UART_SetConfig+0x2e6>
 80093d8:	2308      	movs	r3, #8
 80093da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093de:	e076      	b.n	80094ce <UART_SetConfig+0x2e6>
 80093e0:	2310      	movs	r3, #16
 80093e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093e6:	e072      	b.n	80094ce <UART_SetConfig+0x2e6>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a35      	ldr	r2, [pc, #212]	@ (80094c4 <UART_SetConfig+0x2dc>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d12a      	bne.n	8009448 <UART_SetConfig+0x260>
 80093f2:	4b30      	ldr	r3, [pc, #192]	@ (80094b4 <UART_SetConfig+0x2cc>)
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009400:	d01a      	beq.n	8009438 <UART_SetConfig+0x250>
 8009402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009406:	d81b      	bhi.n	8009440 <UART_SetConfig+0x258>
 8009408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940c:	d00c      	beq.n	8009428 <UART_SetConfig+0x240>
 800940e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009412:	d815      	bhi.n	8009440 <UART_SetConfig+0x258>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <UART_SetConfig+0x238>
 8009418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800941c:	d008      	beq.n	8009430 <UART_SetConfig+0x248>
 800941e:	e00f      	b.n	8009440 <UART_SetConfig+0x258>
 8009420:	2300      	movs	r3, #0
 8009422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009426:	e052      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009428:	2302      	movs	r3, #2
 800942a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800942e:	e04e      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009430:	2304      	movs	r3, #4
 8009432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009436:	e04a      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009438:	2308      	movs	r3, #8
 800943a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800943e:	e046      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009440:	2310      	movs	r3, #16
 8009442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009446:	e042      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a17      	ldr	r2, [pc, #92]	@ (80094ac <UART_SetConfig+0x2c4>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d13a      	bne.n	80094c8 <UART_SetConfig+0x2e0>
 8009452:	4b18      	ldr	r3, [pc, #96]	@ (80094b4 <UART_SetConfig+0x2cc>)
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800945c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009460:	d01a      	beq.n	8009498 <UART_SetConfig+0x2b0>
 8009462:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009466:	d81b      	bhi.n	80094a0 <UART_SetConfig+0x2b8>
 8009468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800946c:	d00c      	beq.n	8009488 <UART_SetConfig+0x2a0>
 800946e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009472:	d815      	bhi.n	80094a0 <UART_SetConfig+0x2b8>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <UART_SetConfig+0x298>
 8009478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800947c:	d008      	beq.n	8009490 <UART_SetConfig+0x2a8>
 800947e:	e00f      	b.n	80094a0 <UART_SetConfig+0x2b8>
 8009480:	2300      	movs	r3, #0
 8009482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009486:	e022      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009488:	2302      	movs	r3, #2
 800948a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800948e:	e01e      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009490:	2304      	movs	r3, #4
 8009492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009496:	e01a      	b.n	80094ce <UART_SetConfig+0x2e6>
 8009498:	2308      	movs	r3, #8
 800949a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800949e:	e016      	b.n	80094ce <UART_SetConfig+0x2e6>
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094a6:	e012      	b.n	80094ce <UART_SetConfig+0x2e6>
 80094a8:	efff69f3 	.word	0xefff69f3
 80094ac:	40008000 	.word	0x40008000
 80094b0:	40013800 	.word	0x40013800
 80094b4:	40021000 	.word	0x40021000
 80094b8:	40004400 	.word	0x40004400
 80094bc:	40004800 	.word	0x40004800
 80094c0:	40004c00 	.word	0x40004c00
 80094c4:	40005000 	.word	0x40005000
 80094c8:	2310      	movs	r3, #16
 80094ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009750 <UART_SetConfig+0x568>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d17a      	bne.n	80095ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d824      	bhi.n	800952a <UART_SetConfig+0x342>
 80094e0:	a201      	add	r2, pc, #4	@ (adr r2, 80094e8 <UART_SetConfig+0x300>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	0800952b 	.word	0x0800952b
 80094f0:	08009515 	.word	0x08009515
 80094f4:	0800952b 	.word	0x0800952b
 80094f8:	0800951b 	.word	0x0800951b
 80094fc:	0800952b 	.word	0x0800952b
 8009500:	0800952b 	.word	0x0800952b
 8009504:	0800952b 	.word	0x0800952b
 8009508:	08009523 	.word	0x08009523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800950c:	f7fd fbfc 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 8009510:	61f8      	str	r0, [r7, #28]
        break;
 8009512:	e010      	b.n	8009536 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009514:	4b8f      	ldr	r3, [pc, #572]	@ (8009754 <UART_SetConfig+0x56c>)
 8009516:	61fb      	str	r3, [r7, #28]
        break;
 8009518:	e00d      	b.n	8009536 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800951a:	f7fd fb5d 	bl	8006bd8 <HAL_RCC_GetSysClockFreq>
 800951e:	61f8      	str	r0, [r7, #28]
        break;
 8009520:	e009      	b.n	8009536 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009526:	61fb      	str	r3, [r7, #28]
        break;
 8009528:	e005      	b.n	8009536 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80fb 	beq.w	8009734 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	4613      	mov	r3, r2
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	4413      	add	r3, r2
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	429a      	cmp	r2, r3
 800954c:	d305      	bcc.n	800955a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009554:	69fa      	ldr	r2, [r7, #28]
 8009556:	429a      	cmp	r2, r3
 8009558:	d903      	bls.n	8009562 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009560:	e0e8      	b.n	8009734 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	2200      	movs	r2, #0
 8009566:	461c      	mov	r4, r3
 8009568:	4615      	mov	r5, r2
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	022b      	lsls	r3, r5, #8
 8009574:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009578:	0222      	lsls	r2, r4, #8
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	6849      	ldr	r1, [r1, #4]
 800957e:	0849      	lsrs	r1, r1, #1
 8009580:	2000      	movs	r0, #0
 8009582:	4688      	mov	r8, r1
 8009584:	4681      	mov	r9, r0
 8009586:	eb12 0a08 	adds.w	sl, r2, r8
 800958a:	eb43 0b09 	adc.w	fp, r3, r9
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	603b      	str	r3, [r7, #0]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959c:	4650      	mov	r0, sl
 800959e:	4659      	mov	r1, fp
 80095a0:	f7f7 fb52 	bl	8000c48 <__aeabi_uldivmod>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4613      	mov	r3, r2
 80095aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095b2:	d308      	bcc.n	80095c6 <UART_SetConfig+0x3de>
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ba:	d204      	bcs.n	80095c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	60da      	str	r2, [r3, #12]
 80095c4:	e0b6      	b.n	8009734 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80095cc:	e0b2      	b.n	8009734 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095d6:	d15e      	bne.n	8009696 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80095d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d828      	bhi.n	8009632 <UART_SetConfig+0x44a>
 80095e0:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x400>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	08009615 	.word	0x08009615
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	08009633 	.word	0x08009633
 80095f8:	08009623 	.word	0x08009623
 80095fc:	08009633 	.word	0x08009633
 8009600:	08009633 	.word	0x08009633
 8009604:	08009633 	.word	0x08009633
 8009608:	0800962b 	.word	0x0800962b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800960c:	f7fd fb7c 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 8009610:	61f8      	str	r0, [r7, #28]
        break;
 8009612:	e014      	b.n	800963e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009614:	f7fd fb8e 	bl	8006d34 <HAL_RCC_GetPCLK2Freq>
 8009618:	61f8      	str	r0, [r7, #28]
        break;
 800961a:	e010      	b.n	800963e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800961c:	4b4d      	ldr	r3, [pc, #308]	@ (8009754 <UART_SetConfig+0x56c>)
 800961e:	61fb      	str	r3, [r7, #28]
        break;
 8009620:	e00d      	b.n	800963e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009622:	f7fd fad9 	bl	8006bd8 <HAL_RCC_GetSysClockFreq>
 8009626:	61f8      	str	r0, [r7, #28]
        break;
 8009628:	e009      	b.n	800963e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962e:	61fb      	str	r3, [r7, #28]
        break;
 8009630:	e005      	b.n	800963e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800963c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d077      	beq.n	8009734 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	005a      	lsls	r2, r3, #1
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	441a      	add	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	fbb2 f3f3 	udiv	r3, r2, r3
 8009658:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b0f      	cmp	r3, #15
 800965e:	d916      	bls.n	800968e <UART_SetConfig+0x4a6>
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009666:	d212      	bcs.n	800968e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	b29b      	uxth	r3, r3
 800966c:	f023 030f 	bic.w	r3, r3, #15
 8009670:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	085b      	lsrs	r3, r3, #1
 8009676:	b29b      	uxth	r3, r3
 8009678:	f003 0307 	and.w	r3, r3, #7
 800967c:	b29a      	uxth	r2, r3
 800967e:	8afb      	ldrh	r3, [r7, #22]
 8009680:	4313      	orrs	r3, r2
 8009682:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	8afa      	ldrh	r2, [r7, #22]
 800968a:	60da      	str	r2, [r3, #12]
 800968c:	e052      	b.n	8009734 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009694:	e04e      	b.n	8009734 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009696:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800969a:	2b08      	cmp	r3, #8
 800969c:	d827      	bhi.n	80096ee <UART_SetConfig+0x506>
 800969e:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <UART_SetConfig+0x4bc>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	080096ef 	.word	0x080096ef
 80096b4:	080096df 	.word	0x080096df
 80096b8:	080096ef 	.word	0x080096ef
 80096bc:	080096ef 	.word	0x080096ef
 80096c0:	080096ef 	.word	0x080096ef
 80096c4:	080096e7 	.word	0x080096e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c8:	f7fd fb1e 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 80096cc:	61f8      	str	r0, [r7, #28]
        break;
 80096ce:	e014      	b.n	80096fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096d0:	f7fd fb30 	bl	8006d34 <HAL_RCC_GetPCLK2Freq>
 80096d4:	61f8      	str	r0, [r7, #28]
        break;
 80096d6:	e010      	b.n	80096fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009754 <UART_SetConfig+0x56c>)
 80096da:	61fb      	str	r3, [r7, #28]
        break;
 80096dc:	e00d      	b.n	80096fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096de:	f7fd fa7b 	bl	8006bd8 <HAL_RCC_GetSysClockFreq>
 80096e2:	61f8      	str	r0, [r7, #28]
        break;
 80096e4:	e009      	b.n	80096fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096ea:	61fb      	str	r3, [r7, #28]
        break;
 80096ec:	e005      	b.n	80096fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80096f8:	bf00      	nop
    }

    if (pclk != 0U)
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d019      	beq.n	8009734 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	085a      	lsrs	r2, r3, #1
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	441a      	add	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009712:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	2b0f      	cmp	r3, #15
 8009718:	d909      	bls.n	800972e <UART_SetConfig+0x546>
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009720:	d205      	bcs.n	800972e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60da      	str	r2, [r3, #12]
 800972c:	e002      	b.n	8009734 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009740:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009744:	4618      	mov	r0, r3
 8009746:	3728      	adds	r7, #40	@ 0x28
 8009748:	46bd      	mov	sp, r7
 800974a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800974e:	bf00      	nop
 8009750:	40008000 	.word	0x40008000
 8009754:	00f42400 	.word	0x00f42400

08009758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01a      	beq.n	800986e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009856:	d10a      	bne.n	800986e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	605a      	str	r2, [r3, #4]
  }
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b098      	sub	sp, #96	@ 0x60
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098ac:	f7fa ffe4 	bl	8004878 <HAL_GetTick>
 80098b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d12e      	bne.n	800991e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098c8:	2200      	movs	r2, #0
 80098ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f88c 	bl	80099ec <UART_WaitOnFlagUntilTimeout>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d021      	beq.n	800991e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e6      	bne.n	80098da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2220      	movs	r2, #32
 8009910:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e062      	b.n	80099e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b04      	cmp	r3, #4
 800992a:	d149      	bne.n	80099c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800992c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009934:	2200      	movs	r2, #0
 8009936:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f856 	bl	80099ec <UART_WaitOnFlagUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d03c      	beq.n	80099c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	623b      	str	r3, [r7, #32]
   return(result);
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800995a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009964:	633b      	str	r3, [r7, #48]	@ 0x30
 8009966:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800996a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e6      	bne.n	8009946 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3308      	adds	r3, #8
 800997e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	60fb      	str	r3, [r7, #12]
   return(result);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3308      	adds	r3, #8
 8009996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009998:	61fa      	str	r2, [r7, #28]
 800999a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	617b      	str	r3, [r7, #20]
   return(result);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e5      	bne.n	8009978 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e011      	b.n	80099e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3758      	adds	r7, #88	@ 0x58
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	4613      	mov	r3, r2
 80099fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099fc:	e04f      	b.n	8009a9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a04:	d04b      	beq.n	8009a9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a06:	f7fa ff37 	bl	8004878 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d302      	bcc.n	8009a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e04e      	b.n	8009abe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d037      	beq.n	8009a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b80      	cmp	r3, #128	@ 0x80
 8009a32:	d034      	beq.n	8009a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2b40      	cmp	r3, #64	@ 0x40
 8009a38:	d031      	beq.n	8009a9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d110      	bne.n	8009a6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 f8ff 	bl	8009c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e029      	b.n	8009abe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a78:	d111      	bne.n	8009a9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 f8e5 	bl	8009c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e00f      	b.n	8009abe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69da      	ldr	r2, [r3, #28]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	bf0c      	ite	eq
 8009aae:	2301      	moveq	r3, #1
 8009ab0:	2300      	movne	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d0a0      	beq.n	80099fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b097      	sub	sp, #92	@ 0x5c
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	88fa      	ldrh	r2, [r7, #6]
 8009ae0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	88fa      	ldrh	r2, [r7, #6]
 8009ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009afa:	d10e      	bne.n	8009b1a <UART_Start_Receive_IT+0x52>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d105      	bne.n	8009b10 <UART_Start_Receive_IT+0x48>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b0e:	e02d      	b.n	8009b6c <UART_Start_Receive_IT+0xa4>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	22ff      	movs	r2, #255	@ 0xff
 8009b14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b18:	e028      	b.n	8009b6c <UART_Start_Receive_IT+0xa4>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10d      	bne.n	8009b3e <UART_Start_Receive_IT+0x76>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d104      	bne.n	8009b34 <UART_Start_Receive_IT+0x6c>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	22ff      	movs	r2, #255	@ 0xff
 8009b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b32:	e01b      	b.n	8009b6c <UART_Start_Receive_IT+0xa4>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	227f      	movs	r2, #127	@ 0x7f
 8009b38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b3c:	e016      	b.n	8009b6c <UART_Start_Receive_IT+0xa4>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b46:	d10d      	bne.n	8009b64 <UART_Start_Receive_IT+0x9c>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <UART_Start_Receive_IT+0x92>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	227f      	movs	r2, #127	@ 0x7f
 8009b54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b58:	e008      	b.n	8009b6c <UART_Start_Receive_IT+0xa4>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	223f      	movs	r2, #63	@ 0x3f
 8009b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b62:	e003      	b.n	8009b6c <UART_Start_Receive_IT+0xa4>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2222      	movs	r2, #34	@ 0x22
 8009b78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	f043 0301 	orr.w	r3, r3, #1
 8009b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009b9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e5      	bne.n	8009b7c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb8:	d107      	bne.n	8009bca <UART_Start_Receive_IT+0x102>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4a21      	ldr	r2, [pc, #132]	@ (8009c4c <UART_Start_Receive_IT+0x184>)
 8009bc6:	669a      	str	r2, [r3, #104]	@ 0x68
 8009bc8:	e002      	b.n	8009bd0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a20      	ldr	r2, [pc, #128]	@ (8009c50 <UART_Start_Receive_IT+0x188>)
 8009bce:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d019      	beq.n	8009c0c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e6      	bne.n	8009bd8 <UART_Start_Receive_IT+0x110>
 8009c0a:	e018      	b.n	8009c3e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	613b      	str	r3, [r7, #16]
   return(result);
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f043 0320 	orr.w	r3, r3, #32
 8009c20:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c2a:	623b      	str	r3, [r7, #32]
 8009c2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	69f9      	ldr	r1, [r7, #28]
 8009c30:	6a3a      	ldr	r2, [r7, #32]
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e6      	bne.n	8009c0c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	375c      	adds	r7, #92	@ 0x5c
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	08009f59 	.word	0x08009f59
 8009c50:	08009d9d 	.word	0x08009d9d

08009c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b095      	sub	sp, #84	@ 0x54
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e6      	bne.n	8009c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d118      	bne.n	8009cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e853 3f00 	ldrex	r3, [r3]
 8009cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f023 0310 	bic.w	r3, r3, #16
 8009cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	6979      	ldr	r1, [r7, #20]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	e841 2300 	strex	r3, r2, [r1]
 8009cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e6      	bne.n	8009cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d10:	bf00      	nop
 8009d12:	3754      	adds	r7, #84	@ 0x54
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff fa3e 	bl	80091bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d40:	bf00      	nop
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d64:	61fb      	str	r3, [r7, #28]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	61bb      	str	r3, [r7, #24]
 8009d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6979      	ldr	r1, [r7, #20]
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e6      	bne.n	8009d50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2220      	movs	r2, #32
 8009d86:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff fa0a 	bl	80091a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d94:	bf00      	nop
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b09c      	sub	sp, #112	@ 0x70
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009daa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db4:	2b22      	cmp	r3, #34	@ 0x22
 8009db6:	f040 80be 	bne.w	8009f36 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009dc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009dc8:	b2d9      	uxtb	r1, r3
 8009dca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd4:	400a      	ands	r2, r1
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 80a3 	bne.w	8009f4a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e6      	bne.n	8009e04 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	f023 0301 	bic.w	r3, r3, #1
 8009e4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3308      	adds	r3, #8
 8009e54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e56:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e5      	bne.n	8009e36 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a34      	ldr	r2, [pc, #208]	@ (8009f54 <UART_RxISR_8BIT+0x1b8>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d01f      	beq.n	8009ec8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d018      	beq.n	8009ec8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e6      	bne.n	8009e96 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d12e      	bne.n	8009f2e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	e853 3f00 	ldrex	r3, [r3]
 8009ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0310 	bic.w	r3, r3, #16
 8009eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ef4:	61fb      	str	r3, [r7, #28]
 8009ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	69b9      	ldr	r1, [r7, #24]
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	617b      	str	r3, [r7, #20]
   return(result);
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e6      	bne.n	8009ed6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	f003 0310 	and.w	r3, r3, #16
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	d103      	bne.n	8009f1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2210      	movs	r2, #16
 8009f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff f952 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f2c:	e00d      	b.n	8009f4a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7f8 f880 	bl	8002034 <HAL_UART_RxCpltCallback>
}
 8009f34:	e009      	b.n	8009f4a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	8b1b      	ldrh	r3, [r3, #24]
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0208 	orr.w	r2, r2, #8
 8009f46:	b292      	uxth	r2, r2
 8009f48:	831a      	strh	r2, [r3, #24]
}
 8009f4a:	bf00      	nop
 8009f4c:	3770      	adds	r7, #112	@ 0x70
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	40008000 	.word	0x40008000

08009f58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b09c      	sub	sp, #112	@ 0x70
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f70:	2b22      	cmp	r3, #34	@ 0x22
 8009f72:	f040 80be 	bne.w	800a0f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009f7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f84:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009f8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f8e:	4013      	ands	r3, r2
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9a:	1c9a      	adds	r2, r3, #2
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f040 80a3 	bne.w	800a106 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fde:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fe0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fe4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e6      	bne.n	8009fc0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	f023 0301 	bic.w	r3, r3, #1
 800a008:	663b      	str	r3, [r7, #96]	@ 0x60
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3308      	adds	r3, #8
 800a010:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a012:	643a      	str	r2, [r7, #64]	@ 0x40
 800a014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e5      	bne.n	8009ff2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a34      	ldr	r2, [pc, #208]	@ (800a110 <UART_RxISR_16BIT+0x1b8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d01f      	beq.n	800a084 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d018      	beq.n	800a084 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a072:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d12e      	bne.n	800a0ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f023 0310 	bic.w	r3, r3, #16
 800a0a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	6979      	ldr	r1, [r7, #20]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e6      	bne.n	800a092 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	f003 0310 	and.w	r3, r3, #16
 800a0ce:	2b10      	cmp	r3, #16
 800a0d0:	d103      	bne.n	800a0da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2210      	movs	r2, #16
 800a0d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff f874 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0e8:	e00d      	b.n	800a106 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7f7 ffa2 	bl	8002034 <HAL_UART_RxCpltCallback>
}
 800a0f0:	e009      	b.n	800a106 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	8b1b      	ldrh	r3, [r3, #24]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0208 	orr.w	r2, r2, #8
 800a102:	b292      	uxth	r2, r2
 800a104:	831a      	strh	r2, [r3, #24]
}
 800a106:	bf00      	nop
 800a108:	3770      	adds	r7, #112	@ 0x70
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40008000 	.word	0x40008000

0800a114 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <__NVIC_SetPriority>:
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	db0a      	blt.n	800a152 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	490c      	ldr	r1, [pc, #48]	@ (800a174 <__NVIC_SetPriority+0x4c>)
 800a142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a146:	0112      	lsls	r2, r2, #4
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	440b      	add	r3, r1
 800a14c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a150:	e00a      	b.n	800a168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	b2da      	uxtb	r2, r3
 800a156:	4908      	ldr	r1, [pc, #32]	@ (800a178 <__NVIC_SetPriority+0x50>)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	3b04      	subs	r3, #4
 800a160:	0112      	lsls	r2, r2, #4
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	440b      	add	r3, r1
 800a166:	761a      	strb	r2, [r3, #24]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	e000e100 	.word	0xe000e100
 800a178:	e000ed00 	.word	0xe000ed00

0800a17c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a180:	2100      	movs	r1, #0
 800a182:	f06f 0004 	mvn.w	r0, #4
 800a186:	f7ff ffcf 	bl	800a128 <__NVIC_SetPriority>
#endif
}
 800a18a:	bf00      	nop
 800a18c:	bd80      	pop	{r7, pc}
	...

0800a190 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a196:	f3ef 8305 	mrs	r3, IPSR
 800a19a:	603b      	str	r3, [r7, #0]
  return(result);
 800a19c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1a2:	f06f 0305 	mvn.w	r3, #5
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	e00c      	b.n	800a1c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d4 <osKernelInitialize+0x44>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d105      	bne.n	800a1be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1b2:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <osKernelInitialize+0x44>)
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	607b      	str	r3, [r7, #4]
 800a1bc:	e002      	b.n	800a1c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a1be:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1c4:	687b      	ldr	r3, [r7, #4]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	20000a78 	.word	0x20000a78

0800a1d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1de:	f3ef 8305 	mrs	r3, IPSR
 800a1e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1ea:	f06f 0305 	mvn.w	r3, #5
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	e010      	b.n	800a214 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a220 <osKernelStart+0x48>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d109      	bne.n	800a20e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1fa:	f7ff ffbf 	bl	800a17c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1fe:	4b08      	ldr	r3, [pc, #32]	@ (800a220 <osKernelStart+0x48>)
 800a200:	2202      	movs	r2, #2
 800a202:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a204:	f001 f87a 	bl	800b2fc <vTaskStartScheduler>
      stat = osOK;
 800a208:	2300      	movs	r3, #0
 800a20a:	607b      	str	r3, [r7, #4]
 800a20c:	e002      	b.n	800a214 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a214:	687b      	ldr	r3, [r7, #4]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000a78 	.word	0x20000a78

0800a224 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b08e      	sub	sp, #56	@ 0x38
 800a228:	af04      	add	r7, sp, #16
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a230:	2300      	movs	r3, #0
 800a232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a234:	f3ef 8305 	mrs	r3, IPSR
 800a238:	617b      	str	r3, [r7, #20]
  return(result);
 800a23a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d17e      	bne.n	800a33e <osThreadNew+0x11a>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d07b      	beq.n	800a33e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a246:	2380      	movs	r3, #128	@ 0x80
 800a248:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a24a:	2318      	movs	r3, #24
 800a24c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a252:	f04f 33ff 	mov.w	r3, #4294967295
 800a256:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d045      	beq.n	800a2ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <osThreadNew+0x48>
        name = attr->name;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d008      	beq.n	800a292 <osThreadNew+0x6e>
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2b38      	cmp	r3, #56	@ 0x38
 800a284:	d805      	bhi.n	800a292 <osThreadNew+0x6e>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <osThreadNew+0x72>
        return (NULL);
 800a292:	2300      	movs	r3, #0
 800a294:	e054      	b.n	800a340 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	089b      	lsrs	r3, r3, #2
 800a2a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00e      	beq.n	800a2cc <osThreadNew+0xa8>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	2b5b      	cmp	r3, #91	@ 0x5b
 800a2b4:	d90a      	bls.n	800a2cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <osThreadNew+0xa8>
        mem = 1;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	61bb      	str	r3, [r7, #24]
 800a2ca:	e010      	b.n	800a2ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <osThreadNew+0xca>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d108      	bne.n	800a2ee <osThreadNew+0xca>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d104      	bne.n	800a2ee <osThreadNew+0xca>
          mem = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61bb      	str	r3, [r7, #24]
 800a2e8:	e001      	b.n	800a2ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d110      	bne.n	800a316 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2fc:	9202      	str	r2, [sp, #8]
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6a3a      	ldr	r2, [r7, #32]
 800a308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fe1a 	bl	800af44 <xTaskCreateStatic>
 800a310:	4603      	mov	r3, r0
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	e013      	b.n	800a33e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d110      	bne.n	800a33e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	b29a      	uxth	r2, r3
 800a320:	f107 0310 	add.w	r3, r7, #16
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 fe68 	bl	800b004 <xTaskCreate>
 800a334:	4603      	mov	r3, r0
 800a336:	2b01      	cmp	r3, #1
 800a338:	d001      	beq.n	800a33e <osThreadNew+0x11a>
            hTask = NULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a33e:	693b      	ldr	r3, [r7, #16]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3728      	adds	r7, #40	@ 0x28
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a350:	f3ef 8305 	mrs	r3, IPSR
 800a354:	60bb      	str	r3, [r7, #8]
  return(result);
 800a356:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <osDelay+0x1c>
    stat = osErrorISR;
 800a35c:	f06f 0305 	mvn.w	r3, #5
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	e007      	b.n	800a374 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a364:	2300      	movs	r3, #0
 800a366:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 ff8e 	bl	800b290 <vTaskDelay>
    }
  }

  return (stat);
 800a374:	68fb      	ldr	r3, [r7, #12]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4a07      	ldr	r2, [pc, #28]	@ (800a3ac <vApplicationGetIdleTaskMemory+0x2c>)
 800a390:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	4a06      	ldr	r2, [pc, #24]	@ (800a3b0 <vApplicationGetIdleTaskMemory+0x30>)
 800a396:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2280      	movs	r2, #128	@ 0x80
 800a39c:	601a      	str	r2, [r3, #0]
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	20000a7c 	.word	0x20000a7c
 800a3b0:	20000ad8 	.word	0x20000ad8

0800a3b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a07      	ldr	r2, [pc, #28]	@ (800a3e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	4a06      	ldr	r2, [pc, #24]	@ (800a3e4 <vApplicationGetTimerTaskMemory+0x30>)
 800a3ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	20000cd8 	.word	0x20000cd8
 800a3e4:	20000d34 	.word	0x20000d34

0800a3e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f103 0208 	add.w	r2, r3, #8
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a400:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f103 0208 	add.w	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f103 0208 	add.w	r2, r3, #8
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a442:	b480      	push	{r7}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
}
 800a47e:	bf00      	nop
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a48a:	b480      	push	{r7}
 800a48c:	b085      	sub	sp, #20
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a0:	d103      	bne.n	800a4aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	e00c      	b.n	800a4c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3308      	adds	r3, #8
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	e002      	b.n	800a4b8 <vListInsert+0x2e>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d2f6      	bcs.n	800a4b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6892      	ldr	r2, [r2, #8]
 800a512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6852      	ldr	r2, [r2, #4]
 800a51c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	429a      	cmp	r2, r3
 800a526:	d103      	bne.n	800a530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	1e5a      	subs	r2, r3, #1
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10b      	bne.n	800a57c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a576:	bf00      	nop
 800a578:	bf00      	nop
 800a57a:	e7fd      	b.n	800a578 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a57c:	f002 f87c 	bl	800c678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	441a      	add	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a5b2:	fb01 f303 	mul.w	r3, r1, r3
 800a5b6:	441a      	add	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	22ff      	movs	r2, #255	@ 0xff
 800a5c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	22ff      	movs	r2, #255	@ 0xff
 800a5c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d114      	bne.n	800a5fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01a      	beq.n	800a610 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3310      	adds	r3, #16
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 f91a 	bl	800b818 <xTaskRemoveFromEventList>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d012      	beq.n	800a610 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a620 <xQueueGenericReset+0xd0>)
 800a5ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	e009      	b.n	800a610 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3310      	adds	r3, #16
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff fef1 	bl	800a3e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3324      	adds	r3, #36	@ 0x24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff feec 	bl	800a3e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a610:	f002 f864 	bl	800c6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a614:	2301      	movs	r3, #1
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	e000ed04 	.word	0xe000ed04

0800a624 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08e      	sub	sp, #56	@ 0x38
 800a628:	af02      	add	r7, sp, #8
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10b      	bne.n	800a650 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a64a:	bf00      	nop
 800a64c:	bf00      	nop
 800a64e:	e7fd      	b.n	800a64c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10b      	bne.n	800a66e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <xQueueGenericCreateStatic+0x56>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <xQueueGenericCreateStatic+0x5a>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueGenericCreateStatic+0x5c>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	623b      	str	r3, [r7, #32]
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <xQueueGenericCreateStatic+0x84>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <xQueueGenericCreateStatic+0x88>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <xQueueGenericCreateStatic+0x8a>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	61fb      	str	r3, [r7, #28]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6ca:	2350      	movs	r3, #80	@ 0x50
 800a6cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2b50      	cmp	r3, #80	@ 0x50
 800a6d2:	d00b      	beq.n	800a6ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	61bb      	str	r3, [r7, #24]
}
 800a6e6:	bf00      	nop
 800a6e8:	bf00      	nop
 800a6ea:	e7fd      	b.n	800a6e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00d      	beq.n	800a714 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a700:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	4613      	mov	r3, r2
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 f805 	bl	800a71e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a716:	4618      	mov	r0, r3
 800a718:	3730      	adds	r7, #48	@ 0x30
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	607a      	str	r2, [r7, #4]
 800a72a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d103      	bne.n	800a73a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	e002      	b.n	800a740 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a74c:	2101      	movs	r1, #1
 800a74e:	69b8      	ldr	r0, [r7, #24]
 800a750:	f7ff fefe 	bl	800a550 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	78fa      	ldrb	r2, [r7, #3]
 800a758:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08e      	sub	sp, #56	@ 0x38
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a772:	2300      	movs	r3, #0
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10b      	bne.n	800a798 <xQueueGenericSend+0x34>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d103      	bne.n	800a7a6 <xQueueGenericSend+0x42>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <xQueueGenericSend+0x46>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <xQueueGenericSend+0x48>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <xQueueGenericSend+0x64>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d103      	bne.n	800a7d6 <xQueueGenericSend+0x72>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <xQueueGenericSend+0x76>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <xQueueGenericSend+0x78>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10b      	bne.n	800a7f8 <xQueueGenericSend+0x94>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	623b      	str	r3, [r7, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7f8:	f001 f9ce 	bl	800bb98 <xTaskGetSchedulerState>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <xQueueGenericSend+0xa4>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <xQueueGenericSend+0xa8>
 800a808:	2301      	movs	r3, #1
 800a80a:	e000      	b.n	800a80e <xQueueGenericSend+0xaa>
 800a80c:	2300      	movs	r3, #0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <xQueueGenericSend+0xc6>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	61fb      	str	r3, [r7, #28]
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	e7fd      	b.n	800a826 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82a:	f001 ff25 	bl	800c678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a836:	429a      	cmp	r2, r3
 800a838:	d302      	bcc.n	800a840 <xQueueGenericSend+0xdc>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d129      	bne.n	800a894 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a846:	f000 fa0f 	bl	800ac68 <prvCopyDataToQueue>
 800a84a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	d010      	beq.n	800a876 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a856:	3324      	adds	r3, #36	@ 0x24
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 ffdd 	bl	800b818 <xTaskRemoveFromEventList>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d013      	beq.n	800a88c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a864:	4b3f      	ldr	r3, [pc, #252]	@ (800a964 <xQueueGenericSend+0x200>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	e00a      	b.n	800a88c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a87c:	4b39      	ldr	r3, [pc, #228]	@ (800a964 <xQueueGenericSend+0x200>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a88c:	f001 ff26 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800a890:	2301      	movs	r3, #1
 800a892:	e063      	b.n	800a95c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d103      	bne.n	800a8a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a89a:	f001 ff1f 	bl	800c6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e05c      	b.n	800a95c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d106      	bne.n	800a8b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8a8:	f107 0314 	add.w	r3, r7, #20
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 f817 	bl	800b8e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8b6:	f001 ff11 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8ba:	f000 fd87 	bl	800b3cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8be:	f001 fedb 	bl	800c678 <vPortEnterCritical>
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ce:	d103      	bne.n	800a8d8 <xQueueGenericSend+0x174>
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8de:	b25b      	sxtb	r3, r3
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e4:	d103      	bne.n	800a8ee <xQueueGenericSend+0x18a>
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8ee:	f001 fef5 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8f2:	1d3a      	adds	r2, r7, #4
 800a8f4:	f107 0314 	add.w	r3, r7, #20
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 f806 	bl	800b90c <xTaskCheckForTimeOut>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d124      	bne.n	800a950 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a908:	f000 faa6 	bl	800ae58 <prvIsQueueFull>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d018      	beq.n	800a944 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	3310      	adds	r3, #16
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4611      	mov	r1, r2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 ff2a 	bl	800b774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a922:	f000 fa31 	bl	800ad88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a926:	f000 fd5f 	bl	800b3e8 <xTaskResumeAll>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f47f af7c 	bne.w	800a82a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a932:	4b0c      	ldr	r3, [pc, #48]	@ (800a964 <xQueueGenericSend+0x200>)
 800a934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	e772      	b.n	800a82a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a946:	f000 fa1f 	bl	800ad88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a94a:	f000 fd4d 	bl	800b3e8 <xTaskResumeAll>
 800a94e:	e76c      	b.n	800a82a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a952:	f000 fa19 	bl	800ad88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a956:	f000 fd47 	bl	800b3e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a95a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3738      	adds	r7, #56	@ 0x38
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	e000ed04 	.word	0xe000ed04

0800a968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b090      	sub	sp, #64	@ 0x40
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10b      	bne.n	800a998 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d103      	bne.n	800a9a6 <xQueueGenericSendFromISR+0x3e>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <xQueueGenericSendFromISR+0x42>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <xQueueGenericSendFromISR+0x44>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10b      	bne.n	800a9c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	e7fd      	b.n	800a9c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d103      	bne.n	800a9d6 <xQueueGenericSendFromISR+0x6e>
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <xQueueGenericSendFromISR+0x72>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e000      	b.n	800a9dc <xQueueGenericSendFromISR+0x74>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10b      	bne.n	800a9f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	623b      	str	r3, [r7, #32]
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	e7fd      	b.n	800a9f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9f8:	f001 ff1e 	bl	800c838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9fc:	f3ef 8211 	mrs	r2, BASEPRI
 800aa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	61fa      	str	r2, [r7, #28]
 800aa12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d302      	bcc.n	800aa2a <xQueueGenericSendFromISR+0xc2>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d12f      	bne.n	800aa8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa40:	f000 f912 	bl	800ac68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d112      	bne.n	800aa74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d016      	beq.n	800aa84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa58:	3324      	adds	r3, #36	@ 0x24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fedc 	bl	800b818 <xTaskRemoveFromEventList>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e007      	b.n	800aa84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa78:	3301      	adds	r3, #1
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	b25a      	sxtb	r2, r3
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa84:	2301      	movs	r3, #1
 800aa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa88:	e001      	b.n	800aa8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3740      	adds	r7, #64	@ 0x40
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08c      	sub	sp, #48	@ 0x30
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10b      	bne.n	800aad6 <xQueueReceive+0x32>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	623b      	str	r3, [r7, #32]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d103      	bne.n	800aae4 <xQueueReceive+0x40>
 800aadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <xQueueReceive+0x44>
 800aae4:	2301      	movs	r3, #1
 800aae6:	e000      	b.n	800aaea <xQueueReceive+0x46>
 800aae8:	2300      	movs	r3, #0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10b      	bne.n	800ab06 <xQueueReceive+0x62>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	61fb      	str	r3, [r7, #28]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab06:	f001 f847 	bl	800bb98 <xTaskGetSchedulerState>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <xQueueReceive+0x72>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <xQueueReceive+0x76>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueReceive+0x78>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10b      	bne.n	800ab38 <xQueueReceive+0x94>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	61bb      	str	r3, [r7, #24]
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	e7fd      	b.n	800ab34 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab38:	f001 fd9e 	bl	800c678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d01f      	beq.n	800ab88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab4c:	f000 f8f6 	bl	800ad3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	1e5a      	subs	r2, r3, #1
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00f      	beq.n	800ab80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	3310      	adds	r3, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fe57 	bl	800b818 <xTaskRemoveFromEventList>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d007      	beq.n	800ab80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab70:	4b3c      	ldr	r3, [pc, #240]	@ (800ac64 <xQueueReceive+0x1c0>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab80:	f001 fdac 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e069      	b.n	800ac5c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d103      	bne.n	800ab96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab8e:	f001 fda5 	bl	800c6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab92:	2300      	movs	r3, #0
 800ab94:	e062      	b.n	800ac5c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d106      	bne.n	800abaa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab9c:	f107 0310 	add.w	r3, r7, #16
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fe9d 	bl	800b8e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aba6:	2301      	movs	r3, #1
 800aba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abaa:	f001 fd97 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abae:	f000 fc0d 	bl	800b3cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abb2:	f001 fd61 	bl	800c678 <vPortEnterCritical>
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abbc:	b25b      	sxtb	r3, r3
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc2:	d103      	bne.n	800abcc <xQueueReceive+0x128>
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d103      	bne.n	800abe2 <xQueueReceive+0x13e>
 800abda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abe2:	f001 fd7b 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abe6:	1d3a      	adds	r2, r7, #4
 800abe8:	f107 0310 	add.w	r3, r7, #16
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fe8c 	bl	800b90c <xTaskCheckForTimeOut>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d123      	bne.n	800ac42 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abfc:	f000 f916 	bl	800ae2c <prvIsQueueEmpty>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d017      	beq.n	800ac36 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	3324      	adds	r3, #36	@ 0x24
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fdb0 	bl	800b774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac16:	f000 f8b7 	bl	800ad88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac1a:	f000 fbe5 	bl	800b3e8 <xTaskResumeAll>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d189      	bne.n	800ab38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ac24:	4b0f      	ldr	r3, [pc, #60]	@ (800ac64 <xQueueReceive+0x1c0>)
 800ac26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac2a:	601a      	str	r2, [r3, #0]
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	e780      	b.n	800ab38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac38:	f000 f8a6 	bl	800ad88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac3c:	f000 fbd4 	bl	800b3e8 <xTaskResumeAll>
 800ac40:	e77a      	b.n	800ab38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac44:	f000 f8a0 	bl	800ad88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac48:	f000 fbce 	bl	800b3e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac4e:	f000 f8ed 	bl	800ae2c <prvIsQueueEmpty>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f43f af6f 	beq.w	800ab38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3730      	adds	r7, #48	@ 0x30
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	e000ed04 	.word	0xe000ed04

0800ac68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10d      	bne.n	800aca2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d14d      	bne.n	800ad2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 ff9e 	bl	800bbd4 <xTaskPriorityDisinherit>
 800ac98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	609a      	str	r2, [r3, #8]
 800aca0:	e043      	b.n	800ad2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d119      	bne.n	800acdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6858      	ldr	r0, [r3, #4]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb0:	461a      	mov	r2, r3
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	f002 fc52 	bl	800d55c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc0:	441a      	add	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d32b      	bcc.n	800ad2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	605a      	str	r2, [r3, #4]
 800acda:	e026      	b.n	800ad2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	68d8      	ldr	r0, [r3, #12]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace4:	461a      	mov	r2, r3
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	f002 fc38 	bl	800d55c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	68da      	ldr	r2, [r3, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf4:	425b      	negs	r3, r3
 800acf6:	441a      	add	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d207      	bcs.n	800ad18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad10:	425b      	negs	r3, r3
 800ad12:	441a      	add	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d105      	bne.n	800ad2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ad32:	697b      	ldr	r3, [r7, #20]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d018      	beq.n	800ad80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad56:	441a      	add	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d303      	bcc.n	800ad70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68d9      	ldr	r1, [r3, #12]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6838      	ldr	r0, [r7, #0]
 800ad7c:	f002 fbee 	bl	800d55c <memcpy>
	}
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad90:	f001 fc72 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad9c:	e011      	b.n	800adc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d012      	beq.n	800adcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	3324      	adds	r3, #36	@ 0x24
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 fd34 	bl	800b818 <xTaskRemoveFromEventList>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800adb6:	f000 fe0d 	bl	800b9d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	dce9      	bgt.n	800ad9e <prvUnlockQueue+0x16>
 800adca:	e000      	b.n	800adce <prvUnlockQueue+0x46>
					break;
 800adcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	22ff      	movs	r2, #255	@ 0xff
 800add2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800add6:	f001 fc81 	bl	800c6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adda:	f001 fc4d 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ade4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ade6:	e011      	b.n	800ae0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d012      	beq.n	800ae16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3310      	adds	r3, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fd0f 	bl	800b818 <xTaskRemoveFromEventList>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae00:	f000 fde8 	bl	800b9d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dce9      	bgt.n	800ade8 <prvUnlockQueue+0x60>
 800ae14:	e000      	b.n	800ae18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	22ff      	movs	r2, #255	@ 0xff
 800ae1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ae20:	f001 fc5c 	bl	800c6dc <vPortExitCritical>
}
 800ae24:	bf00      	nop
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae34:	f001 fc20 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae40:	2301      	movs	r3, #1
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	e001      	b.n	800ae4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae4a:	f001 fc47 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae60:	f001 fc0a 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d102      	bne.n	800ae76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae70:	2301      	movs	r3, #1
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	e001      	b.n	800ae7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae7a:	f001 fc2f 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	e014      	b.n	800aec2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae98:	4a0f      	ldr	r2, [pc, #60]	@ (800aed8 <vQueueAddToRegistry+0x50>)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10b      	bne.n	800aebc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aea4:	490c      	ldr	r1, [pc, #48]	@ (800aed8 <vQueueAddToRegistry+0x50>)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aeae:	4a0a      	ldr	r2, [pc, #40]	@ (800aed8 <vQueueAddToRegistry+0x50>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aeba:	e006      	b.n	800aeca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b07      	cmp	r3, #7
 800aec6:	d9e7      	bls.n	800ae98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	20001134 	.word	0x20001134

0800aedc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aeec:	f001 fbc4 	bl	800c678 <vPortEnterCritical>
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aef6:	b25b      	sxtb	r3, r3
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefc:	d103      	bne.n	800af06 <vQueueWaitForMessageRestricted+0x2a>
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af12:	d103      	bne.n	800af1c <vQueueWaitForMessageRestricted+0x40>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af1c:	f001 fbde 	bl	800c6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	3324      	adds	r3, #36	@ 0x24
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fc45 	bl	800b7c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af36:	6978      	ldr	r0, [r7, #20]
 800af38:	f7ff ff26 	bl	800ad88 <prvUnlockQueue>
	}
 800af3c:	bf00      	nop
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	@ 0x38
 800af48:	af04      	add	r7, sp, #16
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10b      	bne.n	800af70 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	623b      	str	r3, [r7, #32]
}
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	e7fd      	b.n	800af6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <xTaskCreateStatic+0x4a>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	61fb      	str	r3, [r7, #28]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af8e:	235c      	movs	r3, #92	@ 0x5c
 800af90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	2b5c      	cmp	r3, #92	@ 0x5c
 800af96:	d00b      	beq.n	800afb0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	61bb      	str	r3, [r7, #24]
}
 800afaa:	bf00      	nop
 800afac:	bf00      	nop
 800afae:	e7fd      	b.n	800afac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01e      	beq.n	800aff6 <xTaskCreateStatic+0xb2>
 800afb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d01b      	beq.n	800aff6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afc6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afd0:	2300      	movs	r3, #0
 800afd2:	9303      	str	r3, [sp, #12]
 800afd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	f107 0314 	add.w	r3, r7, #20
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f850 	bl	800b08e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aff0:	f000 f8de 	bl	800b1b0 <prvAddNewTaskToReadyList>
 800aff4:	e001      	b.n	800affa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800affa:	697b      	ldr	r3, [r7, #20]
	}
 800affc:	4618      	mov	r0, r3
 800affe:	3728      	adds	r7, #40	@ 0x28
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08c      	sub	sp, #48	@ 0x30
 800b008:	af04      	add	r7, sp, #16
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	4613      	mov	r3, r2
 800b012:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b014:	88fb      	ldrh	r3, [r7, #6]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4618      	mov	r0, r3
 800b01a:	f001 fc4f 	bl	800c8bc <pvPortMalloc>
 800b01e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00e      	beq.n	800b044 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b026:	205c      	movs	r0, #92	@ 0x5c
 800b028:	f001 fc48 	bl	800c8bc <pvPortMalloc>
 800b02c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d003      	beq.n	800b03c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	631a      	str	r2, [r3, #48]	@ 0x30
 800b03a:	e005      	b.n	800b048 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b03c:	6978      	ldr	r0, [r7, #20]
 800b03e:	f001 fd0b 	bl	800ca58 <vPortFree>
 800b042:	e001      	b.n	800b048 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b044:	2300      	movs	r3, #0
 800b046:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d017      	beq.n	800b07e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b056:	88fa      	ldrh	r2, [r7, #6]
 800b058:	2300      	movs	r3, #0
 800b05a:	9303      	str	r3, [sp, #12]
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 f80e 	bl	800b08e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b072:	69f8      	ldr	r0, [r7, #28]
 800b074:	f000 f89c 	bl	800b1b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b078:	2301      	movs	r3, #1
 800b07a:	61bb      	str	r3, [r7, #24]
 800b07c:	e002      	b.n	800b084 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b084:	69bb      	ldr	r3, [r7, #24]
	}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b088      	sub	sp, #32
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
 800b09a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	21a5      	movs	r1, #165	@ 0xa5
 800b0a8:	f002 fa12 	bl	800d4d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	f023 0307 	bic.w	r3, r3, #7
 800b0c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	f003 0307 	and.w	r3, r3, #7
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	617b      	str	r3, [r7, #20]
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	e7fd      	b.n	800b0e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d01f      	beq.n	800b12e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	e012      	b.n	800b11a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	7819      	ldrb	r1, [r3, #0]
 800b0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	4413      	add	r3, r2
 800b102:	3334      	adds	r3, #52	@ 0x34
 800b104:	460a      	mov	r2, r1
 800b106:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	4413      	add	r3, r2
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d006      	beq.n	800b122 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	3301      	adds	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	2b0f      	cmp	r3, #15
 800b11e:	d9e9      	bls.n	800b0f4 <prvInitialiseNewTask+0x66>
 800b120:	e000      	b.n	800b124 <prvInitialiseNewTask+0x96>
			{
				break;
 800b122:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b12c:	e003      	b.n	800b136 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b138:	2b37      	cmp	r3, #55	@ 0x37
 800b13a:	d901      	bls.n	800b140 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b13c:	2337      	movs	r3, #55	@ 0x37
 800b13e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b144:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b14a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14e:	2200      	movs	r2, #0
 800b150:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff f966 	bl	800a428 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15e:	3318      	adds	r3, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff f961 	bl	800a428 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b16a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b17a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17e:	2200      	movs	r2, #0
 800b180:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	68f9      	ldr	r1, [r7, #12]
 800b18e:	69b8      	ldr	r0, [r7, #24]
 800b190:	f001 f93e 	bl	800c410 <pxPortInitialiseStack>
 800b194:	4602      	mov	r2, r0
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1b8:	f001 fa5e 	bl	800c678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1bc:	4b2d      	ldr	r3, [pc, #180]	@ (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	4a2c      	ldr	r2, [pc, #176]	@ (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1c6:	4b2c      	ldr	r3, [pc, #176]	@ (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1d4:	4b27      	ldr	r3, [pc, #156]	@ (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d110      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1dc:	f000 fc1e 	bl	800ba1c <prvInitialiseTaskLists>
 800b1e0:	e00d      	b.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1e2:	4b26      	ldr	r3, [pc, #152]	@ (800b27c <prvAddNewTaskToReadyList+0xcc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d109      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ea:	4b23      	ldr	r3, [pc, #140]	@ (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d802      	bhi.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1fe:	4b20      	ldr	r3, [pc, #128]	@ (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	4a1e      	ldr	r2, [pc, #120]	@ (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b206:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b208:	4b1d      	ldr	r3, [pc, #116]	@ (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b214:	4b1b      	ldr	r3, [pc, #108]	@ (800b284 <prvAddNewTaskToReadyList+0xd4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d903      	bls.n	800b224 <prvAddNewTaskToReadyList+0x74>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b220:	4a18      	ldr	r2, [pc, #96]	@ (800b284 <prvAddNewTaskToReadyList+0xd4>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4a15      	ldr	r2, [pc, #84]	@ (800b288 <prvAddNewTaskToReadyList+0xd8>)
 800b232:	441a      	add	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3304      	adds	r3, #4
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7ff f901 	bl	800a442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b240:	f001 fa4c 	bl	800c6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b244:	4b0d      	ldr	r3, [pc, #52]	@ (800b27c <prvAddNewTaskToReadyList+0xcc>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00e      	beq.n	800b26a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b24c:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b256:	429a      	cmp	r2, r3
 800b258:	d207      	bcs.n	800b26a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b25a:	4b0c      	ldr	r3, [pc, #48]	@ (800b28c <prvAddNewTaskToReadyList+0xdc>)
 800b25c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20001648 	.word	0x20001648
 800b278:	20001174 	.word	0x20001174
 800b27c:	20001654 	.word	0x20001654
 800b280:	20001664 	.word	0x20001664
 800b284:	20001650 	.word	0x20001650
 800b288:	20001178 	.word	0x20001178
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d018      	beq.n	800b2d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2a2:	4b14      	ldr	r3, [pc, #80]	@ (800b2f4 <vTaskDelay+0x64>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <vTaskDelay+0x32>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	60bb      	str	r3, [r7, #8]
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	e7fd      	b.n	800b2be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2c2:	f000 f883 	bl	800b3cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fcf3 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2ce:	f000 f88b 	bl	800b3e8 <xTaskResumeAll>
 800b2d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d107      	bne.n	800b2ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b2da:	4b07      	ldr	r3, [pc, #28]	@ (800b2f8 <vTaskDelay+0x68>)
 800b2dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20001670 	.word	0x20001670
 800b2f8:	e000ed04 	.word	0xe000ed04

0800b2fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	@ 0x28
 800b300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b30a:	463a      	mov	r2, r7
 800b30c:	1d39      	adds	r1, r7, #4
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff f834 	bl	800a380 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	9202      	str	r2, [sp, #8]
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	2300      	movs	r3, #0
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	2300      	movs	r3, #0
 800b328:	460a      	mov	r2, r1
 800b32a:	4922      	ldr	r1, [pc, #136]	@ (800b3b4 <vTaskStartScheduler+0xb8>)
 800b32c:	4822      	ldr	r0, [pc, #136]	@ (800b3b8 <vTaskStartScheduler+0xbc>)
 800b32e:	f7ff fe09 	bl	800af44 <xTaskCreateStatic>
 800b332:	4603      	mov	r3, r0
 800b334:	4a21      	ldr	r2, [pc, #132]	@ (800b3bc <vTaskStartScheduler+0xc0>)
 800b336:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b338:	4b20      	ldr	r3, [pc, #128]	@ (800b3bc <vTaskStartScheduler+0xc0>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b340:	2301      	movs	r3, #1
 800b342:	617b      	str	r3, [r7, #20]
 800b344:	e001      	b.n	800b34a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b346:	2300      	movs	r3, #0
 800b348:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d102      	bne.n	800b356 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b350:	f000 fd04 	bl	800bd5c <xTimerCreateTimerTask>
 800b354:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d116      	bne.n	800b38a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	613b      	str	r3, [r7, #16]
}
 800b36e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b370:	4b13      	ldr	r3, [pc, #76]	@ (800b3c0 <vTaskStartScheduler+0xc4>)
 800b372:	f04f 32ff 	mov.w	r2, #4294967295
 800b376:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b378:	4b12      	ldr	r3, [pc, #72]	@ (800b3c4 <vTaskStartScheduler+0xc8>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b37e:	4b12      	ldr	r3, [pc, #72]	@ (800b3c8 <vTaskStartScheduler+0xcc>)
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b384:	f001 f8d4 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b388:	e00f      	b.n	800b3aa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b390:	d10b      	bne.n	800b3aa <vTaskStartScheduler+0xae>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60fb      	str	r3, [r7, #12]
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop
 800b3a8:	e7fd      	b.n	800b3a6 <vTaskStartScheduler+0xaa>
}
 800b3aa:	bf00      	nop
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	0800e28c 	.word	0x0800e28c
 800b3b8:	0800b9ed 	.word	0x0800b9ed
 800b3bc:	2000166c 	.word	0x2000166c
 800b3c0:	20001668 	.word	0x20001668
 800b3c4:	20001654 	.word	0x20001654
 800b3c8:	2000164c 	.word	0x2000164c

0800b3cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3d0:	4b04      	ldr	r3, [pc, #16]	@ (800b3e4 <vTaskSuspendAll+0x18>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	4a03      	ldr	r2, [pc, #12]	@ (800b3e4 <vTaskSuspendAll+0x18>)
 800b3d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3da:	bf00      	nop
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	20001670 	.word	0x20001670

0800b3e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3f6:	4b42      	ldr	r3, [pc, #264]	@ (800b500 <xTaskResumeAll+0x118>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10b      	bne.n	800b416 <xTaskResumeAll+0x2e>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	603b      	str	r3, [r7, #0]
}
 800b410:	bf00      	nop
 800b412:	bf00      	nop
 800b414:	e7fd      	b.n	800b412 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b416:	f001 f92f 	bl	800c678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b41a:	4b39      	ldr	r3, [pc, #228]	@ (800b500 <xTaskResumeAll+0x118>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3b01      	subs	r3, #1
 800b420:	4a37      	ldr	r2, [pc, #220]	@ (800b500 <xTaskResumeAll+0x118>)
 800b422:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b424:	4b36      	ldr	r3, [pc, #216]	@ (800b500 <xTaskResumeAll+0x118>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d162      	bne.n	800b4f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b42c:	4b35      	ldr	r3, [pc, #212]	@ (800b504 <xTaskResumeAll+0x11c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d05e      	beq.n	800b4f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b434:	e02f      	b.n	800b496 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b436:	4b34      	ldr	r3, [pc, #208]	@ (800b508 <xTaskResumeAll+0x120>)
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3318      	adds	r3, #24
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff f85a 	bl	800a4fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3304      	adds	r3, #4
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff f855 	bl	800a4fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b456:	4b2d      	ldr	r3, [pc, #180]	@ (800b50c <xTaskResumeAll+0x124>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d903      	bls.n	800b466 <xTaskResumeAll+0x7e>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b462:	4a2a      	ldr	r2, [pc, #168]	@ (800b50c <xTaskResumeAll+0x124>)
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4a27      	ldr	r2, [pc, #156]	@ (800b510 <xTaskResumeAll+0x128>)
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3304      	adds	r3, #4
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f7fe ffe0 	bl	800a442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b486:	4b23      	ldr	r3, [pc, #140]	@ (800b514 <xTaskResumeAll+0x12c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d302      	bcc.n	800b496 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b490:	4b21      	ldr	r3, [pc, #132]	@ (800b518 <xTaskResumeAll+0x130>)
 800b492:	2201      	movs	r2, #1
 800b494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b496:	4b1c      	ldr	r3, [pc, #112]	@ (800b508 <xTaskResumeAll+0x120>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1cb      	bne.n	800b436 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4a4:	f000 fb58 	bl	800bb58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4a8:	4b1c      	ldr	r3, [pc, #112]	@ (800b51c <xTaskResumeAll+0x134>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d010      	beq.n	800b4d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4b4:	f000 f846 	bl	800b544 <xTaskIncrementTick>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b4be:	4b16      	ldr	r3, [pc, #88]	@ (800b518 <xTaskResumeAll+0x130>)
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1f1      	bne.n	800b4b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b4d0:	4b12      	ldr	r3, [pc, #72]	@ (800b51c <xTaskResumeAll+0x134>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4d6:	4b10      	ldr	r3, [pc, #64]	@ (800b518 <xTaskResumeAll+0x130>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d009      	beq.n	800b4f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b520 <xTaskResumeAll+0x138>)
 800b4e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4f2:	f001 f8f3 	bl	800c6dc <vPortExitCritical>

	return xAlreadyYielded;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20001670 	.word	0x20001670
 800b504:	20001648 	.word	0x20001648
 800b508:	20001608 	.word	0x20001608
 800b50c:	20001650 	.word	0x20001650
 800b510:	20001178 	.word	0x20001178
 800b514:	20001174 	.word	0x20001174
 800b518:	2000165c 	.word	0x2000165c
 800b51c:	20001658 	.word	0x20001658
 800b520:	e000ed04 	.word	0xe000ed04

0800b524 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b52a:	4b05      	ldr	r3, [pc, #20]	@ (800b540 <xTaskGetTickCount+0x1c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b530:	687b      	ldr	r3, [r7, #4]
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	2000164c 	.word	0x2000164c

0800b544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b54a:	2300      	movs	r3, #0
 800b54c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b54e:	4b4f      	ldr	r3, [pc, #316]	@ (800b68c <xTaskIncrementTick+0x148>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 8090 	bne.w	800b678 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b558:	4b4d      	ldr	r3, [pc, #308]	@ (800b690 <xTaskIncrementTick+0x14c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b560:	4a4b      	ldr	r2, [pc, #300]	@ (800b690 <xTaskIncrementTick+0x14c>)
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d121      	bne.n	800b5b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b56c:	4b49      	ldr	r3, [pc, #292]	@ (800b694 <xTaskIncrementTick+0x150>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00b      	beq.n	800b58e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	603b      	str	r3, [r7, #0]
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <xTaskIncrementTick+0x46>
 800b58e:	4b41      	ldr	r3, [pc, #260]	@ (800b694 <xTaskIncrementTick+0x150>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	4b40      	ldr	r3, [pc, #256]	@ (800b698 <xTaskIncrementTick+0x154>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a3e      	ldr	r2, [pc, #248]	@ (800b694 <xTaskIncrementTick+0x150>)
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	4a3e      	ldr	r2, [pc, #248]	@ (800b698 <xTaskIncrementTick+0x154>)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4b3e      	ldr	r3, [pc, #248]	@ (800b69c <xTaskIncrementTick+0x158>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	4a3c      	ldr	r2, [pc, #240]	@ (800b69c <xTaskIncrementTick+0x158>)
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	f000 fad4 	bl	800bb58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b6a0 <xTaskIncrementTick+0x15c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d349      	bcc.n	800b64e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5ba:	4b36      	ldr	r3, [pc, #216]	@ (800b694 <xTaskIncrementTick+0x150>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c4:	4b36      	ldr	r3, [pc, #216]	@ (800b6a0 <xTaskIncrementTick+0x15c>)
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ca:	601a      	str	r2, [r3, #0]
					break;
 800b5cc:	e03f      	b.n	800b64e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ce:	4b31      	ldr	r3, [pc, #196]	@ (800b694 <xTaskIncrementTick+0x150>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d203      	bcs.n	800b5ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5e6:	4a2e      	ldr	r2, [pc, #184]	@ (800b6a0 <xTaskIncrementTick+0x15c>)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5ec:	e02f      	b.n	800b64e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe ff82 	bl	800a4fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	3318      	adds	r3, #24
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe ff79 	bl	800a4fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60e:	4b25      	ldr	r3, [pc, #148]	@ (800b6a4 <xTaskIncrementTick+0x160>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d903      	bls.n	800b61e <xTaskIncrementTick+0xda>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61a:	4a22      	ldr	r2, [pc, #136]	@ (800b6a4 <xTaskIncrementTick+0x160>)
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4a1f      	ldr	r2, [pc, #124]	@ (800b6a8 <xTaskIncrementTick+0x164>)
 800b62c:	441a      	add	r2, r3
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3304      	adds	r3, #4
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f7fe ff04 	bl	800a442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63e:	4b1b      	ldr	r3, [pc, #108]	@ (800b6ac <xTaskIncrementTick+0x168>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b644:	429a      	cmp	r2, r3
 800b646:	d3b8      	bcc.n	800b5ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b648:	2301      	movs	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b64c:	e7b5      	b.n	800b5ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b64e:	4b17      	ldr	r3, [pc, #92]	@ (800b6ac <xTaskIncrementTick+0x168>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b654:	4914      	ldr	r1, [pc, #80]	@ (800b6a8 <xTaskIncrementTick+0x164>)
 800b656:	4613      	mov	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4413      	add	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	440b      	add	r3, r1
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d901      	bls.n	800b66a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b666:	2301      	movs	r3, #1
 800b668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b66a:	4b11      	ldr	r3, [pc, #68]	@ (800b6b0 <xTaskIncrementTick+0x16c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d007      	beq.n	800b682 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b672:	2301      	movs	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
 800b676:	e004      	b.n	800b682 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b678:	4b0e      	ldr	r3, [pc, #56]	@ (800b6b4 <xTaskIncrementTick+0x170>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a0d      	ldr	r2, [pc, #52]	@ (800b6b4 <xTaskIncrementTick+0x170>)
 800b680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b682:	697b      	ldr	r3, [r7, #20]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20001670 	.word	0x20001670
 800b690:	2000164c 	.word	0x2000164c
 800b694:	20001600 	.word	0x20001600
 800b698:	20001604 	.word	0x20001604
 800b69c:	20001660 	.word	0x20001660
 800b6a0:	20001668 	.word	0x20001668
 800b6a4:	20001650 	.word	0x20001650
 800b6a8:	20001178 	.word	0x20001178
 800b6ac:	20001174 	.word	0x20001174
 800b6b0:	2000165c 	.word	0x2000165c
 800b6b4:	20001658 	.word	0x20001658

0800b6b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6be:	4b28      	ldr	r3, [pc, #160]	@ (800b760 <vTaskSwitchContext+0xa8>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6c6:	4b27      	ldr	r3, [pc, #156]	@ (800b764 <vTaskSwitchContext+0xac>)
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6cc:	e042      	b.n	800b754 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b6ce:	4b25      	ldr	r3, [pc, #148]	@ (800b764 <vTaskSwitchContext+0xac>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d4:	4b24      	ldr	r3, [pc, #144]	@ (800b768 <vTaskSwitchContext+0xb0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	e011      	b.n	800b700 <vTaskSwitchContext+0x48>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10b      	bne.n	800b6fa <vTaskSwitchContext+0x42>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	607b      	str	r3, [r7, #4]
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop
 800b6f8:	e7fd      	b.n	800b6f6 <vTaskSwitchContext+0x3e>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]
 800b700:	491a      	ldr	r1, [pc, #104]	@ (800b76c <vTaskSwitchContext+0xb4>)
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0e3      	beq.n	800b6dc <vTaskSwitchContext+0x24>
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4a13      	ldr	r2, [pc, #76]	@ (800b76c <vTaskSwitchContext+0xb4>)
 800b720:	4413      	add	r3, r2
 800b722:	60bb      	str	r3, [r7, #8]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	605a      	str	r2, [r3, #4]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	3308      	adds	r3, #8
 800b736:	429a      	cmp	r2, r3
 800b738:	d104      	bne.n	800b744 <vTaskSwitchContext+0x8c>
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	605a      	str	r2, [r3, #4]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	4a09      	ldr	r2, [pc, #36]	@ (800b770 <vTaskSwitchContext+0xb8>)
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	4a06      	ldr	r2, [pc, #24]	@ (800b768 <vTaskSwitchContext+0xb0>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6013      	str	r3, [r2, #0]
}
 800b754:	bf00      	nop
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	20001670 	.word	0x20001670
 800b764:	2000165c 	.word	0x2000165c
 800b768:	20001650 	.word	0x20001650
 800b76c:	20001178 	.word	0x20001178
 800b770:	20001174 	.word	0x20001174

0800b774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10b      	bne.n	800b79c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	60fb      	str	r3, [r7, #12]
}
 800b796:	bf00      	nop
 800b798:	bf00      	nop
 800b79a:	e7fd      	b.n	800b798 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b79c:	4b07      	ldr	r3, [pc, #28]	@ (800b7bc <vTaskPlaceOnEventList+0x48>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3318      	adds	r3, #24
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7fe fe70 	bl	800a48a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	6838      	ldr	r0, [r7, #0]
 800b7ae:	f000 fa81 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>
}
 800b7b2:	bf00      	nop
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20001174 	.word	0x20001174

0800b7c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10b      	bne.n	800b7ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	617b      	str	r3, [r7, #20]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3318      	adds	r3, #24
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7fe fe25 	bl	800a442 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b802:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	68b8      	ldr	r0, [r7, #8]
 800b808:	f000 fa54 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>
	}
 800b80c:	bf00      	nop
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20001174 	.word	0x20001174

0800b818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10b      	bne.n	800b846 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	60fb      	str	r3, [r7, #12]
}
 800b840:	bf00      	nop
 800b842:	bf00      	nop
 800b844:	e7fd      	b.n	800b842 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	3318      	adds	r3, #24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fe fe56 	bl	800a4fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b850:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c8 <xTaskRemoveFromEventList+0xb0>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d11d      	bne.n	800b894 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fe fe4d 	bl	800a4fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b866:	4b19      	ldr	r3, [pc, #100]	@ (800b8cc <xTaskRemoveFromEventList+0xb4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d903      	bls.n	800b876 <xTaskRemoveFromEventList+0x5e>
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b872:	4a16      	ldr	r2, [pc, #88]	@ (800b8cc <xTaskRemoveFromEventList+0xb4>)
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b87a:	4613      	mov	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4a13      	ldr	r2, [pc, #76]	@ (800b8d0 <xTaskRemoveFromEventList+0xb8>)
 800b884:	441a      	add	r2, r3
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3304      	adds	r3, #4
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fe fdd8 	bl	800a442 <vListInsertEnd>
 800b892:	e005      	b.n	800b8a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	3318      	adds	r3, #24
 800b898:	4619      	mov	r1, r3
 800b89a:	480e      	ldr	r0, [pc, #56]	@ (800b8d4 <xTaskRemoveFromEventList+0xbc>)
 800b89c:	f7fe fdd1 	bl	800a442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d8 <xTaskRemoveFromEventList+0xc0>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d905      	bls.n	800b8ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8dc <xTaskRemoveFromEventList+0xc4>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	e001      	b.n	800b8be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8be:	697b      	ldr	r3, [r7, #20]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20001670 	.word	0x20001670
 800b8cc:	20001650 	.word	0x20001650
 800b8d0:	20001178 	.word	0x20001178
 800b8d4:	20001608 	.word	0x20001608
 800b8d8:	20001174 	.word	0x20001174
 800b8dc:	2000165c 	.word	0x2000165c

0800b8e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8e8:	4b06      	ldr	r3, [pc, #24]	@ (800b904 <vTaskInternalSetTimeOutState+0x24>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8f0:	4b05      	ldr	r3, [pc, #20]	@ (800b908 <vTaskInternalSetTimeOutState+0x28>)
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	605a      	str	r2, [r3, #4]
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20001660 	.word	0x20001660
 800b908:	2000164c 	.word	0x2000164c

0800b90c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10b      	bne.n	800b934 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	613b      	str	r3, [r7, #16]
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	e7fd      	b.n	800b930 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	60fb      	str	r3, [r7, #12]
}
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	e7fd      	b.n	800b94e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b952:	f000 fe91 	bl	800c678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b956:	4b1d      	ldr	r3, [pc, #116]	@ (800b9cc <xTaskCheckForTimeOut+0xc0>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d102      	bne.n	800b976 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b970:	2300      	movs	r3, #0
 800b972:	61fb      	str	r3, [r7, #28]
 800b974:	e023      	b.n	800b9be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b15      	ldr	r3, [pc, #84]	@ (800b9d0 <xTaskCheckForTimeOut+0xc4>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d007      	beq.n	800b992 <xTaskCheckForTimeOut+0x86>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d302      	bcc.n	800b992 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e015      	b.n	800b9be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d20b      	bcs.n	800b9b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	1ad2      	subs	r2, r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff ff99 	bl	800b8e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
 800b9b2:	e004      	b.n	800b9be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9be:	f000 fe8d 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800b9c2:	69fb      	ldr	r3, [r7, #28]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3720      	adds	r7, #32
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	2000164c 	.word	0x2000164c
 800b9d0:	20001660 	.word	0x20001660

0800b9d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9d8:	4b03      	ldr	r3, [pc, #12]	@ (800b9e8 <vTaskMissedYield+0x14>)
 800b9da:	2201      	movs	r2, #1
 800b9dc:	601a      	str	r2, [r3, #0]
}
 800b9de:	bf00      	nop
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	2000165c 	.word	0x2000165c

0800b9ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9f4:	f000 f852 	bl	800ba9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9f8:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <prvIdleTask+0x28>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d9f9      	bls.n	800b9f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba00:	4b05      	ldr	r3, [pc, #20]	@ (800ba18 <prvIdleTask+0x2c>)
 800ba02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba10:	e7f0      	b.n	800b9f4 <prvIdleTask+0x8>
 800ba12:	bf00      	nop
 800ba14:	20001178 	.word	0x20001178
 800ba18:	e000ed04 	.word	0xe000ed04

0800ba1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba22:	2300      	movs	r3, #0
 800ba24:	607b      	str	r3, [r7, #4]
 800ba26:	e00c      	b.n	800ba42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4a12      	ldr	r2, [pc, #72]	@ (800ba7c <prvInitialiseTaskLists+0x60>)
 800ba34:	4413      	add	r3, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fcd6 	bl	800a3e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b37      	cmp	r3, #55	@ 0x37
 800ba46:	d9ef      	bls.n	800ba28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba48:	480d      	ldr	r0, [pc, #52]	@ (800ba80 <prvInitialiseTaskLists+0x64>)
 800ba4a:	f7fe fccd 	bl	800a3e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba4e:	480d      	ldr	r0, [pc, #52]	@ (800ba84 <prvInitialiseTaskLists+0x68>)
 800ba50:	f7fe fcca 	bl	800a3e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba54:	480c      	ldr	r0, [pc, #48]	@ (800ba88 <prvInitialiseTaskLists+0x6c>)
 800ba56:	f7fe fcc7 	bl	800a3e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba5a:	480c      	ldr	r0, [pc, #48]	@ (800ba8c <prvInitialiseTaskLists+0x70>)
 800ba5c:	f7fe fcc4 	bl	800a3e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba60:	480b      	ldr	r0, [pc, #44]	@ (800ba90 <prvInitialiseTaskLists+0x74>)
 800ba62:	f7fe fcc1 	bl	800a3e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba66:	4b0b      	ldr	r3, [pc, #44]	@ (800ba94 <prvInitialiseTaskLists+0x78>)
 800ba68:	4a05      	ldr	r2, [pc, #20]	@ (800ba80 <prvInitialiseTaskLists+0x64>)
 800ba6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba98 <prvInitialiseTaskLists+0x7c>)
 800ba6e:	4a05      	ldr	r2, [pc, #20]	@ (800ba84 <prvInitialiseTaskLists+0x68>)
 800ba70:	601a      	str	r2, [r3, #0]
}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20001178 	.word	0x20001178
 800ba80:	200015d8 	.word	0x200015d8
 800ba84:	200015ec 	.word	0x200015ec
 800ba88:	20001608 	.word	0x20001608
 800ba8c:	2000161c 	.word	0x2000161c
 800ba90:	20001634 	.word	0x20001634
 800ba94:	20001600 	.word	0x20001600
 800ba98:	20001604 	.word	0x20001604

0800ba9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baa2:	e019      	b.n	800bad8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800baa4:	f000 fde8 	bl	800c678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa8:	4b10      	ldr	r3, [pc, #64]	@ (800baec <prvCheckTasksWaitingTermination+0x50>)
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3304      	adds	r3, #4
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe fd21 	bl	800a4fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800baba:	4b0d      	ldr	r3, [pc, #52]	@ (800baf0 <prvCheckTasksWaitingTermination+0x54>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3b01      	subs	r3, #1
 800bac0:	4a0b      	ldr	r2, [pc, #44]	@ (800baf0 <prvCheckTasksWaitingTermination+0x54>)
 800bac2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bac4:	4b0b      	ldr	r3, [pc, #44]	@ (800baf4 <prvCheckTasksWaitingTermination+0x58>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3b01      	subs	r3, #1
 800baca:	4a0a      	ldr	r2, [pc, #40]	@ (800baf4 <prvCheckTasksWaitingTermination+0x58>)
 800bacc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bace:	f000 fe05 	bl	800c6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f810 	bl	800baf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bad8:	4b06      	ldr	r3, [pc, #24]	@ (800baf4 <prvCheckTasksWaitingTermination+0x58>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1e1      	bne.n	800baa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	2000161c 	.word	0x2000161c
 800baf0:	20001648 	.word	0x20001648
 800baf4:	20001630 	.word	0x20001630

0800baf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d108      	bne.n	800bb1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 ffa2 	bl	800ca58 <vPortFree>
				vPortFree( pxTCB );
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 ff9f 	bl	800ca58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb1a:	e019      	b.n	800bb50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d103      	bne.n	800bb2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 ff96 	bl	800ca58 <vPortFree>
	}
 800bb2c:	e010      	b.n	800bb50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d00b      	beq.n	800bb50 <prvDeleteTCB+0x58>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	60fb      	str	r3, [r7, #12]
}
 800bb4a:	bf00      	nop
 800bb4c:	bf00      	nop
 800bb4e:	e7fd      	b.n	800bb4c <prvDeleteTCB+0x54>
	}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb5e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb90 <prvResetNextTaskUnblockTime+0x38>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb68:	4b0a      	ldr	r3, [pc, #40]	@ (800bb94 <prvResetNextTaskUnblockTime+0x3c>)
 800bb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb70:	e008      	b.n	800bb84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb72:	4b07      	ldr	r3, [pc, #28]	@ (800bb90 <prvResetNextTaskUnblockTime+0x38>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a04      	ldr	r2, [pc, #16]	@ (800bb94 <prvResetNextTaskUnblockTime+0x3c>)
 800bb82:	6013      	str	r3, [r2, #0]
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	20001600 	.word	0x20001600
 800bb94:	20001668 	.word	0x20001668

0800bb98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bbcc <xTaskGetSchedulerState+0x34>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d102      	bne.n	800bbac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bba6:	2301      	movs	r3, #1
 800bba8:	607b      	str	r3, [r7, #4]
 800bbaa:	e008      	b.n	800bbbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbac:	4b08      	ldr	r3, [pc, #32]	@ (800bbd0 <xTaskGetSchedulerState+0x38>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	607b      	str	r3, [r7, #4]
 800bbb8:	e001      	b.n	800bbbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbbe:	687b      	ldr	r3, [r7, #4]
	}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	20001654 	.word	0x20001654
 800bbd0:	20001670 	.word	0x20001670

0800bbd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d058      	beq.n	800bc9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbea:	4b2f      	ldr	r3, [pc, #188]	@ (800bca8 <xTaskPriorityDisinherit+0xd4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d00b      	beq.n	800bc0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60fb      	str	r3, [r7, #12]
}
 800bc06:	bf00      	nop
 800bc08:	bf00      	nop
 800bc0a:	e7fd      	b.n	800bc08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10b      	bne.n	800bc2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	60bb      	str	r3, [r7, #8]
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	e7fd      	b.n	800bc28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc30:	1e5a      	subs	r2, r3, #1
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d02c      	beq.n	800bc9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d128      	bne.n	800bc9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe fc54 	bl	800a4fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcac <xTaskPriorityDisinherit+0xd8>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d903      	bls.n	800bc7c <xTaskPriorityDisinherit+0xa8>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc78:	4a0c      	ldr	r2, [pc, #48]	@ (800bcac <xTaskPriorityDisinherit+0xd8>)
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4a09      	ldr	r2, [pc, #36]	@ (800bcb0 <xTaskPriorityDisinherit+0xdc>)
 800bc8a:	441a      	add	r2, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fe fbd5 	bl	800a442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc9c:	697b      	ldr	r3, [r7, #20]
	}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20001174 	.word	0x20001174
 800bcac:	20001650 	.word	0x20001650
 800bcb0:	20001178 	.word	0x20001178

0800bcb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcbe:	4b21      	ldr	r3, [pc, #132]	@ (800bd44 <prvAddCurrentTaskToDelayedList+0x90>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc4:	4b20      	ldr	r3, [pc, #128]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fc16 	bl	800a4fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd6:	d10a      	bne.n	800bcee <prvAddCurrentTaskToDelayedList+0x3a>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d007      	beq.n	800bcee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcde:	4b1a      	ldr	r3, [pc, #104]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3304      	adds	r3, #4
 800bce4:	4619      	mov	r1, r3
 800bce6:	4819      	ldr	r0, [pc, #100]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x98>)
 800bce8:	f7fe fbab 	bl	800a442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcec:	e026      	b.n	800bd3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcf6:	4b14      	ldr	r3, [pc, #80]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d209      	bcs.n	800bd1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd06:	4b12      	ldr	r3, [pc, #72]	@ (800bd50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f7fe fbb9 	bl	800a48a <vListInsert>
}
 800bd18:	e010      	b.n	800bd3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3304      	adds	r3, #4
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7fe fbaf 	bl	800a48a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d202      	bcs.n	800bd3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd36:	4a08      	ldr	r2, [pc, #32]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	6013      	str	r3, [r2, #0]
}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	2000164c 	.word	0x2000164c
 800bd48:	20001174 	.word	0x20001174
 800bd4c:	20001634 	.word	0x20001634
 800bd50:	20001604 	.word	0x20001604
 800bd54:	20001600 	.word	0x20001600
 800bd58:	20001668 	.word	0x20001668

0800bd5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	@ 0x28
 800bd60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd66:	f000 fb13 	bl	800c390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bde0 <xTimerCreateTimerTask+0x84>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d021      	beq.n	800bdb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd7a:	1d3a      	adds	r2, r7, #4
 800bd7c:	f107 0108 	add.w	r1, r7, #8
 800bd80:	f107 030c 	add.w	r3, r7, #12
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe fb15 	bl	800a3b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	9202      	str	r2, [sp, #8]
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	2302      	movs	r3, #2
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	460a      	mov	r2, r1
 800bd9c:	4911      	ldr	r1, [pc, #68]	@ (800bde4 <xTimerCreateTimerTask+0x88>)
 800bd9e:	4812      	ldr	r0, [pc, #72]	@ (800bde8 <xTimerCreateTimerTask+0x8c>)
 800bda0:	f7ff f8d0 	bl	800af44 <xTaskCreateStatic>
 800bda4:	4603      	mov	r3, r0
 800bda6:	4a11      	ldr	r2, [pc, #68]	@ (800bdec <xTimerCreateTimerTask+0x90>)
 800bda8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdaa:	4b10      	ldr	r3, [pc, #64]	@ (800bdec <xTimerCreateTimerTask+0x90>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10b      	bne.n	800bdd4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	613b      	str	r3, [r7, #16]
}
 800bdce:	bf00      	nop
 800bdd0:	bf00      	nop
 800bdd2:	e7fd      	b.n	800bdd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdd4:	697b      	ldr	r3, [r7, #20]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	200016a4 	.word	0x200016a4
 800bde4:	0800e294 	.word	0x0800e294
 800bde8:	0800bf29 	.word	0x0800bf29
 800bdec:	200016a8 	.word	0x200016a8

0800bdf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	@ 0x28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xTimerGenericCommand+0x30>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	623b      	str	r3, [r7, #32]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be20:	4b19      	ldr	r3, [pc, #100]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d02a      	beq.n	800be7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b05      	cmp	r3, #5
 800be38:	dc18      	bgt.n	800be6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be3a:	f7ff fead 	bl	800bb98 <xTaskGetSchedulerState>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b02      	cmp	r3, #2
 800be42:	d109      	bne.n	800be58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be44:	4b10      	ldr	r3, [pc, #64]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	f107 0110 	add.w	r1, r7, #16
 800be4c:	2300      	movs	r3, #0
 800be4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be50:	f7fe fc88 	bl	800a764 <xQueueGenericSend>
 800be54:	6278      	str	r0, [r7, #36]	@ 0x24
 800be56:	e012      	b.n	800be7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be58:	4b0b      	ldr	r3, [pc, #44]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	f107 0110 	add.w	r1, r7, #16
 800be60:	2300      	movs	r3, #0
 800be62:	2200      	movs	r2, #0
 800be64:	f7fe fc7e 	bl	800a764 <xQueueGenericSend>
 800be68:	6278      	str	r0, [r7, #36]	@ 0x24
 800be6a:	e008      	b.n	800be7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be6c:	4b06      	ldr	r3, [pc, #24]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be6e:	6818      	ldr	r0, [r3, #0]
 800be70:	f107 0110 	add.w	r1, r7, #16
 800be74:	2300      	movs	r3, #0
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	f7fe fd76 	bl	800a968 <xQueueGenericSendFromISR>
 800be7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be80:	4618      	mov	r0, r3
 800be82:	3728      	adds	r7, #40	@ 0x28
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	200016a4 	.word	0x200016a4

0800be8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af02      	add	r7, sp, #8
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be96:	4b23      	ldr	r3, [pc, #140]	@ (800bf24 <prvProcessExpiredTimer+0x98>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fb29 	bl	800a4fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d023      	beq.n	800bf00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	699a      	ldr	r2, [r3, #24]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	18d1      	adds	r1, r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	6978      	ldr	r0, [r7, #20]
 800bec6:	f000 f8d5 	bl	800c074 <prvInsertTimerInActiveList>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d020      	beq.n	800bf12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bed0:	2300      	movs	r3, #0
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	2300      	movs	r3, #0
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	2100      	movs	r1, #0
 800beda:	6978      	ldr	r0, [r7, #20]
 800bedc:	f7ff ff88 	bl	800bdf0 <xTimerGenericCommand>
 800bee0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d114      	bne.n	800bf12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	60fb      	str	r3, [r7, #12]
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf06:	f023 0301 	bic.w	r3, r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	6978      	ldr	r0, [r7, #20]
 800bf18:	4798      	blx	r3
}
 800bf1a:	bf00      	nop
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2000169c 	.word	0x2000169c

0800bf28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf30:	f107 0308 	add.w	r3, r7, #8
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 f859 	bl	800bfec <prvGetNextExpireTime>
 800bf3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f805 	bl	800bf50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf46:	f000 f8d7 	bl	800c0f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf4a:	bf00      	nop
 800bf4c:	e7f0      	b.n	800bf30 <prvTimerTask+0x8>
	...

0800bf50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf5a:	f7ff fa37 	bl	800b3cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf5e:	f107 0308 	add.w	r3, r7, #8
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f866 	bl	800c034 <prvSampleTimeNow>
 800bf68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d130      	bne.n	800bfd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <prvProcessTimerOrBlockTask+0x3c>
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d806      	bhi.n	800bf8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf7e:	f7ff fa33 	bl	800b3e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf82:	68f9      	ldr	r1, [r7, #12]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff ff81 	bl	800be8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf8a:	e024      	b.n	800bfd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d008      	beq.n	800bfa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf92:	4b13      	ldr	r3, [pc, #76]	@ (800bfe0 <prvProcessTimerOrBlockTask+0x90>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <prvProcessTimerOrBlockTask+0x50>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e000      	b.n	800bfa2 <prvProcessTimerOrBlockTask+0x52>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfa4:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe4 <prvProcessTimerOrBlockTask+0x94>)
 800bfa6:	6818      	ldr	r0, [r3, #0]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f7fe ff93 	bl	800aedc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfb6:	f7ff fa17 	bl	800b3e8 <xTaskResumeAll>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10a      	bne.n	800bfd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfc0:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <prvProcessTimerOrBlockTask+0x98>)
 800bfc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
}
 800bfd0:	e001      	b.n	800bfd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfd2:	f7ff fa09 	bl	800b3e8 <xTaskResumeAll>
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200016a0 	.word	0x200016a0
 800bfe4:	200016a4 	.word	0x200016a4
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bff4:	4b0e      	ldr	r3, [pc, #56]	@ (800c030 <prvGetNextExpireTime+0x44>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <prvGetNextExpireTime+0x16>
 800bffe:	2201      	movs	r2, #1
 800c000:	e000      	b.n	800c004 <prvGetNextExpireTime+0x18>
 800c002:	2200      	movs	r2, #0
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c010:	4b07      	ldr	r3, [pc, #28]	@ (800c030 <prvGetNextExpireTime+0x44>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	e001      	b.n	800c020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c020:	68fb      	ldr	r3, [r7, #12]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	2000169c 	.word	0x2000169c

0800c034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c03c:	f7ff fa72 	bl	800b524 <xTaskGetTickCount>
 800c040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c042:	4b0b      	ldr	r3, [pc, #44]	@ (800c070 <prvSampleTimeNow+0x3c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d205      	bcs.n	800c058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c04c:	f000 f93a 	bl	800c2c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	e002      	b.n	800c05e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c05e:	4a04      	ldr	r2, [pc, #16]	@ (800c070 <prvSampleTimeNow+0x3c>)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c064:	68fb      	ldr	r3, [r7, #12]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200016ac 	.word	0x200016ac

0800c074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c082:	2300      	movs	r3, #0
 800c084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d812      	bhi.n	800c0c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	1ad2      	subs	r2, r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d302      	bcc.n	800c0ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e01b      	b.n	800c0e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0ae:	4b10      	ldr	r3, [pc, #64]	@ (800c0f0 <prvInsertTimerInActiveList+0x7c>)
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7fe f9e6 	bl	800a48a <vListInsert>
 800c0be:	e012      	b.n	800c0e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d206      	bcs.n	800c0d6 <prvInsertTimerInActiveList+0x62>
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d302      	bcc.n	800c0d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e007      	b.n	800c0e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0d6:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <prvInsertTimerInActiveList+0x80>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	f7fe f9d2 	bl	800a48a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0e6:	697b      	ldr	r3, [r7, #20]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	200016a0 	.word	0x200016a0
 800c0f4:	2000169c 	.word	0x2000169c

0800c0f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08e      	sub	sp, #56	@ 0x38
 800c0fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0fe:	e0ce      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	da19      	bge.n	800c13a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c106:	1d3b      	adds	r3, r7, #4
 800c108:	3304      	adds	r3, #4
 800c10a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	61fb      	str	r3, [r7, #28]
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c130:	6850      	ldr	r0, [r2, #4]
 800c132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c134:	6892      	ldr	r2, [r2, #8]
 800c136:	4611      	mov	r1, r2
 800c138:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f2c0 80ae 	blt.w	800c29e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d004      	beq.n	800c158 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c150:	3304      	adds	r3, #4
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe f9d2 	bl	800a4fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c158:	463b      	mov	r3, r7
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff ff6a 	bl	800c034 <prvSampleTimeNow>
 800c160:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b09      	cmp	r3, #9
 800c166:	f200 8097 	bhi.w	800c298 <prvProcessReceivedCommands+0x1a0>
 800c16a:	a201      	add	r2, pc, #4	@ (adr r2, 800c170 <prvProcessReceivedCommands+0x78>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c199 	.word	0x0800c199
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c20f 	.word	0x0800c20f
 800c180:	0800c223 	.word	0x0800c223
 800c184:	0800c26f 	.word	0x0800c26f
 800c188:	0800c199 	.word	0x0800c199
 800c18c:	0800c199 	.word	0x0800c199
 800c190:	0800c20f 	.word	0x0800c20f
 800c194:	0800c223 	.word	0x0800c223
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	18d1      	adds	r1, r2, r3
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1b8:	f7ff ff5c 	bl	800c074 <prvInsertTimerInActiveList>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d06c      	beq.n	800c29c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d061      	beq.n	800c29c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	441a      	add	r2, r3
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ea:	f7ff fe01 	bl	800bdf0 <xTimerGenericCommand>
 800c1ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d152      	bne.n	800c29c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	61bb      	str	r3, [r7, #24]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c214:	f023 0301 	bic.w	r3, r3, #1
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c220:	e03d      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c228:	f043 0301 	orr.w	r3, r3, #1
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c238:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10b      	bne.n	800c25a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	617b      	str	r3, [r7, #20]
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop
 800c258:	e7fd      	b.n	800c256 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25c:	699a      	ldr	r2, [r3, #24]
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	18d1      	adds	r1, r2, r3
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c268:	f7ff ff04 	bl	800c074 <prvInsertTimerInActiveList>
					break;
 800c26c:	e017      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c274:	f003 0302 	and.w	r3, r3, #2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d103      	bne.n	800c284 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c27c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c27e:	f000 fbeb 	bl	800ca58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c282:	e00c      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c28a:	f023 0301 	bic.w	r3, r3, #1
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c296:	e002      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c298:	bf00      	nop
 800c29a:	e000      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
					break;
 800c29c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c29e:	4b08      	ldr	r3, [pc, #32]	@ (800c2c0 <prvProcessReceivedCommands+0x1c8>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	1d39      	adds	r1, r7, #4
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe fbfc 	bl	800aaa4 <xQueueReceive>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f47f af26 	bne.w	800c100 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	3730      	adds	r7, #48	@ 0x30
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	200016a4 	.word	0x200016a4

0800c2c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b088      	sub	sp, #32
 800c2c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2ca:	e049      	b.n	800c360 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2cc:	4b2e      	ldr	r3, [pc, #184]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe f909 	bl	800a4fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2f8:	f003 0304 	and.w	r3, r3, #4
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d02f      	beq.n	800c360 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	4413      	add	r3, r2
 800c308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d90e      	bls.n	800c330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c31e:	4b1a      	ldr	r3, [pc, #104]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3304      	adds	r3, #4
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f7fe f8ae 	bl	800a48a <vListInsert>
 800c32e:	e017      	b.n	800c360 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c330:	2300      	movs	r3, #0
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	2100      	movs	r1, #0
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f7ff fd58 	bl	800bdf0 <xTimerGenericCommand>
 800c340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10b      	bne.n	800c360 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	603b      	str	r3, [r7, #0]
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	e7fd      	b.n	800c35c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c360:	4b09      	ldr	r3, [pc, #36]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1b0      	bne.n	800c2cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c36a:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c370:	4b06      	ldr	r3, [pc, #24]	@ (800c38c <prvSwitchTimerLists+0xc8>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a04      	ldr	r2, [pc, #16]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c376:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c378:	4a04      	ldr	r2, [pc, #16]	@ (800c38c <prvSwitchTimerLists+0xc8>)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	6013      	str	r3, [r2, #0]
}
 800c37e:	bf00      	nop
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000169c 	.word	0x2000169c
 800c38c:	200016a0 	.word	0x200016a0

0800c390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c396:	f000 f96f 	bl	800c678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c39a:	4b15      	ldr	r3, [pc, #84]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d120      	bne.n	800c3e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3a2:	4814      	ldr	r0, [pc, #80]	@ (800c3f4 <prvCheckForValidListAndQueue+0x64>)
 800c3a4:	f7fe f820 	bl	800a3e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3a8:	4813      	ldr	r0, [pc, #76]	@ (800c3f8 <prvCheckForValidListAndQueue+0x68>)
 800c3aa:	f7fe f81d 	bl	800a3e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3ae:	4b13      	ldr	r3, [pc, #76]	@ (800c3fc <prvCheckForValidListAndQueue+0x6c>)
 800c3b0:	4a10      	ldr	r2, [pc, #64]	@ (800c3f4 <prvCheckForValidListAndQueue+0x64>)
 800c3b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3b4:	4b12      	ldr	r3, [pc, #72]	@ (800c400 <prvCheckForValidListAndQueue+0x70>)
 800c3b6:	4a10      	ldr	r2, [pc, #64]	@ (800c3f8 <prvCheckForValidListAndQueue+0x68>)
 800c3b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	4b11      	ldr	r3, [pc, #68]	@ (800c404 <prvCheckForValidListAndQueue+0x74>)
 800c3c0:	4a11      	ldr	r2, [pc, #68]	@ (800c408 <prvCheckForValidListAndQueue+0x78>)
 800c3c2:	2110      	movs	r1, #16
 800c3c4:	200a      	movs	r0, #10
 800c3c6:	f7fe f92d 	bl	800a624 <xQueueGenericCreateStatic>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4a08      	ldr	r2, [pc, #32]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c3ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3d0:	4b07      	ldr	r3, [pc, #28]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3d8:	4b05      	ldr	r3, [pc, #20]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	490b      	ldr	r1, [pc, #44]	@ (800c40c <prvCheckForValidListAndQueue+0x7c>)
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fd52 	bl	800ae88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3e4:	f000 f97a 	bl	800c6dc <vPortExitCritical>
}
 800c3e8:	bf00      	nop
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	200016a4 	.word	0x200016a4
 800c3f4:	20001674 	.word	0x20001674
 800c3f8:	20001688 	.word	0x20001688
 800c3fc:	2000169c 	.word	0x2000169c
 800c400:	200016a0 	.word	0x200016a0
 800c404:	20001750 	.word	0x20001750
 800c408:	200016b0 	.word	0x200016b0
 800c40c:	0800e29c 	.word	0x0800e29c

0800c410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3b04      	subs	r3, #4
 800c420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3b04      	subs	r3, #4
 800c42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f023 0201 	bic.w	r2, r3, #1
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b04      	subs	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c440:	4a0c      	ldr	r2, [pc, #48]	@ (800c474 <pxPortInitialiseStack+0x64>)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3b14      	subs	r3, #20
 800c44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3b04      	subs	r3, #4
 800c456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f06f 0202 	mvn.w	r2, #2
 800c45e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3b20      	subs	r3, #32
 800c464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c466:	68fb      	ldr	r3, [r7, #12]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	0800c479 	.word	0x0800c479

0800c478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c482:	4b13      	ldr	r3, [pc, #76]	@ (800c4d0 <prvTaskExitError+0x58>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48a:	d00b      	beq.n	800c4a4 <prvTaskExitError+0x2c>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	60fb      	str	r3, [r7, #12]
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <prvTaskExitError+0x28>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	60bb      	str	r3, [r7, #8]
}
 800c4b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4b8:	bf00      	nop
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0fc      	beq.n	800c4ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	20000018 	.word	0x20000018
	...

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	@ (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	20001174 	.word	0x20001174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	@ (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c536:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <xPortStartScheduler+0x124>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a47      	ldr	r2, [pc, #284]	@ (800c658 <xPortStartScheduler+0x128>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d10b      	bne.n	800c558 <xPortStartScheduler+0x28>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	613b      	str	r3, [r7, #16]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c558:	4b3e      	ldr	r3, [pc, #248]	@ (800c654 <xPortStartScheduler+0x124>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a3f      	ldr	r2, [pc, #252]	@ (800c65c <xPortStartScheduler+0x12c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d10b      	bne.n	800c57a <xPortStartScheduler+0x4a>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	60fb      	str	r3, [r7, #12]
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	e7fd      	b.n	800c576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c57a:	4b39      	ldr	r3, [pc, #228]	@ (800c660 <xPortStartScheduler+0x130>)
 800c57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	22ff      	movs	r2, #255	@ 0xff
 800c58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b2db      	uxtb	r3, r3
 800c592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c594:	78fb      	ldrb	r3, [r7, #3]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	4b31      	ldr	r3, [pc, #196]	@ (800c664 <xPortStartScheduler+0x134>)
 800c5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5a2:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a8:	e009      	b.n	800c5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b4:	78fb      	ldrb	r3, [r7, #3]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c6:	2b80      	cmp	r3, #128	@ 0x80
 800c5c8:	d0ef      	beq.n	800c5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5ca:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f1c3 0307 	rsb	r3, r3, #7
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d00b      	beq.n	800c5ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	60bb      	str	r3, [r7, #8]
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	e7fd      	b.n	800c5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	021b      	lsls	r3, r3, #8
 800c5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c600:	4a19      	ldr	r2, [pc, #100]	@ (800c668 <xPortStartScheduler+0x138>)
 800c602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c60c:	4b17      	ldr	r3, [pc, #92]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a16      	ldr	r2, [pc, #88]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c618:	4b14      	ldr	r3, [pc, #80]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a13      	ldr	r2, [pc, #76]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c624:	f000 f8da 	bl	800c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c628:	4b11      	ldr	r3, [pc, #68]	@ (800c670 <xPortStartScheduler+0x140>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c62e:	f000 f8f9 	bl	800c824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <xPortStartScheduler+0x144>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a0f      	ldr	r2, [pc, #60]	@ (800c674 <xPortStartScheduler+0x144>)
 800c638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c63e:	f7ff ff63 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c642:	f7ff f839 	bl	800b6b8 <vTaskSwitchContext>
	prvTaskExitError();
 800c646:	f7ff ff17 	bl	800c478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	e000ed00 	.word	0xe000ed00
 800c658:	410fc271 	.word	0x410fc271
 800c65c:	410fc270 	.word	0x410fc270
 800c660:	e000e400 	.word	0xe000e400
 800c664:	200017a0 	.word	0x200017a0
 800c668:	200017a4 	.word	0x200017a4
 800c66c:	e000ed20 	.word	0xe000ed20
 800c670:	20000018 	.word	0x20000018
 800c674:	e000ef34 	.word	0xe000ef34

0800c678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c692:	4b10      	ldr	r3, [pc, #64]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3301      	adds	r3, #1
 800c698:	4a0e      	ldr	r2, [pc, #56]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c69c:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d110      	bne.n	800c6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <vPortEnterCritical+0x60>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	603b      	str	r3, [r7, #0]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <vPortEnterCritical+0x4a>
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000018 	.word	0x20000018
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6e2:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <vPortExitCritical+0x50>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10b      	bne.n	800c702 <vPortExitCritical+0x26>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	607b      	str	r3, [r7, #4]
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	e7fd      	b.n	800c6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c702:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <vPortExitCritical+0x50>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3b01      	subs	r3, #1
 800c708:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <vPortExitCritical+0x50>)
 800c70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <vPortExitCritical+0x50>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <vPortExitCritical+0x44>
 800c714:	2300      	movs	r3, #0
 800c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f383 8811 	msr	BASEPRI, r3
}
 800c71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20000018 	.word	0x20000018

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c754:	f380 8811 	msr	BASEPRI, r0
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f7fe ffaa 	bl	800b6b8 <vTaskSwitchContext>
 800c764:	f04f 0000 	mov.w	r0, #0
 800c768:	f380 8811 	msr	BASEPRI, r0
 800c76c:	bc09      	pop	{r0, r3}
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6808      	ldr	r0, [r1, #0]
 800c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c776:	f01e 0f10 	tst.w	lr, #16
 800c77a:	bf08      	it	eq
 800c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c780:	f380 8809 	msr	PSP, r0
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst>:
 800c790:	20001174 	.word	0x20001174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b2:	f7fe fec7 	bl	800b544 <xTaskIncrementTick>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7bc:	4b06      	ldr	r3, [pc, #24]	@ (800c7d8 <xPortSysTickHandler+0x40>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c814 <vPortSetupTimerInterrupt+0x38>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c818 <vPortSetupTimerInterrupt+0x3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c81c <vPortSetupTimerInterrupt+0x40>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	099b      	lsrs	r3, r3, #6
 800c7f8:	4a09      	ldr	r2, [pc, #36]	@ (800c820 <vPortSetupTimerInterrupt+0x44>)
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7fe:	4b04      	ldr	r3, [pc, #16]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c800:	2207      	movs	r2, #7
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	e000e010 	.word	0xe000e010
 800c814:	e000e018 	.word	0xe000e018
 800c818:	2000000c 	.word	0x2000000c
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	e000e014 	.word	0xe000e014

0800c824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c834 <vPortEnableVFP+0x10>
 800c828:	6801      	ldr	r1, [r0, #0]
 800c82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c82e:	6001      	str	r1, [r0, #0]
 800c830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c832:	bf00      	nop
 800c834:	e000ed88 	.word	0xe000ed88

0800c838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c83e:	f3ef 8305 	mrs	r3, IPSR
 800c842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d915      	bls.n	800c876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c84a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ac <vPortValidateInterruptPriority+0x74>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c854:	4b16      	ldr	r3, [pc, #88]	@ (800c8b0 <vPortValidateInterruptPriority+0x78>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	7afa      	ldrb	r2, [r7, #11]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d20b      	bcs.n	800c876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
 800c872:	bf00      	nop
 800c874:	e7fd      	b.n	800c872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c876:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b4 <vPortValidateInterruptPriority+0x7c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c87e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b8 <vPortValidateInterruptPriority+0x80>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d90b      	bls.n	800c89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	603b      	str	r3, [r7, #0]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <vPortValidateInterruptPriority+0x62>
	}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	e000e3f0 	.word	0xe000e3f0
 800c8b0:	200017a0 	.word	0x200017a0
 800c8b4:	e000ed0c 	.word	0xe000ed0c
 800c8b8:	200017a4 	.word	0x200017a4

0800c8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08a      	sub	sp, #40	@ 0x28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8c8:	f7fe fd80 	bl	800b3cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ca40 <pvPortMalloc+0x184>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8d4:	f000 f924 	bl	800cb20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800ca44 <pvPortMalloc+0x188>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f040 8095 	bne.w	800ca10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01e      	beq.n	800c92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d015      	beq.n	800c92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f023 0307 	bic.w	r3, r3, #7
 800c904:	3308      	adds	r3, #8
 800c906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f003 0307 	and.w	r3, r3, #7
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00b      	beq.n	800c92a <pvPortMalloc+0x6e>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	617b      	str	r3, [r7, #20]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d06f      	beq.n	800ca10 <pvPortMalloc+0x154>
 800c930:	4b45      	ldr	r3, [pc, #276]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d86a      	bhi.n	800ca10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c93a:	4b44      	ldr	r3, [pc, #272]	@ (800ca4c <pvPortMalloc+0x190>)
 800c93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c93e:	4b43      	ldr	r3, [pc, #268]	@ (800ca4c <pvPortMalloc+0x190>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c944:	e004      	b.n	800c950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d903      	bls.n	800c962 <pvPortMalloc+0xa6>
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f1      	bne.n	800c946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c962:	4b37      	ldr	r3, [pc, #220]	@ (800ca40 <pvPortMalloc+0x184>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c968:	429a      	cmp	r2, r3
 800c96a:	d051      	beq.n	800ca10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2208      	movs	r2, #8
 800c972:	4413      	add	r3, r2
 800c974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	1ad2      	subs	r2, r2, r3
 800c986:	2308      	movs	r3, #8
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d920      	bls.n	800c9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4413      	add	r3, r2
 800c994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9ca:	69b8      	ldr	r0, [r7, #24]
 800c9cc:	f000 f90a 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d203      	bcs.n	800c9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ca44 <pvPortMalloc+0x188>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca06:	4b13      	ldr	r3, [pc, #76]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	4a11      	ldr	r2, [pc, #68]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca10:	f7fe fcea 	bl	800b3e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <pvPortMalloc+0x17a>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <pvPortMalloc+0x176>
	return pvReturn;
 800ca36:	69fb      	ldr	r3, [r7, #28]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	@ 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20002368 	.word	0x20002368
 800ca44:	2000237c 	.word	0x2000237c
 800ca48:	2000236c 	.word	0x2000236c
 800ca4c:	20002360 	.word	0x20002360
 800ca50:	20002370 	.word	0x20002370
 800ca54:	20002374 	.word	0x20002374

0800ca58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d04f      	beq.n	800cb0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca6a:	2308      	movs	r3, #8
 800ca6c:	425b      	negs	r3, r3
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b25      	ldr	r3, [pc, #148]	@ (800cb14 <vPortFree+0xbc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4013      	ands	r3, r2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10b      	bne.n	800ca9e <vPortFree+0x46>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	60fb      	str	r3, [r7, #12]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00b      	beq.n	800cabe <vPortFree+0x66>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <vPortFree+0xbc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4013      	ands	r3, r2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01e      	beq.n	800cb0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d11a      	bne.n	800cb0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb14 <vPortFree+0xbc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	43db      	mvns	r3, r3
 800cade:	401a      	ands	r2, r3
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cae4:	f7fe fc72 	bl	800b3cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <vPortFree+0xc0>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4413      	add	r3, r2
 800caf2:	4a09      	ldr	r2, [pc, #36]	@ (800cb18 <vPortFree+0xc0>)
 800caf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f000 f874 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cafc:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <vPortFree+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	4a06      	ldr	r2, [pc, #24]	@ (800cb1c <vPortFree+0xc4>)
 800cb04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb06:	f7fe fc6f 	bl	800b3e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	2000237c 	.word	0x2000237c
 800cb18:	2000236c 	.word	0x2000236c
 800cb1c:	20002378 	.word	0x20002378

0800cb20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb26:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800cb2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb2c:	4b27      	ldr	r3, [pc, #156]	@ (800cbcc <prvHeapInit+0xac>)
 800cb2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0307 	and.w	r3, r3, #7
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00c      	beq.n	800cb54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3307      	adds	r3, #7
 800cb3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0307 	bic.w	r3, r3, #7
 800cb46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbcc <prvHeapInit+0xac>)
 800cb50:	4413      	add	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb58:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	4413      	add	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4a15      	ldr	r2, [pc, #84]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb82:	4b14      	ldr	r3, [pc, #80]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2200      	movs	r2, #0
 800cb88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb8a:	4b12      	ldr	r3, [pc, #72]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	1ad2      	subs	r2, r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cba0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd8 <prvHeapInit+0xb8>)
 800cbae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4a09      	ldr	r2, [pc, #36]	@ (800cbdc <prvHeapInit+0xbc>)
 800cbb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbb8:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <prvHeapInit+0xc0>)
 800cbba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cbbe:	601a      	str	r2, [r3, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	200017a8 	.word	0x200017a8
 800cbd0:	20002360 	.word	0x20002360
 800cbd4:	20002368 	.word	0x20002368
 800cbd8:	20002370 	.word	0x20002370
 800cbdc:	2000236c 	.word	0x2000236c
 800cbe0:	2000237c 	.word	0x2000237c

0800cbe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbec:	4b28      	ldr	r3, [pc, #160]	@ (800cc90 <prvInsertBlockIntoFreeList+0xac>)
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e002      	b.n	800cbf8 <prvInsertBlockIntoFreeList+0x14>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d8f7      	bhi.n	800cbf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d108      	bne.n	800cc26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	441a      	add	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d118      	bne.n	800cc6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d00d      	beq.n	800cc62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e008      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc62:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e003      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d002      	beq.n	800cc82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20002360 	.word	0x20002360
 800cc94:	20002368 	.word	0x20002368

0800cc98 <atan2>:
 800cc98:	f000 b95e 	b.w	800cf58 <__ieee754_atan2>

0800cc9c <sqrt>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	ed2d 8b02 	vpush	{d8}
 800cca2:	ec55 4b10 	vmov	r4, r5, d0
 800cca6:	f000 f87b 	bl	800cda0 <__ieee754_sqrt>
 800ccaa:	4622      	mov	r2, r4
 800ccac:	462b      	mov	r3, r5
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	eeb0 8a40 	vmov.f32	s16, s0
 800ccb6:	eef0 8a60 	vmov.f32	s17, s1
 800ccba:	f7f3 ff37 	bl	8000b2c <__aeabi_dcmpun>
 800ccbe:	b990      	cbnz	r0, 800cce6 <sqrt+0x4a>
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f7f3 ff08 	bl	8000adc <__aeabi_dcmplt>
 800cccc:	b158      	cbz	r0, 800cce6 <sqrt+0x4a>
 800ccce:	f000 fc19 	bl	800d504 <__errno>
 800ccd2:	2321      	movs	r3, #33	@ 0x21
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4610      	mov	r0, r2
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f7f3 fdb5 	bl	800084c <__aeabi_ddiv>
 800cce2:	ec41 0b18 	vmov	d8, r0, r1
 800cce6:	eeb0 0a48 	vmov.f32	s0, s16
 800ccea:	eef0 0a68 	vmov.f32	s1, s17
 800ccee:	ecbd 8b02 	vpop	{d8}
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}

0800ccf4 <fmaxf>:
 800ccf4:	b508      	push	{r3, lr}
 800ccf6:	ed2d 8b02 	vpush	{d8}
 800ccfa:	eeb0 8a40 	vmov.f32	s16, s0
 800ccfe:	eef0 8a60 	vmov.f32	s17, s1
 800cd02:	f000 f831 	bl	800cd68 <__fpclassifyf>
 800cd06:	b930      	cbnz	r0, 800cd16 <fmaxf+0x22>
 800cd08:	eeb0 8a68 	vmov.f32	s16, s17
 800cd0c:	eeb0 0a48 	vmov.f32	s0, s16
 800cd10:	ecbd 8b02 	vpop	{d8}
 800cd14:	bd08      	pop	{r3, pc}
 800cd16:	eeb0 0a68 	vmov.f32	s0, s17
 800cd1a:	f000 f825 	bl	800cd68 <__fpclassifyf>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d0f4      	beq.n	800cd0c <fmaxf+0x18>
 800cd22:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2a:	dded      	ble.n	800cd08 <fmaxf+0x14>
 800cd2c:	e7ee      	b.n	800cd0c <fmaxf+0x18>

0800cd2e <fminf>:
 800cd2e:	b508      	push	{r3, lr}
 800cd30:	ed2d 8b02 	vpush	{d8}
 800cd34:	eeb0 8a40 	vmov.f32	s16, s0
 800cd38:	eef0 8a60 	vmov.f32	s17, s1
 800cd3c:	f000 f814 	bl	800cd68 <__fpclassifyf>
 800cd40:	b930      	cbnz	r0, 800cd50 <fminf+0x22>
 800cd42:	eeb0 8a68 	vmov.f32	s16, s17
 800cd46:	eeb0 0a48 	vmov.f32	s0, s16
 800cd4a:	ecbd 8b02 	vpop	{d8}
 800cd4e:	bd08      	pop	{r3, pc}
 800cd50:	eeb0 0a68 	vmov.f32	s0, s17
 800cd54:	f000 f808 	bl	800cd68 <__fpclassifyf>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d0f4      	beq.n	800cd46 <fminf+0x18>
 800cd5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd64:	d5ed      	bpl.n	800cd42 <fminf+0x14>
 800cd66:	e7ee      	b.n	800cd46 <fminf+0x18>

0800cd68 <__fpclassifyf>:
 800cd68:	ee10 3a10 	vmov	r3, s0
 800cd6c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800cd70:	d00d      	beq.n	800cd8e <__fpclassifyf+0x26>
 800cd72:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800cd76:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800cd7a:	d30a      	bcc.n	800cd92 <__fpclassifyf+0x2a>
 800cd7c:	4b07      	ldr	r3, [pc, #28]	@ (800cd9c <__fpclassifyf+0x34>)
 800cd7e:	1e42      	subs	r2, r0, #1
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d908      	bls.n	800cd96 <__fpclassifyf+0x2e>
 800cd84:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800cd88:	4258      	negs	r0, r3
 800cd8a:	4158      	adcs	r0, r3
 800cd8c:	4770      	bx	lr
 800cd8e:	2002      	movs	r0, #2
 800cd90:	4770      	bx	lr
 800cd92:	2004      	movs	r0, #4
 800cd94:	4770      	bx	lr
 800cd96:	2003      	movs	r0, #3
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	007ffffe 	.word	0x007ffffe

0800cda0 <__ieee754_sqrt>:
 800cda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	4a68      	ldr	r2, [pc, #416]	@ (800cf48 <__ieee754_sqrt+0x1a8>)
 800cda6:	ec55 4b10 	vmov	r4, r5, d0
 800cdaa:	43aa      	bics	r2, r5
 800cdac:	462b      	mov	r3, r5
 800cdae:	4621      	mov	r1, r4
 800cdb0:	d110      	bne.n	800cdd4 <__ieee754_sqrt+0x34>
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fc1e 	bl	80005f8 <__aeabi_dmul>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	f7f3 fa62 	bl	800028c <__adddf3>
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	ec45 4b10 	vmov	d0, r4, r5
 800cdd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	dc0e      	bgt.n	800cdf6 <__ieee754_sqrt+0x56>
 800cdd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cddc:	4322      	orrs	r2, r4
 800cdde:	d0f5      	beq.n	800cdcc <__ieee754_sqrt+0x2c>
 800cde0:	b19d      	cbz	r5, 800ce0a <__ieee754_sqrt+0x6a>
 800cde2:	4622      	mov	r2, r4
 800cde4:	4620      	mov	r0, r4
 800cde6:	4629      	mov	r1, r5
 800cde8:	f7f3 fa4e 	bl	8000288 <__aeabi_dsub>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	f7f3 fd2c 	bl	800084c <__aeabi_ddiv>
 800cdf4:	e7e8      	b.n	800cdc8 <__ieee754_sqrt+0x28>
 800cdf6:	152a      	asrs	r2, r5, #20
 800cdf8:	d115      	bne.n	800ce26 <__ieee754_sqrt+0x86>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	e009      	b.n	800ce12 <__ieee754_sqrt+0x72>
 800cdfe:	0acb      	lsrs	r3, r1, #11
 800ce00:	3a15      	subs	r2, #21
 800ce02:	0549      	lsls	r1, r1, #21
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d0fa      	beq.n	800cdfe <__ieee754_sqrt+0x5e>
 800ce08:	e7f7      	b.n	800cdfa <__ieee754_sqrt+0x5a>
 800ce0a:	462a      	mov	r2, r5
 800ce0c:	e7fa      	b.n	800ce04 <__ieee754_sqrt+0x64>
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	3001      	adds	r0, #1
 800ce12:	02dc      	lsls	r4, r3, #11
 800ce14:	d5fb      	bpl.n	800ce0e <__ieee754_sqrt+0x6e>
 800ce16:	1e44      	subs	r4, r0, #1
 800ce18:	1b12      	subs	r2, r2, r4
 800ce1a:	f1c0 0420 	rsb	r4, r0, #32
 800ce1e:	fa21 f404 	lsr.w	r4, r1, r4
 800ce22:	4323      	orrs	r3, r4
 800ce24:	4081      	lsls	r1, r0
 800ce26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ce2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce32:	07d2      	lsls	r2, r2, #31
 800ce34:	bf5c      	itt	pl
 800ce36:	005b      	lslpl	r3, r3, #1
 800ce38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ce3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce40:	bf58      	it	pl
 800ce42:	0049      	lslpl	r1, r1, #1
 800ce44:	2600      	movs	r6, #0
 800ce46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ce4a:	106d      	asrs	r5, r5, #1
 800ce4c:	0049      	lsls	r1, r1, #1
 800ce4e:	2016      	movs	r0, #22
 800ce50:	4632      	mov	r2, r6
 800ce52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce56:	1917      	adds	r7, r2, r4
 800ce58:	429f      	cmp	r7, r3
 800ce5a:	bfde      	ittt	le
 800ce5c:	193a      	addle	r2, r7, r4
 800ce5e:	1bdb      	suble	r3, r3, r7
 800ce60:	1936      	addle	r6, r6, r4
 800ce62:	0fcf      	lsrs	r7, r1, #31
 800ce64:	3801      	subs	r0, #1
 800ce66:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ce6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce72:	d1f0      	bne.n	800ce56 <__ieee754_sqrt+0xb6>
 800ce74:	4604      	mov	r4, r0
 800ce76:	2720      	movs	r7, #32
 800ce78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	eb00 0e0c 	add.w	lr, r0, ip
 800ce82:	db02      	blt.n	800ce8a <__ieee754_sqrt+0xea>
 800ce84:	d113      	bne.n	800ceae <__ieee754_sqrt+0x10e>
 800ce86:	458e      	cmp	lr, r1
 800ce88:	d811      	bhi.n	800ceae <__ieee754_sqrt+0x10e>
 800ce8a:	f1be 0f00 	cmp.w	lr, #0
 800ce8e:	eb0e 000c 	add.w	r0, lr, ip
 800ce92:	da42      	bge.n	800cf1a <__ieee754_sqrt+0x17a>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	db40      	blt.n	800cf1a <__ieee754_sqrt+0x17a>
 800ce98:	f102 0801 	add.w	r8, r2, #1
 800ce9c:	1a9b      	subs	r3, r3, r2
 800ce9e:	458e      	cmp	lr, r1
 800cea0:	bf88      	it	hi
 800cea2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cea6:	eba1 010e 	sub.w	r1, r1, lr
 800ceaa:	4464      	add	r4, ip
 800ceac:	4642      	mov	r2, r8
 800ceae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ceb2:	3f01      	subs	r7, #1
 800ceb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ceb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cebc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cec0:	d1dc      	bne.n	800ce7c <__ieee754_sqrt+0xdc>
 800cec2:	4319      	orrs	r1, r3
 800cec4:	d01b      	beq.n	800cefe <__ieee754_sqrt+0x15e>
 800cec6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cf4c <__ieee754_sqrt+0x1ac>
 800ceca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cf50 <__ieee754_sqrt+0x1b0>
 800cece:	e9da 0100 	ldrd	r0, r1, [sl]
 800ced2:	e9db 2300 	ldrd	r2, r3, [fp]
 800ced6:	f7f3 f9d7 	bl	8000288 <__aeabi_dsub>
 800ceda:	e9da 8900 	ldrd	r8, r9, [sl]
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4640      	mov	r0, r8
 800cee4:	4649      	mov	r1, r9
 800cee6:	f7f3 fe03 	bl	8000af0 <__aeabi_dcmple>
 800ceea:	b140      	cbz	r0, 800cefe <__ieee754_sqrt+0x15e>
 800ceec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cef0:	e9da 0100 	ldrd	r0, r1, [sl]
 800cef4:	e9db 2300 	ldrd	r2, r3, [fp]
 800cef8:	d111      	bne.n	800cf1e <__ieee754_sqrt+0x17e>
 800cefa:	3601      	adds	r6, #1
 800cefc:	463c      	mov	r4, r7
 800cefe:	1072      	asrs	r2, r6, #1
 800cf00:	0863      	lsrs	r3, r4, #1
 800cf02:	07f1      	lsls	r1, r6, #31
 800cf04:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cf08:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cf0c:	bf48      	it	mi
 800cf0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cf12:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cf16:	4618      	mov	r0, r3
 800cf18:	e756      	b.n	800cdc8 <__ieee754_sqrt+0x28>
 800cf1a:	4690      	mov	r8, r2
 800cf1c:	e7be      	b.n	800ce9c <__ieee754_sqrt+0xfc>
 800cf1e:	f7f3 f9b5 	bl	800028c <__adddf3>
 800cf22:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	f7f3 fdd5 	bl	8000adc <__aeabi_dcmplt>
 800cf32:	b120      	cbz	r0, 800cf3e <__ieee754_sqrt+0x19e>
 800cf34:	1ca0      	adds	r0, r4, #2
 800cf36:	bf08      	it	eq
 800cf38:	3601      	addeq	r6, #1
 800cf3a:	3402      	adds	r4, #2
 800cf3c:	e7df      	b.n	800cefe <__ieee754_sqrt+0x15e>
 800cf3e:	1c63      	adds	r3, r4, #1
 800cf40:	f023 0401 	bic.w	r4, r3, #1
 800cf44:	e7db      	b.n	800cefe <__ieee754_sqrt+0x15e>
 800cf46:	bf00      	nop
 800cf48:	7ff00000 	.word	0x7ff00000
 800cf4c:	20000028 	.word	0x20000028
 800cf50:	20000020 	.word	0x20000020
 800cf54:	00000000 	.word	0x00000000

0800cf58 <__ieee754_atan2>:
 800cf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf5c:	ec57 6b11 	vmov	r6, r7, d1
 800cf60:	4273      	negs	r3, r6
 800cf62:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d0e0 <__ieee754_atan2+0x188>
 800cf66:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800cf6a:	4333      	orrs	r3, r6
 800cf6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cf70:	4543      	cmp	r3, r8
 800cf72:	ec51 0b10 	vmov	r0, r1, d0
 800cf76:	4635      	mov	r5, r6
 800cf78:	d809      	bhi.n	800cf8e <__ieee754_atan2+0x36>
 800cf7a:	4244      	negs	r4, r0
 800cf7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cf80:	4304      	orrs	r4, r0
 800cf82:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cf86:	4544      	cmp	r4, r8
 800cf88:	468e      	mov	lr, r1
 800cf8a:	4681      	mov	r9, r0
 800cf8c:	d907      	bls.n	800cf9e <__ieee754_atan2+0x46>
 800cf8e:	4632      	mov	r2, r6
 800cf90:	463b      	mov	r3, r7
 800cf92:	f7f3 f97b 	bl	800028c <__adddf3>
 800cf96:	ec41 0b10 	vmov	d0, r0, r1
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800cfa2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800cfa6:	4334      	orrs	r4, r6
 800cfa8:	d103      	bne.n	800cfb2 <__ieee754_atan2+0x5a>
 800cfaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfae:	f000 b89b 	b.w	800d0e8 <atan>
 800cfb2:	17bc      	asrs	r4, r7, #30
 800cfb4:	f004 0402 	and.w	r4, r4, #2
 800cfb8:	ea53 0909 	orrs.w	r9, r3, r9
 800cfbc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cfc0:	d107      	bne.n	800cfd2 <__ieee754_atan2+0x7a>
 800cfc2:	2c02      	cmp	r4, #2
 800cfc4:	d05f      	beq.n	800d086 <__ieee754_atan2+0x12e>
 800cfc6:	2c03      	cmp	r4, #3
 800cfc8:	d1e5      	bne.n	800cf96 <__ieee754_atan2+0x3e>
 800cfca:	a141      	add	r1, pc, #260	@ (adr r1, 800d0d0 <__ieee754_atan2+0x178>)
 800cfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfd0:	e7e1      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800cfd2:	4315      	orrs	r5, r2
 800cfd4:	d106      	bne.n	800cfe4 <__ieee754_atan2+0x8c>
 800cfd6:	f1be 0f00 	cmp.w	lr, #0
 800cfda:	da5f      	bge.n	800d09c <__ieee754_atan2+0x144>
 800cfdc:	a13e      	add	r1, pc, #248	@ (adr r1, 800d0d8 <__ieee754_atan2+0x180>)
 800cfde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfe2:	e7d8      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800cfe4:	4542      	cmp	r2, r8
 800cfe6:	d10f      	bne.n	800d008 <__ieee754_atan2+0xb0>
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	f104 34ff 	add.w	r4, r4, #4294967295
 800cfee:	d107      	bne.n	800d000 <__ieee754_atan2+0xa8>
 800cff0:	2c02      	cmp	r4, #2
 800cff2:	d84c      	bhi.n	800d08e <__ieee754_atan2+0x136>
 800cff4:	4b34      	ldr	r3, [pc, #208]	@ (800d0c8 <__ieee754_atan2+0x170>)
 800cff6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cffe:	e7ca      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d000:	2c02      	cmp	r4, #2
 800d002:	d848      	bhi.n	800d096 <__ieee754_atan2+0x13e>
 800d004:	4b31      	ldr	r3, [pc, #196]	@ (800d0cc <__ieee754_atan2+0x174>)
 800d006:	e7f6      	b.n	800cff6 <__ieee754_atan2+0x9e>
 800d008:	4543      	cmp	r3, r8
 800d00a:	d0e4      	beq.n	800cfd6 <__ieee754_atan2+0x7e>
 800d00c:	1a9b      	subs	r3, r3, r2
 800d00e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d012:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d016:	da1e      	bge.n	800d056 <__ieee754_atan2+0xfe>
 800d018:	2f00      	cmp	r7, #0
 800d01a:	da01      	bge.n	800d020 <__ieee754_atan2+0xc8>
 800d01c:	323c      	adds	r2, #60	@ 0x3c
 800d01e:	db1e      	blt.n	800d05e <__ieee754_atan2+0x106>
 800d020:	4632      	mov	r2, r6
 800d022:	463b      	mov	r3, r7
 800d024:	f7f3 fc12 	bl	800084c <__aeabi_ddiv>
 800d028:	ec41 0b10 	vmov	d0, r0, r1
 800d02c:	f000 f9f4 	bl	800d418 <fabs>
 800d030:	f000 f85a 	bl	800d0e8 <atan>
 800d034:	ec51 0b10 	vmov	r0, r1, d0
 800d038:	2c01      	cmp	r4, #1
 800d03a:	d013      	beq.n	800d064 <__ieee754_atan2+0x10c>
 800d03c:	2c02      	cmp	r4, #2
 800d03e:	d015      	beq.n	800d06c <__ieee754_atan2+0x114>
 800d040:	2c00      	cmp	r4, #0
 800d042:	d0a8      	beq.n	800cf96 <__ieee754_atan2+0x3e>
 800d044:	a318      	add	r3, pc, #96	@ (adr r3, 800d0a8 <__ieee754_atan2+0x150>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	f7f3 f91d 	bl	8000288 <__aeabi_dsub>
 800d04e:	a318      	add	r3, pc, #96	@ (adr r3, 800d0b0 <__ieee754_atan2+0x158>)
 800d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d054:	e014      	b.n	800d080 <__ieee754_atan2+0x128>
 800d056:	a118      	add	r1, pc, #96	@ (adr r1, 800d0b8 <__ieee754_atan2+0x160>)
 800d058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d05c:	e7ec      	b.n	800d038 <__ieee754_atan2+0xe0>
 800d05e:	2000      	movs	r0, #0
 800d060:	2100      	movs	r1, #0
 800d062:	e7e9      	b.n	800d038 <__ieee754_atan2+0xe0>
 800d064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d068:	4619      	mov	r1, r3
 800d06a:	e794      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d06c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d0a8 <__ieee754_atan2+0x150>)
 800d06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d072:	f7f3 f909 	bl	8000288 <__aeabi_dsub>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	a10d      	add	r1, pc, #52	@ (adr r1, 800d0b0 <__ieee754_atan2+0x158>)
 800d07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d080:	f7f3 f902 	bl	8000288 <__aeabi_dsub>
 800d084:	e787      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d086:	a10a      	add	r1, pc, #40	@ (adr r1, 800d0b0 <__ieee754_atan2+0x158>)
 800d088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d08c:	e783      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d08e:	a10c      	add	r1, pc, #48	@ (adr r1, 800d0c0 <__ieee754_atan2+0x168>)
 800d090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d094:	e77f      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d096:	2000      	movs	r0, #0
 800d098:	2100      	movs	r1, #0
 800d09a:	e77c      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d09c:	a106      	add	r1, pc, #24	@ (adr r1, 800d0b8 <__ieee754_atan2+0x160>)
 800d09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a2:	e778      	b.n	800cf96 <__ieee754_atan2+0x3e>
 800d0a4:	f3af 8000 	nop.w
 800d0a8:	33145c07 	.word	0x33145c07
 800d0ac:	3ca1a626 	.word	0x3ca1a626
 800d0b0:	54442d18 	.word	0x54442d18
 800d0b4:	400921fb 	.word	0x400921fb
 800d0b8:	54442d18 	.word	0x54442d18
 800d0bc:	3ff921fb 	.word	0x3ff921fb
 800d0c0:	54442d18 	.word	0x54442d18
 800d0c4:	3fe921fb 	.word	0x3fe921fb
 800d0c8:	0800f0d0 	.word	0x0800f0d0
 800d0cc:	0800f0b8 	.word	0x0800f0b8
 800d0d0:	54442d18 	.word	0x54442d18
 800d0d4:	c00921fb 	.word	0xc00921fb
 800d0d8:	54442d18 	.word	0x54442d18
 800d0dc:	bff921fb 	.word	0xbff921fb
 800d0e0:	7ff00000 	.word	0x7ff00000
 800d0e4:	00000000 	.word	0x00000000

0800d0e8 <atan>:
 800d0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ec:	ec55 4b10 	vmov	r4, r5, d0
 800d0f0:	4bbf      	ldr	r3, [pc, #764]	@ (800d3f0 <atan+0x308>)
 800d0f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d0f6:	429e      	cmp	r6, r3
 800d0f8:	46ab      	mov	fp, r5
 800d0fa:	d918      	bls.n	800d12e <atan+0x46>
 800d0fc:	4bbd      	ldr	r3, [pc, #756]	@ (800d3f4 <atan+0x30c>)
 800d0fe:	429e      	cmp	r6, r3
 800d100:	d801      	bhi.n	800d106 <atan+0x1e>
 800d102:	d109      	bne.n	800d118 <atan+0x30>
 800d104:	b144      	cbz	r4, 800d118 <atan+0x30>
 800d106:	4622      	mov	r2, r4
 800d108:	462b      	mov	r3, r5
 800d10a:	4620      	mov	r0, r4
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7f3 f8bd 	bl	800028c <__adddf3>
 800d112:	4604      	mov	r4, r0
 800d114:	460d      	mov	r5, r1
 800d116:	e006      	b.n	800d126 <atan+0x3e>
 800d118:	f1bb 0f00 	cmp.w	fp, #0
 800d11c:	f340 812b 	ble.w	800d376 <atan+0x28e>
 800d120:	a597      	add	r5, pc, #604	@ (adr r5, 800d380 <atan+0x298>)
 800d122:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d126:	ec45 4b10 	vmov	d0, r4, r5
 800d12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12e:	4bb2      	ldr	r3, [pc, #712]	@ (800d3f8 <atan+0x310>)
 800d130:	429e      	cmp	r6, r3
 800d132:	d813      	bhi.n	800d15c <atan+0x74>
 800d134:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d138:	429e      	cmp	r6, r3
 800d13a:	d80c      	bhi.n	800d156 <atan+0x6e>
 800d13c:	a392      	add	r3, pc, #584	@ (adr r3, 800d388 <atan+0x2a0>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	4620      	mov	r0, r4
 800d144:	4629      	mov	r1, r5
 800d146:	f7f3 f8a1 	bl	800028c <__adddf3>
 800d14a:	4bac      	ldr	r3, [pc, #688]	@ (800d3fc <atan+0x314>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	f7f3 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 800d152:	2800      	cmp	r0, #0
 800d154:	d1e7      	bne.n	800d126 <atan+0x3e>
 800d156:	f04f 3aff 	mov.w	sl, #4294967295
 800d15a:	e029      	b.n	800d1b0 <atan+0xc8>
 800d15c:	f000 f95c 	bl	800d418 <fabs>
 800d160:	4ba7      	ldr	r3, [pc, #668]	@ (800d400 <atan+0x318>)
 800d162:	429e      	cmp	r6, r3
 800d164:	ec55 4b10 	vmov	r4, r5, d0
 800d168:	f200 80bc 	bhi.w	800d2e4 <atan+0x1fc>
 800d16c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d170:	429e      	cmp	r6, r3
 800d172:	f200 809e 	bhi.w	800d2b2 <atan+0x1ca>
 800d176:	4622      	mov	r2, r4
 800d178:	462b      	mov	r3, r5
 800d17a:	4620      	mov	r0, r4
 800d17c:	4629      	mov	r1, r5
 800d17e:	f7f3 f885 	bl	800028c <__adddf3>
 800d182:	4b9e      	ldr	r3, [pc, #632]	@ (800d3fc <atan+0x314>)
 800d184:	2200      	movs	r2, #0
 800d186:	f7f3 f87f 	bl	8000288 <__aeabi_dsub>
 800d18a:	2200      	movs	r2, #0
 800d18c:	4606      	mov	r6, r0
 800d18e:	460f      	mov	r7, r1
 800d190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d194:	4620      	mov	r0, r4
 800d196:	4629      	mov	r1, r5
 800d198:	f7f3 f878 	bl	800028c <__adddf3>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	f7f3 fb52 	bl	800084c <__aeabi_ddiv>
 800d1a8:	f04f 0a00 	mov.w	sl, #0
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	f7f3 fa1e 	bl	80005f8 <__aeabi_dmul>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4680      	mov	r8, r0
 800d1c2:	4689      	mov	r9, r1
 800d1c4:	f7f3 fa18 	bl	80005f8 <__aeabi_dmul>
 800d1c8:	a371      	add	r3, pc, #452	@ (adr r3, 800d390 <atan+0x2a8>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	460f      	mov	r7, r1
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	a370      	add	r3, pc, #448	@ (adr r3, 800d398 <atan+0x2b0>)
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	f7f3 f856 	bl	800028c <__adddf3>
 800d1e0:	4632      	mov	r2, r6
 800d1e2:	463b      	mov	r3, r7
 800d1e4:	f7f3 fa08 	bl	80005f8 <__aeabi_dmul>
 800d1e8:	a36d      	add	r3, pc, #436	@ (adr r3, 800d3a0 <atan+0x2b8>)
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	f7f3 f84d 	bl	800028c <__adddf3>
 800d1f2:	4632      	mov	r2, r6
 800d1f4:	463b      	mov	r3, r7
 800d1f6:	f7f3 f9ff 	bl	80005f8 <__aeabi_dmul>
 800d1fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800d3a8 <atan+0x2c0>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	f7f3 f844 	bl	800028c <__adddf3>
 800d204:	4632      	mov	r2, r6
 800d206:	463b      	mov	r3, r7
 800d208:	f7f3 f9f6 	bl	80005f8 <__aeabi_dmul>
 800d20c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3b0 <atan+0x2c8>)
 800d20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d212:	f7f3 f83b 	bl	800028c <__adddf3>
 800d216:	4632      	mov	r2, r6
 800d218:	463b      	mov	r3, r7
 800d21a:	f7f3 f9ed 	bl	80005f8 <__aeabi_dmul>
 800d21e:	a366      	add	r3, pc, #408	@ (adr r3, 800d3b8 <atan+0x2d0>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f7f3 f832 	bl	800028c <__adddf3>
 800d228:	4642      	mov	r2, r8
 800d22a:	464b      	mov	r3, r9
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	a363      	add	r3, pc, #396	@ (adr r3, 800d3c0 <atan+0x2d8>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	4680      	mov	r8, r0
 800d238:	4689      	mov	r9, r1
 800d23a:	4630      	mov	r0, r6
 800d23c:	4639      	mov	r1, r7
 800d23e:	f7f3 f9db 	bl	80005f8 <__aeabi_dmul>
 800d242:	a361      	add	r3, pc, #388	@ (adr r3, 800d3c8 <atan+0x2e0>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f81e 	bl	8000288 <__aeabi_dsub>
 800d24c:	4632      	mov	r2, r6
 800d24e:	463b      	mov	r3, r7
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	a35e      	add	r3, pc, #376	@ (adr r3, 800d3d0 <atan+0x2e8>)
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f7f3 f815 	bl	8000288 <__aeabi_dsub>
 800d25e:	4632      	mov	r2, r6
 800d260:	463b      	mov	r3, r7
 800d262:	f7f3 f9c9 	bl	80005f8 <__aeabi_dmul>
 800d266:	a35c      	add	r3, pc, #368	@ (adr r3, 800d3d8 <atan+0x2f0>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f80c 	bl	8000288 <__aeabi_dsub>
 800d270:	4632      	mov	r2, r6
 800d272:	463b      	mov	r3, r7
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	a359      	add	r3, pc, #356	@ (adr r3, 800d3e0 <atan+0x2f8>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f803 	bl	8000288 <__aeabi_dsub>
 800d282:	4632      	mov	r2, r6
 800d284:	463b      	mov	r3, r7
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	4640      	mov	r0, r8
 800d290:	4649      	mov	r1, r9
 800d292:	f7f2 fffb 	bl	800028c <__adddf3>
 800d296:	4622      	mov	r2, r4
 800d298:	462b      	mov	r3, r5
 800d29a:	f7f3 f9ad 	bl	80005f8 <__aeabi_dmul>
 800d29e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	d148      	bne.n	800d33a <atan+0x252>
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7f2 ffec 	bl	8000288 <__aeabi_dsub>
 800d2b0:	e72f      	b.n	800d112 <atan+0x2a>
 800d2b2:	4b52      	ldr	r3, [pc, #328]	@ (800d3fc <atan+0x314>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	f7f2 ffe5 	bl	8000288 <__aeabi_dsub>
 800d2be:	4b4f      	ldr	r3, [pc, #316]	@ (800d3fc <atan+0x314>)
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	460f      	mov	r7, r1
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	f7f2 ffdf 	bl	800028c <__adddf3>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7f3 fab9 	bl	800084c <__aeabi_ddiv>
 800d2da:	f04f 0a01 	mov.w	sl, #1
 800d2de:	4604      	mov	r4, r0
 800d2e0:	460d      	mov	r5, r1
 800d2e2:	e765      	b.n	800d1b0 <atan+0xc8>
 800d2e4:	4b47      	ldr	r3, [pc, #284]	@ (800d404 <atan+0x31c>)
 800d2e6:	429e      	cmp	r6, r3
 800d2e8:	d21c      	bcs.n	800d324 <atan+0x23c>
 800d2ea:	4b47      	ldr	r3, [pc, #284]	@ (800d408 <atan+0x320>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7f2 ffc9 	bl	8000288 <__aeabi_dsub>
 800d2f6:	4b44      	ldr	r3, [pc, #272]	@ (800d408 <atan+0x320>)
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4620      	mov	r0, r4
 800d300:	4629      	mov	r1, r5
 800d302:	f7f3 f979 	bl	80005f8 <__aeabi_dmul>
 800d306:	4b3d      	ldr	r3, [pc, #244]	@ (800d3fc <atan+0x314>)
 800d308:	2200      	movs	r2, #0
 800d30a:	f7f2 ffbf 	bl	800028c <__adddf3>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	4630      	mov	r0, r6
 800d314:	4639      	mov	r1, r7
 800d316:	f7f3 fa99 	bl	800084c <__aeabi_ddiv>
 800d31a:	f04f 0a02 	mov.w	sl, #2
 800d31e:	4604      	mov	r4, r0
 800d320:	460d      	mov	r5, r1
 800d322:	e745      	b.n	800d1b0 <atan+0xc8>
 800d324:	4622      	mov	r2, r4
 800d326:	462b      	mov	r3, r5
 800d328:	4938      	ldr	r1, [pc, #224]	@ (800d40c <atan+0x324>)
 800d32a:	2000      	movs	r0, #0
 800d32c:	f7f3 fa8e 	bl	800084c <__aeabi_ddiv>
 800d330:	f04f 0a03 	mov.w	sl, #3
 800d334:	4604      	mov	r4, r0
 800d336:	460d      	mov	r5, r1
 800d338:	e73a      	b.n	800d1b0 <atan+0xc8>
 800d33a:	4b35      	ldr	r3, [pc, #212]	@ (800d410 <atan+0x328>)
 800d33c:	4e35      	ldr	r6, [pc, #212]	@ (800d414 <atan+0x32c>)
 800d33e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	f7f2 ff9f 	bl	8000288 <__aeabi_dsub>
 800d34a:	4622      	mov	r2, r4
 800d34c:	462b      	mov	r3, r5
 800d34e:	f7f2 ff9b 	bl	8000288 <__aeabi_dsub>
 800d352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d35e:	f7f2 ff93 	bl	8000288 <__aeabi_dsub>
 800d362:	f1bb 0f00 	cmp.w	fp, #0
 800d366:	4604      	mov	r4, r0
 800d368:	460d      	mov	r5, r1
 800d36a:	f6bf aedc 	bge.w	800d126 <atan+0x3e>
 800d36e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d372:	461d      	mov	r5, r3
 800d374:	e6d7      	b.n	800d126 <atan+0x3e>
 800d376:	a51c      	add	r5, pc, #112	@ (adr r5, 800d3e8 <atan+0x300>)
 800d378:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d37c:	e6d3      	b.n	800d126 <atan+0x3e>
 800d37e:	bf00      	nop
 800d380:	54442d18 	.word	0x54442d18
 800d384:	3ff921fb 	.word	0x3ff921fb
 800d388:	8800759c 	.word	0x8800759c
 800d38c:	7e37e43c 	.word	0x7e37e43c
 800d390:	e322da11 	.word	0xe322da11
 800d394:	3f90ad3a 	.word	0x3f90ad3a
 800d398:	24760deb 	.word	0x24760deb
 800d39c:	3fa97b4b 	.word	0x3fa97b4b
 800d3a0:	a0d03d51 	.word	0xa0d03d51
 800d3a4:	3fb10d66 	.word	0x3fb10d66
 800d3a8:	c54c206e 	.word	0xc54c206e
 800d3ac:	3fb745cd 	.word	0x3fb745cd
 800d3b0:	920083ff 	.word	0x920083ff
 800d3b4:	3fc24924 	.word	0x3fc24924
 800d3b8:	5555550d 	.word	0x5555550d
 800d3bc:	3fd55555 	.word	0x3fd55555
 800d3c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d3c4:	bfa2b444 	.word	0xbfa2b444
 800d3c8:	52defd9a 	.word	0x52defd9a
 800d3cc:	3fadde2d 	.word	0x3fadde2d
 800d3d0:	af749a6d 	.word	0xaf749a6d
 800d3d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d3d8:	fe231671 	.word	0xfe231671
 800d3dc:	3fbc71c6 	.word	0x3fbc71c6
 800d3e0:	9998ebc4 	.word	0x9998ebc4
 800d3e4:	3fc99999 	.word	0x3fc99999
 800d3e8:	54442d18 	.word	0x54442d18
 800d3ec:	bff921fb 	.word	0xbff921fb
 800d3f0:	440fffff 	.word	0x440fffff
 800d3f4:	7ff00000 	.word	0x7ff00000
 800d3f8:	3fdbffff 	.word	0x3fdbffff
 800d3fc:	3ff00000 	.word	0x3ff00000
 800d400:	3ff2ffff 	.word	0x3ff2ffff
 800d404:	40038000 	.word	0x40038000
 800d408:	3ff80000 	.word	0x3ff80000
 800d40c:	bff00000 	.word	0xbff00000
 800d410:	0800f0e8 	.word	0x0800f0e8
 800d414:	0800f108 	.word	0x0800f108

0800d418 <fabs>:
 800d418:	ec51 0b10 	vmov	r0, r1, d0
 800d41c:	4602      	mov	r2, r0
 800d41e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d422:	ec43 2b10 	vmov	d0, r2, r3
 800d426:	4770      	bx	lr

0800d428 <sniprintf>:
 800d428:	b40c      	push	{r2, r3}
 800d42a:	b530      	push	{r4, r5, lr}
 800d42c:	4b17      	ldr	r3, [pc, #92]	@ (800d48c <sniprintf+0x64>)
 800d42e:	1e0c      	subs	r4, r1, #0
 800d430:	681d      	ldr	r5, [r3, #0]
 800d432:	b09d      	sub	sp, #116	@ 0x74
 800d434:	da08      	bge.n	800d448 <sniprintf+0x20>
 800d436:	238b      	movs	r3, #139	@ 0x8b
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	f04f 30ff 	mov.w	r0, #4294967295
 800d43e:	b01d      	add	sp, #116	@ 0x74
 800d440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d444:	b002      	add	sp, #8
 800d446:	4770      	bx	lr
 800d448:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d44c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d450:	bf14      	ite	ne
 800d452:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d456:	4623      	moveq	r3, r4
 800d458:	9304      	str	r3, [sp, #16]
 800d45a:	9307      	str	r3, [sp, #28]
 800d45c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d460:	9002      	str	r0, [sp, #8]
 800d462:	9006      	str	r0, [sp, #24]
 800d464:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d468:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d46a:	ab21      	add	r3, sp, #132	@ 0x84
 800d46c:	a902      	add	r1, sp, #8
 800d46e:	4628      	mov	r0, r5
 800d470:	9301      	str	r3, [sp, #4]
 800d472:	f000 f9d5 	bl	800d820 <_svfiprintf_r>
 800d476:	1c43      	adds	r3, r0, #1
 800d478:	bfbc      	itt	lt
 800d47a:	238b      	movlt	r3, #139	@ 0x8b
 800d47c:	602b      	strlt	r3, [r5, #0]
 800d47e:	2c00      	cmp	r4, #0
 800d480:	d0dd      	beq.n	800d43e <sniprintf+0x16>
 800d482:	9b02      	ldr	r3, [sp, #8]
 800d484:	2200      	movs	r2, #0
 800d486:	701a      	strb	r2, [r3, #0]
 800d488:	e7d9      	b.n	800d43e <sniprintf+0x16>
 800d48a:	bf00      	nop
 800d48c:	20000030 	.word	0x20000030

0800d490 <siprintf>:
 800d490:	b40e      	push	{r1, r2, r3}
 800d492:	b500      	push	{lr}
 800d494:	b09c      	sub	sp, #112	@ 0x70
 800d496:	ab1d      	add	r3, sp, #116	@ 0x74
 800d498:	9002      	str	r0, [sp, #8]
 800d49a:	9006      	str	r0, [sp, #24]
 800d49c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d4a0:	4809      	ldr	r0, [pc, #36]	@ (800d4c8 <siprintf+0x38>)
 800d4a2:	9107      	str	r1, [sp, #28]
 800d4a4:	9104      	str	r1, [sp, #16]
 800d4a6:	4909      	ldr	r1, [pc, #36]	@ (800d4cc <siprintf+0x3c>)
 800d4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ac:	9105      	str	r1, [sp, #20]
 800d4ae:	6800      	ldr	r0, [r0, #0]
 800d4b0:	9301      	str	r3, [sp, #4]
 800d4b2:	a902      	add	r1, sp, #8
 800d4b4:	f000 f9b4 	bl	800d820 <_svfiprintf_r>
 800d4b8:	9b02      	ldr	r3, [sp, #8]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]
 800d4be:	b01c      	add	sp, #112	@ 0x70
 800d4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4c4:	b003      	add	sp, #12
 800d4c6:	4770      	bx	lr
 800d4c8:	20000030 	.word	0x20000030
 800d4cc:	ffff0208 	.word	0xffff0208

0800d4d0 <memset>:
 800d4d0:	4402      	add	r2, r0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d100      	bne.n	800d4da <memset+0xa>
 800d4d8:	4770      	bx	lr
 800d4da:	f803 1b01 	strb.w	r1, [r3], #1
 800d4de:	e7f9      	b.n	800d4d4 <memset+0x4>

0800d4e0 <strncmp>:
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	b16a      	cbz	r2, 800d500 <strncmp+0x20>
 800d4e4:	3901      	subs	r1, #1
 800d4e6:	1884      	adds	r4, r0, r2
 800d4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d103      	bne.n	800d4fc <strncmp+0x1c>
 800d4f4:	42a0      	cmp	r0, r4
 800d4f6:	d001      	beq.n	800d4fc <strncmp+0x1c>
 800d4f8:	2a00      	cmp	r2, #0
 800d4fa:	d1f5      	bne.n	800d4e8 <strncmp+0x8>
 800d4fc:	1ad0      	subs	r0, r2, r3
 800d4fe:	bd10      	pop	{r4, pc}
 800d500:	4610      	mov	r0, r2
 800d502:	e7fc      	b.n	800d4fe <strncmp+0x1e>

0800d504 <__errno>:
 800d504:	4b01      	ldr	r3, [pc, #4]	@ (800d50c <__errno+0x8>)
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	20000030 	.word	0x20000030

0800d510 <__libc_init_array>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	4d0d      	ldr	r5, [pc, #52]	@ (800d548 <__libc_init_array+0x38>)
 800d514:	4c0d      	ldr	r4, [pc, #52]	@ (800d54c <__libc_init_array+0x3c>)
 800d516:	1b64      	subs	r4, r4, r5
 800d518:	10a4      	asrs	r4, r4, #2
 800d51a:	2600      	movs	r6, #0
 800d51c:	42a6      	cmp	r6, r4
 800d51e:	d109      	bne.n	800d534 <__libc_init_array+0x24>
 800d520:	4d0b      	ldr	r5, [pc, #44]	@ (800d550 <__libc_init_array+0x40>)
 800d522:	4c0c      	ldr	r4, [pc, #48]	@ (800d554 <__libc_init_array+0x44>)
 800d524:	f000 fc66 	bl	800ddf4 <_init>
 800d528:	1b64      	subs	r4, r4, r5
 800d52a:	10a4      	asrs	r4, r4, #2
 800d52c:	2600      	movs	r6, #0
 800d52e:	42a6      	cmp	r6, r4
 800d530:	d105      	bne.n	800d53e <__libc_init_array+0x2e>
 800d532:	bd70      	pop	{r4, r5, r6, pc}
 800d534:	f855 3b04 	ldr.w	r3, [r5], #4
 800d538:	4798      	blx	r3
 800d53a:	3601      	adds	r6, #1
 800d53c:	e7ee      	b.n	800d51c <__libc_init_array+0xc>
 800d53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d542:	4798      	blx	r3
 800d544:	3601      	adds	r6, #1
 800d546:	e7f2      	b.n	800d52e <__libc_init_array+0x1e>
 800d548:	0800f164 	.word	0x0800f164
 800d54c:	0800f164 	.word	0x0800f164
 800d550:	0800f164 	.word	0x0800f164
 800d554:	0800f168 	.word	0x0800f168

0800d558 <__retarget_lock_acquire_recursive>:
 800d558:	4770      	bx	lr

0800d55a <__retarget_lock_release_recursive>:
 800d55a:	4770      	bx	lr

0800d55c <memcpy>:
 800d55c:	440a      	add	r2, r1
 800d55e:	4291      	cmp	r1, r2
 800d560:	f100 33ff 	add.w	r3, r0, #4294967295
 800d564:	d100      	bne.n	800d568 <memcpy+0xc>
 800d566:	4770      	bx	lr
 800d568:	b510      	push	{r4, lr}
 800d56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d572:	4291      	cmp	r1, r2
 800d574:	d1f9      	bne.n	800d56a <memcpy+0xe>
 800d576:	bd10      	pop	{r4, pc}

0800d578 <_free_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4605      	mov	r5, r0
 800d57c:	2900      	cmp	r1, #0
 800d57e:	d041      	beq.n	800d604 <_free_r+0x8c>
 800d580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d584:	1f0c      	subs	r4, r1, #4
 800d586:	2b00      	cmp	r3, #0
 800d588:	bfb8      	it	lt
 800d58a:	18e4      	addlt	r4, r4, r3
 800d58c:	f000 f8e0 	bl	800d750 <__malloc_lock>
 800d590:	4a1d      	ldr	r2, [pc, #116]	@ (800d608 <_free_r+0x90>)
 800d592:	6813      	ldr	r3, [r2, #0]
 800d594:	b933      	cbnz	r3, 800d5a4 <_free_r+0x2c>
 800d596:	6063      	str	r3, [r4, #4]
 800d598:	6014      	str	r4, [r2, #0]
 800d59a:	4628      	mov	r0, r5
 800d59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a0:	f000 b8dc 	b.w	800d75c <__malloc_unlock>
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	d908      	bls.n	800d5ba <_free_r+0x42>
 800d5a8:	6820      	ldr	r0, [r4, #0]
 800d5aa:	1821      	adds	r1, r4, r0
 800d5ac:	428b      	cmp	r3, r1
 800d5ae:	bf01      	itttt	eq
 800d5b0:	6819      	ldreq	r1, [r3, #0]
 800d5b2:	685b      	ldreq	r3, [r3, #4]
 800d5b4:	1809      	addeq	r1, r1, r0
 800d5b6:	6021      	streq	r1, [r4, #0]
 800d5b8:	e7ed      	b.n	800d596 <_free_r+0x1e>
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	b10b      	cbz	r3, 800d5c4 <_free_r+0x4c>
 800d5c0:	42a3      	cmp	r3, r4
 800d5c2:	d9fa      	bls.n	800d5ba <_free_r+0x42>
 800d5c4:	6811      	ldr	r1, [r2, #0]
 800d5c6:	1850      	adds	r0, r2, r1
 800d5c8:	42a0      	cmp	r0, r4
 800d5ca:	d10b      	bne.n	800d5e4 <_free_r+0x6c>
 800d5cc:	6820      	ldr	r0, [r4, #0]
 800d5ce:	4401      	add	r1, r0
 800d5d0:	1850      	adds	r0, r2, r1
 800d5d2:	4283      	cmp	r3, r0
 800d5d4:	6011      	str	r1, [r2, #0]
 800d5d6:	d1e0      	bne.n	800d59a <_free_r+0x22>
 800d5d8:	6818      	ldr	r0, [r3, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	6053      	str	r3, [r2, #4]
 800d5de:	4408      	add	r0, r1
 800d5e0:	6010      	str	r0, [r2, #0]
 800d5e2:	e7da      	b.n	800d59a <_free_r+0x22>
 800d5e4:	d902      	bls.n	800d5ec <_free_r+0x74>
 800d5e6:	230c      	movs	r3, #12
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	e7d6      	b.n	800d59a <_free_r+0x22>
 800d5ec:	6820      	ldr	r0, [r4, #0]
 800d5ee:	1821      	adds	r1, r4, r0
 800d5f0:	428b      	cmp	r3, r1
 800d5f2:	bf04      	itt	eq
 800d5f4:	6819      	ldreq	r1, [r3, #0]
 800d5f6:	685b      	ldreq	r3, [r3, #4]
 800d5f8:	6063      	str	r3, [r4, #4]
 800d5fa:	bf04      	itt	eq
 800d5fc:	1809      	addeq	r1, r1, r0
 800d5fe:	6021      	streq	r1, [r4, #0]
 800d600:	6054      	str	r4, [r2, #4]
 800d602:	e7ca      	b.n	800d59a <_free_r+0x22>
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	bf00      	nop
 800d608:	200024c4 	.word	0x200024c4

0800d60c <sbrk_aligned>:
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	4e0f      	ldr	r6, [pc, #60]	@ (800d64c <sbrk_aligned+0x40>)
 800d610:	460c      	mov	r4, r1
 800d612:	6831      	ldr	r1, [r6, #0]
 800d614:	4605      	mov	r5, r0
 800d616:	b911      	cbnz	r1, 800d61e <sbrk_aligned+0x12>
 800d618:	f000 fba6 	bl	800dd68 <_sbrk_r>
 800d61c:	6030      	str	r0, [r6, #0]
 800d61e:	4621      	mov	r1, r4
 800d620:	4628      	mov	r0, r5
 800d622:	f000 fba1 	bl	800dd68 <_sbrk_r>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d103      	bne.n	800d632 <sbrk_aligned+0x26>
 800d62a:	f04f 34ff 	mov.w	r4, #4294967295
 800d62e:	4620      	mov	r0, r4
 800d630:	bd70      	pop	{r4, r5, r6, pc}
 800d632:	1cc4      	adds	r4, r0, #3
 800d634:	f024 0403 	bic.w	r4, r4, #3
 800d638:	42a0      	cmp	r0, r4
 800d63a:	d0f8      	beq.n	800d62e <sbrk_aligned+0x22>
 800d63c:	1a21      	subs	r1, r4, r0
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 fb92 	bl	800dd68 <_sbrk_r>
 800d644:	3001      	adds	r0, #1
 800d646:	d1f2      	bne.n	800d62e <sbrk_aligned+0x22>
 800d648:	e7ef      	b.n	800d62a <sbrk_aligned+0x1e>
 800d64a:	bf00      	nop
 800d64c:	200024c0 	.word	0x200024c0

0800d650 <_malloc_r>:
 800d650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d654:	1ccd      	adds	r5, r1, #3
 800d656:	f025 0503 	bic.w	r5, r5, #3
 800d65a:	3508      	adds	r5, #8
 800d65c:	2d0c      	cmp	r5, #12
 800d65e:	bf38      	it	cc
 800d660:	250c      	movcc	r5, #12
 800d662:	2d00      	cmp	r5, #0
 800d664:	4606      	mov	r6, r0
 800d666:	db01      	blt.n	800d66c <_malloc_r+0x1c>
 800d668:	42a9      	cmp	r1, r5
 800d66a:	d904      	bls.n	800d676 <_malloc_r+0x26>
 800d66c:	230c      	movs	r3, #12
 800d66e:	6033      	str	r3, [r6, #0]
 800d670:	2000      	movs	r0, #0
 800d672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d74c <_malloc_r+0xfc>
 800d67a:	f000 f869 	bl	800d750 <__malloc_lock>
 800d67e:	f8d8 3000 	ldr.w	r3, [r8]
 800d682:	461c      	mov	r4, r3
 800d684:	bb44      	cbnz	r4, 800d6d8 <_malloc_r+0x88>
 800d686:	4629      	mov	r1, r5
 800d688:	4630      	mov	r0, r6
 800d68a:	f7ff ffbf 	bl	800d60c <sbrk_aligned>
 800d68e:	1c43      	adds	r3, r0, #1
 800d690:	4604      	mov	r4, r0
 800d692:	d158      	bne.n	800d746 <_malloc_r+0xf6>
 800d694:	f8d8 4000 	ldr.w	r4, [r8]
 800d698:	4627      	mov	r7, r4
 800d69a:	2f00      	cmp	r7, #0
 800d69c:	d143      	bne.n	800d726 <_malloc_r+0xd6>
 800d69e:	2c00      	cmp	r4, #0
 800d6a0:	d04b      	beq.n	800d73a <_malloc_r+0xea>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	eb04 0903 	add.w	r9, r4, r3
 800d6ac:	f000 fb5c 	bl	800dd68 <_sbrk_r>
 800d6b0:	4581      	cmp	r9, r0
 800d6b2:	d142      	bne.n	800d73a <_malloc_r+0xea>
 800d6b4:	6821      	ldr	r1, [r4, #0]
 800d6b6:	1a6d      	subs	r5, r5, r1
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7ff ffa6 	bl	800d60c <sbrk_aligned>
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	d03a      	beq.n	800d73a <_malloc_r+0xea>
 800d6c4:	6823      	ldr	r3, [r4, #0]
 800d6c6:	442b      	add	r3, r5
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ce:	685a      	ldr	r2, [r3, #4]
 800d6d0:	bb62      	cbnz	r2, 800d72c <_malloc_r+0xdc>
 800d6d2:	f8c8 7000 	str.w	r7, [r8]
 800d6d6:	e00f      	b.n	800d6f8 <_malloc_r+0xa8>
 800d6d8:	6822      	ldr	r2, [r4, #0]
 800d6da:	1b52      	subs	r2, r2, r5
 800d6dc:	d420      	bmi.n	800d720 <_malloc_r+0xd0>
 800d6de:	2a0b      	cmp	r2, #11
 800d6e0:	d917      	bls.n	800d712 <_malloc_r+0xc2>
 800d6e2:	1961      	adds	r1, r4, r5
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	6025      	str	r5, [r4, #0]
 800d6e8:	bf18      	it	ne
 800d6ea:	6059      	strne	r1, [r3, #4]
 800d6ec:	6863      	ldr	r3, [r4, #4]
 800d6ee:	bf08      	it	eq
 800d6f0:	f8c8 1000 	streq.w	r1, [r8]
 800d6f4:	5162      	str	r2, [r4, r5]
 800d6f6:	604b      	str	r3, [r1, #4]
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f000 f82f 	bl	800d75c <__malloc_unlock>
 800d6fe:	f104 000b 	add.w	r0, r4, #11
 800d702:	1d23      	adds	r3, r4, #4
 800d704:	f020 0007 	bic.w	r0, r0, #7
 800d708:	1ac2      	subs	r2, r0, r3
 800d70a:	bf1c      	itt	ne
 800d70c:	1a1b      	subne	r3, r3, r0
 800d70e:	50a3      	strne	r3, [r4, r2]
 800d710:	e7af      	b.n	800d672 <_malloc_r+0x22>
 800d712:	6862      	ldr	r2, [r4, #4]
 800d714:	42a3      	cmp	r3, r4
 800d716:	bf0c      	ite	eq
 800d718:	f8c8 2000 	streq.w	r2, [r8]
 800d71c:	605a      	strne	r2, [r3, #4]
 800d71e:	e7eb      	b.n	800d6f8 <_malloc_r+0xa8>
 800d720:	4623      	mov	r3, r4
 800d722:	6864      	ldr	r4, [r4, #4]
 800d724:	e7ae      	b.n	800d684 <_malloc_r+0x34>
 800d726:	463c      	mov	r4, r7
 800d728:	687f      	ldr	r7, [r7, #4]
 800d72a:	e7b6      	b.n	800d69a <_malloc_r+0x4a>
 800d72c:	461a      	mov	r2, r3
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	42a3      	cmp	r3, r4
 800d732:	d1fb      	bne.n	800d72c <_malloc_r+0xdc>
 800d734:	2300      	movs	r3, #0
 800d736:	6053      	str	r3, [r2, #4]
 800d738:	e7de      	b.n	800d6f8 <_malloc_r+0xa8>
 800d73a:	230c      	movs	r3, #12
 800d73c:	6033      	str	r3, [r6, #0]
 800d73e:	4630      	mov	r0, r6
 800d740:	f000 f80c 	bl	800d75c <__malloc_unlock>
 800d744:	e794      	b.n	800d670 <_malloc_r+0x20>
 800d746:	6005      	str	r5, [r0, #0]
 800d748:	e7d6      	b.n	800d6f8 <_malloc_r+0xa8>
 800d74a:	bf00      	nop
 800d74c:	200024c4 	.word	0x200024c4

0800d750 <__malloc_lock>:
 800d750:	4801      	ldr	r0, [pc, #4]	@ (800d758 <__malloc_lock+0x8>)
 800d752:	f7ff bf01 	b.w	800d558 <__retarget_lock_acquire_recursive>
 800d756:	bf00      	nop
 800d758:	200024bc 	.word	0x200024bc

0800d75c <__malloc_unlock>:
 800d75c:	4801      	ldr	r0, [pc, #4]	@ (800d764 <__malloc_unlock+0x8>)
 800d75e:	f7ff befc 	b.w	800d55a <__retarget_lock_release_recursive>
 800d762:	bf00      	nop
 800d764:	200024bc 	.word	0x200024bc

0800d768 <__ssputs_r>:
 800d768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d76c:	688e      	ldr	r6, [r1, #8]
 800d76e:	461f      	mov	r7, r3
 800d770:	42be      	cmp	r6, r7
 800d772:	680b      	ldr	r3, [r1, #0]
 800d774:	4682      	mov	sl, r0
 800d776:	460c      	mov	r4, r1
 800d778:	4690      	mov	r8, r2
 800d77a:	d82d      	bhi.n	800d7d8 <__ssputs_r+0x70>
 800d77c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d784:	d026      	beq.n	800d7d4 <__ssputs_r+0x6c>
 800d786:	6965      	ldr	r5, [r4, #20]
 800d788:	6909      	ldr	r1, [r1, #16]
 800d78a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d78e:	eba3 0901 	sub.w	r9, r3, r1
 800d792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d796:	1c7b      	adds	r3, r7, #1
 800d798:	444b      	add	r3, r9
 800d79a:	106d      	asrs	r5, r5, #1
 800d79c:	429d      	cmp	r5, r3
 800d79e:	bf38      	it	cc
 800d7a0:	461d      	movcc	r5, r3
 800d7a2:	0553      	lsls	r3, r2, #21
 800d7a4:	d527      	bpl.n	800d7f6 <__ssputs_r+0x8e>
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7ff ff52 	bl	800d650 <_malloc_r>
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	b360      	cbz	r0, 800d80a <__ssputs_r+0xa2>
 800d7b0:	6921      	ldr	r1, [r4, #16]
 800d7b2:	464a      	mov	r2, r9
 800d7b4:	f7ff fed2 	bl	800d55c <memcpy>
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c2:	81a3      	strh	r3, [r4, #12]
 800d7c4:	6126      	str	r6, [r4, #16]
 800d7c6:	6165      	str	r5, [r4, #20]
 800d7c8:	444e      	add	r6, r9
 800d7ca:	eba5 0509 	sub.w	r5, r5, r9
 800d7ce:	6026      	str	r6, [r4, #0]
 800d7d0:	60a5      	str	r5, [r4, #8]
 800d7d2:	463e      	mov	r6, r7
 800d7d4:	42be      	cmp	r6, r7
 800d7d6:	d900      	bls.n	800d7da <__ssputs_r+0x72>
 800d7d8:	463e      	mov	r6, r7
 800d7da:	6820      	ldr	r0, [r4, #0]
 800d7dc:	4632      	mov	r2, r6
 800d7de:	4641      	mov	r1, r8
 800d7e0:	f000 faa8 	bl	800dd34 <memmove>
 800d7e4:	68a3      	ldr	r3, [r4, #8]
 800d7e6:	1b9b      	subs	r3, r3, r6
 800d7e8:	60a3      	str	r3, [r4, #8]
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	4433      	add	r3, r6
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f6:	462a      	mov	r2, r5
 800d7f8:	f000 fac6 	bl	800dd88 <_realloc_r>
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d1e0      	bne.n	800d7c4 <__ssputs_r+0x5c>
 800d802:	6921      	ldr	r1, [r4, #16]
 800d804:	4650      	mov	r0, sl
 800d806:	f7ff feb7 	bl	800d578 <_free_r>
 800d80a:	230c      	movs	r3, #12
 800d80c:	f8ca 3000 	str.w	r3, [sl]
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d816:	81a3      	strh	r3, [r4, #12]
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	e7e9      	b.n	800d7f2 <__ssputs_r+0x8a>
	...

0800d820 <_svfiprintf_r>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4698      	mov	r8, r3
 800d826:	898b      	ldrh	r3, [r1, #12]
 800d828:	061b      	lsls	r3, r3, #24
 800d82a:	b09d      	sub	sp, #116	@ 0x74
 800d82c:	4607      	mov	r7, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	4614      	mov	r4, r2
 800d832:	d510      	bpl.n	800d856 <_svfiprintf_r+0x36>
 800d834:	690b      	ldr	r3, [r1, #16]
 800d836:	b973      	cbnz	r3, 800d856 <_svfiprintf_r+0x36>
 800d838:	2140      	movs	r1, #64	@ 0x40
 800d83a:	f7ff ff09 	bl	800d650 <_malloc_r>
 800d83e:	6028      	str	r0, [r5, #0]
 800d840:	6128      	str	r0, [r5, #16]
 800d842:	b930      	cbnz	r0, 800d852 <_svfiprintf_r+0x32>
 800d844:	230c      	movs	r3, #12
 800d846:	603b      	str	r3, [r7, #0]
 800d848:	f04f 30ff 	mov.w	r0, #4294967295
 800d84c:	b01d      	add	sp, #116	@ 0x74
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	2340      	movs	r3, #64	@ 0x40
 800d854:	616b      	str	r3, [r5, #20]
 800d856:	2300      	movs	r3, #0
 800d858:	9309      	str	r3, [sp, #36]	@ 0x24
 800d85a:	2320      	movs	r3, #32
 800d85c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d860:	f8cd 800c 	str.w	r8, [sp, #12]
 800d864:	2330      	movs	r3, #48	@ 0x30
 800d866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da04 <_svfiprintf_r+0x1e4>
 800d86a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d86e:	f04f 0901 	mov.w	r9, #1
 800d872:	4623      	mov	r3, r4
 800d874:	469a      	mov	sl, r3
 800d876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d87a:	b10a      	cbz	r2, 800d880 <_svfiprintf_r+0x60>
 800d87c:	2a25      	cmp	r2, #37	@ 0x25
 800d87e:	d1f9      	bne.n	800d874 <_svfiprintf_r+0x54>
 800d880:	ebba 0b04 	subs.w	fp, sl, r4
 800d884:	d00b      	beq.n	800d89e <_svfiprintf_r+0x7e>
 800d886:	465b      	mov	r3, fp
 800d888:	4622      	mov	r2, r4
 800d88a:	4629      	mov	r1, r5
 800d88c:	4638      	mov	r0, r7
 800d88e:	f7ff ff6b 	bl	800d768 <__ssputs_r>
 800d892:	3001      	adds	r0, #1
 800d894:	f000 80a7 	beq.w	800d9e6 <_svfiprintf_r+0x1c6>
 800d898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d89a:	445a      	add	r2, fp
 800d89c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d89e:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 809f 	beq.w	800d9e6 <_svfiprintf_r+0x1c6>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8b2:	f10a 0a01 	add.w	sl, sl, #1
 800d8b6:	9304      	str	r3, [sp, #16]
 800d8b8:	9307      	str	r3, [sp, #28]
 800d8ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8be:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8c0:	4654      	mov	r4, sl
 800d8c2:	2205      	movs	r2, #5
 800d8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c8:	484e      	ldr	r0, [pc, #312]	@ (800da04 <_svfiprintf_r+0x1e4>)
 800d8ca:	f7f2 fc89 	bl	80001e0 <memchr>
 800d8ce:	9a04      	ldr	r2, [sp, #16]
 800d8d0:	b9d8      	cbnz	r0, 800d90a <_svfiprintf_r+0xea>
 800d8d2:	06d0      	lsls	r0, r2, #27
 800d8d4:	bf44      	itt	mi
 800d8d6:	2320      	movmi	r3, #32
 800d8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8dc:	0711      	lsls	r1, r2, #28
 800d8de:	bf44      	itt	mi
 800d8e0:	232b      	movmi	r3, #43	@ 0x2b
 800d8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ec:	d015      	beq.n	800d91a <_svfiprintf_r+0xfa>
 800d8ee:	9a07      	ldr	r2, [sp, #28]
 800d8f0:	4654      	mov	r4, sl
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	f04f 0c0a 	mov.w	ip, #10
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8fe:	3b30      	subs	r3, #48	@ 0x30
 800d900:	2b09      	cmp	r3, #9
 800d902:	d94b      	bls.n	800d99c <_svfiprintf_r+0x17c>
 800d904:	b1b0      	cbz	r0, 800d934 <_svfiprintf_r+0x114>
 800d906:	9207      	str	r2, [sp, #28]
 800d908:	e014      	b.n	800d934 <_svfiprintf_r+0x114>
 800d90a:	eba0 0308 	sub.w	r3, r0, r8
 800d90e:	fa09 f303 	lsl.w	r3, r9, r3
 800d912:	4313      	orrs	r3, r2
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	46a2      	mov	sl, r4
 800d918:	e7d2      	b.n	800d8c0 <_svfiprintf_r+0xa0>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	1d19      	adds	r1, r3, #4
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	9103      	str	r1, [sp, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	bfbb      	ittet	lt
 800d926:	425b      	neglt	r3, r3
 800d928:	f042 0202 	orrlt.w	r2, r2, #2
 800d92c:	9307      	strge	r3, [sp, #28]
 800d92e:	9307      	strlt	r3, [sp, #28]
 800d930:	bfb8      	it	lt
 800d932:	9204      	strlt	r2, [sp, #16]
 800d934:	7823      	ldrb	r3, [r4, #0]
 800d936:	2b2e      	cmp	r3, #46	@ 0x2e
 800d938:	d10a      	bne.n	800d950 <_svfiprintf_r+0x130>
 800d93a:	7863      	ldrb	r3, [r4, #1]
 800d93c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d93e:	d132      	bne.n	800d9a6 <_svfiprintf_r+0x186>
 800d940:	9b03      	ldr	r3, [sp, #12]
 800d942:	1d1a      	adds	r2, r3, #4
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	9203      	str	r2, [sp, #12]
 800d948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d94c:	3402      	adds	r4, #2
 800d94e:	9305      	str	r3, [sp, #20]
 800d950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da14 <_svfiprintf_r+0x1f4>
 800d954:	7821      	ldrb	r1, [r4, #0]
 800d956:	2203      	movs	r2, #3
 800d958:	4650      	mov	r0, sl
 800d95a:	f7f2 fc41 	bl	80001e0 <memchr>
 800d95e:	b138      	cbz	r0, 800d970 <_svfiprintf_r+0x150>
 800d960:	9b04      	ldr	r3, [sp, #16]
 800d962:	eba0 000a 	sub.w	r0, r0, sl
 800d966:	2240      	movs	r2, #64	@ 0x40
 800d968:	4082      	lsls	r2, r0
 800d96a:	4313      	orrs	r3, r2
 800d96c:	3401      	adds	r4, #1
 800d96e:	9304      	str	r3, [sp, #16]
 800d970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d974:	4824      	ldr	r0, [pc, #144]	@ (800da08 <_svfiprintf_r+0x1e8>)
 800d976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d97a:	2206      	movs	r2, #6
 800d97c:	f7f2 fc30 	bl	80001e0 <memchr>
 800d980:	2800      	cmp	r0, #0
 800d982:	d036      	beq.n	800d9f2 <_svfiprintf_r+0x1d2>
 800d984:	4b21      	ldr	r3, [pc, #132]	@ (800da0c <_svfiprintf_r+0x1ec>)
 800d986:	bb1b      	cbnz	r3, 800d9d0 <_svfiprintf_r+0x1b0>
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	3307      	adds	r3, #7
 800d98c:	f023 0307 	bic.w	r3, r3, #7
 800d990:	3308      	adds	r3, #8
 800d992:	9303      	str	r3, [sp, #12]
 800d994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d996:	4433      	add	r3, r6
 800d998:	9309      	str	r3, [sp, #36]	@ 0x24
 800d99a:	e76a      	b.n	800d872 <_svfiprintf_r+0x52>
 800d99c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	2001      	movs	r0, #1
 800d9a4:	e7a8      	b.n	800d8f8 <_svfiprintf_r+0xd8>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	3401      	adds	r4, #1
 800d9aa:	9305      	str	r3, [sp, #20]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	f04f 0c0a 	mov.w	ip, #10
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9b8:	3a30      	subs	r2, #48	@ 0x30
 800d9ba:	2a09      	cmp	r2, #9
 800d9bc:	d903      	bls.n	800d9c6 <_svfiprintf_r+0x1a6>
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d0c6      	beq.n	800d950 <_svfiprintf_r+0x130>
 800d9c2:	9105      	str	r1, [sp, #20]
 800d9c4:	e7c4      	b.n	800d950 <_svfiprintf_r+0x130>
 800d9c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e7f0      	b.n	800d9b2 <_svfiprintf_r+0x192>
 800d9d0:	ab03      	add	r3, sp, #12
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	462a      	mov	r2, r5
 800d9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800da10 <_svfiprintf_r+0x1f0>)
 800d9d8:	a904      	add	r1, sp, #16
 800d9da:	4638      	mov	r0, r7
 800d9dc:	f3af 8000 	nop.w
 800d9e0:	1c42      	adds	r2, r0, #1
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	d1d6      	bne.n	800d994 <_svfiprintf_r+0x174>
 800d9e6:	89ab      	ldrh	r3, [r5, #12]
 800d9e8:	065b      	lsls	r3, r3, #25
 800d9ea:	f53f af2d 	bmi.w	800d848 <_svfiprintf_r+0x28>
 800d9ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9f0:	e72c      	b.n	800d84c <_svfiprintf_r+0x2c>
 800d9f2:	ab03      	add	r3, sp, #12
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	462a      	mov	r2, r5
 800d9f8:	4b05      	ldr	r3, [pc, #20]	@ (800da10 <_svfiprintf_r+0x1f0>)
 800d9fa:	a904      	add	r1, sp, #16
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f000 f879 	bl	800daf4 <_printf_i>
 800da02:	e7ed      	b.n	800d9e0 <_svfiprintf_r+0x1c0>
 800da04:	0800f128 	.word	0x0800f128
 800da08:	0800f132 	.word	0x0800f132
 800da0c:	00000000 	.word	0x00000000
 800da10:	0800d769 	.word	0x0800d769
 800da14:	0800f12e 	.word	0x0800f12e

0800da18 <_printf_common>:
 800da18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da1c:	4616      	mov	r6, r2
 800da1e:	4698      	mov	r8, r3
 800da20:	688a      	ldr	r2, [r1, #8]
 800da22:	690b      	ldr	r3, [r1, #16]
 800da24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da28:	4293      	cmp	r3, r2
 800da2a:	bfb8      	it	lt
 800da2c:	4613      	movlt	r3, r2
 800da2e:	6033      	str	r3, [r6, #0]
 800da30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da34:	4607      	mov	r7, r0
 800da36:	460c      	mov	r4, r1
 800da38:	b10a      	cbz	r2, 800da3e <_printf_common+0x26>
 800da3a:	3301      	adds	r3, #1
 800da3c:	6033      	str	r3, [r6, #0]
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	0699      	lsls	r1, r3, #26
 800da42:	bf42      	ittt	mi
 800da44:	6833      	ldrmi	r3, [r6, #0]
 800da46:	3302      	addmi	r3, #2
 800da48:	6033      	strmi	r3, [r6, #0]
 800da4a:	6825      	ldr	r5, [r4, #0]
 800da4c:	f015 0506 	ands.w	r5, r5, #6
 800da50:	d106      	bne.n	800da60 <_printf_common+0x48>
 800da52:	f104 0a19 	add.w	sl, r4, #25
 800da56:	68e3      	ldr	r3, [r4, #12]
 800da58:	6832      	ldr	r2, [r6, #0]
 800da5a:	1a9b      	subs	r3, r3, r2
 800da5c:	42ab      	cmp	r3, r5
 800da5e:	dc26      	bgt.n	800daae <_printf_common+0x96>
 800da60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da64:	6822      	ldr	r2, [r4, #0]
 800da66:	3b00      	subs	r3, #0
 800da68:	bf18      	it	ne
 800da6a:	2301      	movne	r3, #1
 800da6c:	0692      	lsls	r2, r2, #26
 800da6e:	d42b      	bmi.n	800dac8 <_printf_common+0xb0>
 800da70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da74:	4641      	mov	r1, r8
 800da76:	4638      	mov	r0, r7
 800da78:	47c8      	blx	r9
 800da7a:	3001      	adds	r0, #1
 800da7c:	d01e      	beq.n	800dabc <_printf_common+0xa4>
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	6922      	ldr	r2, [r4, #16]
 800da82:	f003 0306 	and.w	r3, r3, #6
 800da86:	2b04      	cmp	r3, #4
 800da88:	bf02      	ittt	eq
 800da8a:	68e5      	ldreq	r5, [r4, #12]
 800da8c:	6833      	ldreq	r3, [r6, #0]
 800da8e:	1aed      	subeq	r5, r5, r3
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	bf0c      	ite	eq
 800da94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da98:	2500      	movne	r5, #0
 800da9a:	4293      	cmp	r3, r2
 800da9c:	bfc4      	itt	gt
 800da9e:	1a9b      	subgt	r3, r3, r2
 800daa0:	18ed      	addgt	r5, r5, r3
 800daa2:	2600      	movs	r6, #0
 800daa4:	341a      	adds	r4, #26
 800daa6:	42b5      	cmp	r5, r6
 800daa8:	d11a      	bne.n	800dae0 <_printf_common+0xc8>
 800daaa:	2000      	movs	r0, #0
 800daac:	e008      	b.n	800dac0 <_printf_common+0xa8>
 800daae:	2301      	movs	r3, #1
 800dab0:	4652      	mov	r2, sl
 800dab2:	4641      	mov	r1, r8
 800dab4:	4638      	mov	r0, r7
 800dab6:	47c8      	blx	r9
 800dab8:	3001      	adds	r0, #1
 800daba:	d103      	bne.n	800dac4 <_printf_common+0xac>
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac4:	3501      	adds	r5, #1
 800dac6:	e7c6      	b.n	800da56 <_printf_common+0x3e>
 800dac8:	18e1      	adds	r1, r4, r3
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	2030      	movs	r0, #48	@ 0x30
 800dace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dad2:	4422      	add	r2, r4
 800dad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dadc:	3302      	adds	r3, #2
 800dade:	e7c7      	b.n	800da70 <_printf_common+0x58>
 800dae0:	2301      	movs	r3, #1
 800dae2:	4622      	mov	r2, r4
 800dae4:	4641      	mov	r1, r8
 800dae6:	4638      	mov	r0, r7
 800dae8:	47c8      	blx	r9
 800daea:	3001      	adds	r0, #1
 800daec:	d0e6      	beq.n	800dabc <_printf_common+0xa4>
 800daee:	3601      	adds	r6, #1
 800daf0:	e7d9      	b.n	800daa6 <_printf_common+0x8e>
	...

0800daf4 <_printf_i>:
 800daf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daf8:	7e0f      	ldrb	r7, [r1, #24]
 800dafa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dafc:	2f78      	cmp	r7, #120	@ 0x78
 800dafe:	4691      	mov	r9, r2
 800db00:	4680      	mov	r8, r0
 800db02:	460c      	mov	r4, r1
 800db04:	469a      	mov	sl, r3
 800db06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db0a:	d807      	bhi.n	800db1c <_printf_i+0x28>
 800db0c:	2f62      	cmp	r7, #98	@ 0x62
 800db0e:	d80a      	bhi.n	800db26 <_printf_i+0x32>
 800db10:	2f00      	cmp	r7, #0
 800db12:	f000 80d2 	beq.w	800dcba <_printf_i+0x1c6>
 800db16:	2f58      	cmp	r7, #88	@ 0x58
 800db18:	f000 80b9 	beq.w	800dc8e <_printf_i+0x19a>
 800db1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db24:	e03a      	b.n	800db9c <_printf_i+0xa8>
 800db26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db2a:	2b15      	cmp	r3, #21
 800db2c:	d8f6      	bhi.n	800db1c <_printf_i+0x28>
 800db2e:	a101      	add	r1, pc, #4	@ (adr r1, 800db34 <_printf_i+0x40>)
 800db30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db34:	0800db8d 	.word	0x0800db8d
 800db38:	0800dba1 	.word	0x0800dba1
 800db3c:	0800db1d 	.word	0x0800db1d
 800db40:	0800db1d 	.word	0x0800db1d
 800db44:	0800db1d 	.word	0x0800db1d
 800db48:	0800db1d 	.word	0x0800db1d
 800db4c:	0800dba1 	.word	0x0800dba1
 800db50:	0800db1d 	.word	0x0800db1d
 800db54:	0800db1d 	.word	0x0800db1d
 800db58:	0800db1d 	.word	0x0800db1d
 800db5c:	0800db1d 	.word	0x0800db1d
 800db60:	0800dca1 	.word	0x0800dca1
 800db64:	0800dbcb 	.word	0x0800dbcb
 800db68:	0800dc5b 	.word	0x0800dc5b
 800db6c:	0800db1d 	.word	0x0800db1d
 800db70:	0800db1d 	.word	0x0800db1d
 800db74:	0800dcc3 	.word	0x0800dcc3
 800db78:	0800db1d 	.word	0x0800db1d
 800db7c:	0800dbcb 	.word	0x0800dbcb
 800db80:	0800db1d 	.word	0x0800db1d
 800db84:	0800db1d 	.word	0x0800db1d
 800db88:	0800dc63 	.word	0x0800dc63
 800db8c:	6833      	ldr	r3, [r6, #0]
 800db8e:	1d1a      	adds	r2, r3, #4
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	6032      	str	r2, [r6, #0]
 800db94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db9c:	2301      	movs	r3, #1
 800db9e:	e09d      	b.n	800dcdc <_printf_i+0x1e8>
 800dba0:	6833      	ldr	r3, [r6, #0]
 800dba2:	6820      	ldr	r0, [r4, #0]
 800dba4:	1d19      	adds	r1, r3, #4
 800dba6:	6031      	str	r1, [r6, #0]
 800dba8:	0606      	lsls	r6, r0, #24
 800dbaa:	d501      	bpl.n	800dbb0 <_printf_i+0xbc>
 800dbac:	681d      	ldr	r5, [r3, #0]
 800dbae:	e003      	b.n	800dbb8 <_printf_i+0xc4>
 800dbb0:	0645      	lsls	r5, r0, #25
 800dbb2:	d5fb      	bpl.n	800dbac <_printf_i+0xb8>
 800dbb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbb8:	2d00      	cmp	r5, #0
 800dbba:	da03      	bge.n	800dbc4 <_printf_i+0xd0>
 800dbbc:	232d      	movs	r3, #45	@ 0x2d
 800dbbe:	426d      	negs	r5, r5
 800dbc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbc4:	4859      	ldr	r0, [pc, #356]	@ (800dd2c <_printf_i+0x238>)
 800dbc6:	230a      	movs	r3, #10
 800dbc8:	e011      	b.n	800dbee <_printf_i+0xfa>
 800dbca:	6821      	ldr	r1, [r4, #0]
 800dbcc:	6833      	ldr	r3, [r6, #0]
 800dbce:	0608      	lsls	r0, r1, #24
 800dbd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbd4:	d402      	bmi.n	800dbdc <_printf_i+0xe8>
 800dbd6:	0649      	lsls	r1, r1, #25
 800dbd8:	bf48      	it	mi
 800dbda:	b2ad      	uxthmi	r5, r5
 800dbdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbde:	4853      	ldr	r0, [pc, #332]	@ (800dd2c <_printf_i+0x238>)
 800dbe0:	6033      	str	r3, [r6, #0]
 800dbe2:	bf14      	ite	ne
 800dbe4:	230a      	movne	r3, #10
 800dbe6:	2308      	moveq	r3, #8
 800dbe8:	2100      	movs	r1, #0
 800dbea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbee:	6866      	ldr	r6, [r4, #4]
 800dbf0:	60a6      	str	r6, [r4, #8]
 800dbf2:	2e00      	cmp	r6, #0
 800dbf4:	bfa2      	ittt	ge
 800dbf6:	6821      	ldrge	r1, [r4, #0]
 800dbf8:	f021 0104 	bicge.w	r1, r1, #4
 800dbfc:	6021      	strge	r1, [r4, #0]
 800dbfe:	b90d      	cbnz	r5, 800dc04 <_printf_i+0x110>
 800dc00:	2e00      	cmp	r6, #0
 800dc02:	d04b      	beq.n	800dc9c <_printf_i+0x1a8>
 800dc04:	4616      	mov	r6, r2
 800dc06:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc0a:	fb03 5711 	mls	r7, r3, r1, r5
 800dc0e:	5dc7      	ldrb	r7, [r0, r7]
 800dc10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc14:	462f      	mov	r7, r5
 800dc16:	42bb      	cmp	r3, r7
 800dc18:	460d      	mov	r5, r1
 800dc1a:	d9f4      	bls.n	800dc06 <_printf_i+0x112>
 800dc1c:	2b08      	cmp	r3, #8
 800dc1e:	d10b      	bne.n	800dc38 <_printf_i+0x144>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	07df      	lsls	r7, r3, #31
 800dc24:	d508      	bpl.n	800dc38 <_printf_i+0x144>
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	6861      	ldr	r1, [r4, #4]
 800dc2a:	4299      	cmp	r1, r3
 800dc2c:	bfde      	ittt	le
 800dc2e:	2330      	movle	r3, #48	@ 0x30
 800dc30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc38:	1b92      	subs	r2, r2, r6
 800dc3a:	6122      	str	r2, [r4, #16]
 800dc3c:	f8cd a000 	str.w	sl, [sp]
 800dc40:	464b      	mov	r3, r9
 800dc42:	aa03      	add	r2, sp, #12
 800dc44:	4621      	mov	r1, r4
 800dc46:	4640      	mov	r0, r8
 800dc48:	f7ff fee6 	bl	800da18 <_printf_common>
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	d14a      	bne.n	800dce6 <_printf_i+0x1f2>
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
 800dc54:	b004      	add	sp, #16
 800dc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	f043 0320 	orr.w	r3, r3, #32
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	4833      	ldr	r0, [pc, #204]	@ (800dd30 <_printf_i+0x23c>)
 800dc64:	2778      	movs	r7, #120	@ 0x78
 800dc66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	6831      	ldr	r1, [r6, #0]
 800dc6e:	061f      	lsls	r7, r3, #24
 800dc70:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc74:	d402      	bmi.n	800dc7c <_printf_i+0x188>
 800dc76:	065f      	lsls	r7, r3, #25
 800dc78:	bf48      	it	mi
 800dc7a:	b2ad      	uxthmi	r5, r5
 800dc7c:	6031      	str	r1, [r6, #0]
 800dc7e:	07d9      	lsls	r1, r3, #31
 800dc80:	bf44      	itt	mi
 800dc82:	f043 0320 	orrmi.w	r3, r3, #32
 800dc86:	6023      	strmi	r3, [r4, #0]
 800dc88:	b11d      	cbz	r5, 800dc92 <_printf_i+0x19e>
 800dc8a:	2310      	movs	r3, #16
 800dc8c:	e7ac      	b.n	800dbe8 <_printf_i+0xf4>
 800dc8e:	4827      	ldr	r0, [pc, #156]	@ (800dd2c <_printf_i+0x238>)
 800dc90:	e7e9      	b.n	800dc66 <_printf_i+0x172>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	f023 0320 	bic.w	r3, r3, #32
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	e7f6      	b.n	800dc8a <_printf_i+0x196>
 800dc9c:	4616      	mov	r6, r2
 800dc9e:	e7bd      	b.n	800dc1c <_printf_i+0x128>
 800dca0:	6833      	ldr	r3, [r6, #0]
 800dca2:	6825      	ldr	r5, [r4, #0]
 800dca4:	6961      	ldr	r1, [r4, #20]
 800dca6:	1d18      	adds	r0, r3, #4
 800dca8:	6030      	str	r0, [r6, #0]
 800dcaa:	062e      	lsls	r6, r5, #24
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	d501      	bpl.n	800dcb4 <_printf_i+0x1c0>
 800dcb0:	6019      	str	r1, [r3, #0]
 800dcb2:	e002      	b.n	800dcba <_printf_i+0x1c6>
 800dcb4:	0668      	lsls	r0, r5, #25
 800dcb6:	d5fb      	bpl.n	800dcb0 <_printf_i+0x1bc>
 800dcb8:	8019      	strh	r1, [r3, #0]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	6123      	str	r3, [r4, #16]
 800dcbe:	4616      	mov	r6, r2
 800dcc0:	e7bc      	b.n	800dc3c <_printf_i+0x148>
 800dcc2:	6833      	ldr	r3, [r6, #0]
 800dcc4:	1d1a      	adds	r2, r3, #4
 800dcc6:	6032      	str	r2, [r6, #0]
 800dcc8:	681e      	ldr	r6, [r3, #0]
 800dcca:	6862      	ldr	r2, [r4, #4]
 800dccc:	2100      	movs	r1, #0
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f7f2 fa86 	bl	80001e0 <memchr>
 800dcd4:	b108      	cbz	r0, 800dcda <_printf_i+0x1e6>
 800dcd6:	1b80      	subs	r0, r0, r6
 800dcd8:	6060      	str	r0, [r4, #4]
 800dcda:	6863      	ldr	r3, [r4, #4]
 800dcdc:	6123      	str	r3, [r4, #16]
 800dcde:	2300      	movs	r3, #0
 800dce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dce4:	e7aa      	b.n	800dc3c <_printf_i+0x148>
 800dce6:	6923      	ldr	r3, [r4, #16]
 800dce8:	4632      	mov	r2, r6
 800dcea:	4649      	mov	r1, r9
 800dcec:	4640      	mov	r0, r8
 800dcee:	47d0      	blx	sl
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	d0ad      	beq.n	800dc50 <_printf_i+0x15c>
 800dcf4:	6823      	ldr	r3, [r4, #0]
 800dcf6:	079b      	lsls	r3, r3, #30
 800dcf8:	d413      	bmi.n	800dd22 <_printf_i+0x22e>
 800dcfa:	68e0      	ldr	r0, [r4, #12]
 800dcfc:	9b03      	ldr	r3, [sp, #12]
 800dcfe:	4298      	cmp	r0, r3
 800dd00:	bfb8      	it	lt
 800dd02:	4618      	movlt	r0, r3
 800dd04:	e7a6      	b.n	800dc54 <_printf_i+0x160>
 800dd06:	2301      	movs	r3, #1
 800dd08:	4632      	mov	r2, r6
 800dd0a:	4649      	mov	r1, r9
 800dd0c:	4640      	mov	r0, r8
 800dd0e:	47d0      	blx	sl
 800dd10:	3001      	adds	r0, #1
 800dd12:	d09d      	beq.n	800dc50 <_printf_i+0x15c>
 800dd14:	3501      	adds	r5, #1
 800dd16:	68e3      	ldr	r3, [r4, #12]
 800dd18:	9903      	ldr	r1, [sp, #12]
 800dd1a:	1a5b      	subs	r3, r3, r1
 800dd1c:	42ab      	cmp	r3, r5
 800dd1e:	dcf2      	bgt.n	800dd06 <_printf_i+0x212>
 800dd20:	e7eb      	b.n	800dcfa <_printf_i+0x206>
 800dd22:	2500      	movs	r5, #0
 800dd24:	f104 0619 	add.w	r6, r4, #25
 800dd28:	e7f5      	b.n	800dd16 <_printf_i+0x222>
 800dd2a:	bf00      	nop
 800dd2c:	0800f139 	.word	0x0800f139
 800dd30:	0800f14a 	.word	0x0800f14a

0800dd34 <memmove>:
 800dd34:	4288      	cmp	r0, r1
 800dd36:	b510      	push	{r4, lr}
 800dd38:	eb01 0402 	add.w	r4, r1, r2
 800dd3c:	d902      	bls.n	800dd44 <memmove+0x10>
 800dd3e:	4284      	cmp	r4, r0
 800dd40:	4623      	mov	r3, r4
 800dd42:	d807      	bhi.n	800dd54 <memmove+0x20>
 800dd44:	1e43      	subs	r3, r0, #1
 800dd46:	42a1      	cmp	r1, r4
 800dd48:	d008      	beq.n	800dd5c <memmove+0x28>
 800dd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd52:	e7f8      	b.n	800dd46 <memmove+0x12>
 800dd54:	4402      	add	r2, r0
 800dd56:	4601      	mov	r1, r0
 800dd58:	428a      	cmp	r2, r1
 800dd5a:	d100      	bne.n	800dd5e <memmove+0x2a>
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd66:	e7f7      	b.n	800dd58 <memmove+0x24>

0800dd68 <_sbrk_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d06      	ldr	r5, [pc, #24]	@ (800dd84 <_sbrk_r+0x1c>)
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4608      	mov	r0, r1
 800dd72:	602b      	str	r3, [r5, #0]
 800dd74:	f7f6 fc9e 	bl	80046b4 <_sbrk>
 800dd78:	1c43      	adds	r3, r0, #1
 800dd7a:	d102      	bne.n	800dd82 <_sbrk_r+0x1a>
 800dd7c:	682b      	ldr	r3, [r5, #0]
 800dd7e:	b103      	cbz	r3, 800dd82 <_sbrk_r+0x1a>
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	bd38      	pop	{r3, r4, r5, pc}
 800dd84:	200024b8 	.word	0x200024b8

0800dd88 <_realloc_r>:
 800dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8c:	4680      	mov	r8, r0
 800dd8e:	4615      	mov	r5, r2
 800dd90:	460c      	mov	r4, r1
 800dd92:	b921      	cbnz	r1, 800dd9e <_realloc_r+0x16>
 800dd94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd98:	4611      	mov	r1, r2
 800dd9a:	f7ff bc59 	b.w	800d650 <_malloc_r>
 800dd9e:	b92a      	cbnz	r2, 800ddac <_realloc_r+0x24>
 800dda0:	f7ff fbea 	bl	800d578 <_free_r>
 800dda4:	2400      	movs	r4, #0
 800dda6:	4620      	mov	r0, r4
 800dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddac:	f000 f81a 	bl	800dde4 <_malloc_usable_size_r>
 800ddb0:	4285      	cmp	r5, r0
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	d802      	bhi.n	800ddbc <_realloc_r+0x34>
 800ddb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddba:	d8f4      	bhi.n	800dda6 <_realloc_r+0x1e>
 800ddbc:	4629      	mov	r1, r5
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	f7ff fc46 	bl	800d650 <_malloc_r>
 800ddc4:	4607      	mov	r7, r0
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d0ec      	beq.n	800dda4 <_realloc_r+0x1c>
 800ddca:	42b5      	cmp	r5, r6
 800ddcc:	462a      	mov	r2, r5
 800ddce:	4621      	mov	r1, r4
 800ddd0:	bf28      	it	cs
 800ddd2:	4632      	movcs	r2, r6
 800ddd4:	f7ff fbc2 	bl	800d55c <memcpy>
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4640      	mov	r0, r8
 800dddc:	f7ff fbcc 	bl	800d578 <_free_r>
 800dde0:	463c      	mov	r4, r7
 800dde2:	e7e0      	b.n	800dda6 <_realloc_r+0x1e>

0800dde4 <_malloc_usable_size_r>:
 800dde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde8:	1f18      	subs	r0, r3, #4
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bfbc      	itt	lt
 800ddee:	580b      	ldrlt	r3, [r1, r0]
 800ddf0:	18c0      	addlt	r0, r0, r3
 800ddf2:	4770      	bx	lr

0800ddf4 <_init>:
 800ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf6:	bf00      	nop
 800ddf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfa:	bc08      	pop	{r3}
 800ddfc:	469e      	mov	lr, r3
 800ddfe:	4770      	bx	lr

0800de00 <_fini>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	bf00      	nop
 800de04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de06:	bc08      	pop	{r3}
 800de08:	469e      	mov	lr, r3
 800de0a:	4770      	bx	lr
